// Generated by @wagmi/cli@0.1.15 on 9/7/2023 at 10:21:15â€¯AM

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// collateralChainlinkMock/MockV3Aggregator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const collateralChainlinkMockMockV3AggregatorABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_decimals', internalType: 'uint8', type: 'uint8' },
      { name: '_initialAnswer', internalType: 'int256', type: 'int256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'description',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'getAnswer',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_roundId', internalType: 'uint80', type: 'uint80' }],
    name: 'getRoundData',
    outputs: [
      { name: 'roundId', internalType: 'uint80', type: 'uint80' },
      { name: 'answer', internalType: 'int256', type: 'int256' },
      { name: 'startedAt', internalType: 'uint256', type: 'uint256' },
      { name: 'updatedAt', internalType: 'uint256', type: 'uint256' },
      { name: 'answeredInRound', internalType: 'uint80', type: 'uint80' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'getTimestamp',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'latestAnswer',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'latestRound',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'latestRoundData',
    outputs: [
      { name: 'roundId', internalType: 'uint80', type: 'uint80' },
      { name: 'answer', internalType: 'int256', type: 'int256' },
      { name: 'startedAt', internalType: 'uint256', type: 'uint256' },
      { name: 'updatedAt', internalType: 'uint256', type: 'uint256' },
      { name: 'answeredInRound', internalType: 'uint80', type: 'uint80' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'latestTimestamp',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_answer', internalType: 'int256', type: 'int256' }],
    name: 'updateAnswer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_roundId', internalType: 'uint80', type: 'uint80' },
      { name: '_answer', internalType: 'int256', type: 'int256' },
      { name: '_timestamp', internalType: 'uint256', type: 'uint256' },
      { name: '_startedAt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateRoundData',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

export const collateralChainlinkMockMockV3AggregatorAddress =
  '0x27F4A37Ce881a405BdceCa1bc91E2fF2622E763F' as const

export const collateralChainlinkMockMockV3AggregatorConfig = {
  address: collateralChainlinkMockMockV3AggregatorAddress,
  abi: collateralChainlinkMockMockV3AggregatorABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// collateralToken/MintableToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const collateralTokenMintableTokenABI = [
  {
    stateMutability: 'payable',
    type: 'constructor',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'initialSupply', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const collateralTokenMintableTokenAddress =
  '0x7B05A2baA61dFd56951c14597550c803e92B1C95' as const

export const collateralTokenMintableTokenConfig = {
  address: collateralTokenMintableTokenAddress,
  abi: collateralTokenMintableTokenABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/AccountProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketAccountProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'CannotSelfApprove',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IndexOverrun',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidTransferRecipient',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenAlreadyMinted',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenDoesNotExist',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
    name: 'setBaseTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

export const perpsMarketAccountProxyAddress =
  '0x99FF5BC32A9A9aEd9B060739ce9e232F6b5C1e1A' as const

export const perpsMarketAccountProxyConfig = {
  address: perpsMarketAccountProxyAddress,
  abi: perpsMarketAccountProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/AsyncOrderModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketAsyncOrderModuleABI = [
  { type: 'error', inputs: [], name: 'FlaggedForLiquidation' },
  {
    type: 'error',
    inputs: [
      { name: 'availableMargin', internalType: 'uint256', type: 'uint256' },
      { name: 'minMargin', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientMargin',
  },
  {
    type: 'error',
    inputs: [{ name: 'leftover', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientMarginError',
  },
  {
    type: 'error',
    inputs: [
      { name: 'status', internalType: 'enum AsyncOrder.Status', type: 'uint8' },
    ],
    name: 'InvalidOrder',
  },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'urls', internalType: 'string[]', type: 'string[]' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'callbackFunction', internalType: 'bytes4', type: 'bytes4' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'OffchainLookup',
  },
  { type: 'error', inputs: [], name: 'OrderNotValid' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'error',
    inputs: [
      { name: 'deviation', internalType: 'uint256', type: 'uint256' },
      { name: 'tolerance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PriceDeviationToleranceExceeded',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'strategyType',
        internalType: 'enum SettlementStrategy.Type',
        type: 'uint8',
      },
    ],
    name: 'SettlementStrategyNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
      {
        name: 'settlementExpiration',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'SettlementWindowExpired',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  { type: 'error', inputs: [], name: 'ZeroSizeOrder' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PRECISION',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'commitment',
        internalType: 'struct AsyncOrder.OrderCommitmentRequest',
        type: 'tuple',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'accountId', internalType: 'uint128', type: 'uint128' },
          { name: 'sizeDelta', internalType: 'int256', type: 'int256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'acceptablePrice', internalType: 'uint256', type: 'uint256' },
          { name: 'trackingCode', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'commitOrder',
    outputs: [
      {
        name: 'retOrder',
        internalType: 'struct AsyncOrder.Data',
        type: 'tuple',
        components: [
          { name: 'accountId', internalType: 'uint128', type: 'uint128' },
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'sizeDelta', internalType: 'int256', type: 'int256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          { name: 'acceptablePrice', internalType: 'uint256', type: 'uint256' },
          { name: 'trackingCode', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
      { name: 'fees', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'settle',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'result', internalType: 'bytes', type: 'bytes' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'settlePythOrder',
    outputs: [],
  },
] as const

export const perpsMarketAsyncOrderModuleAddress =
  '0x0E86250fEbcc22c5053cc9b7D6cB1E0a5F80F63d' as const

export const perpsMarketAsyncOrderModuleConfig = {
  address: perpsMarketAsyncOrderModuleAddress,
  abi: perpsMarketAsyncOrderModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/AtomicOrderModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketAtomicOrderModuleABI = [] as const

export const perpsMarketAtomicOrderModuleAddress =
  '0xd9c6E345b7e8381b7327c8dB8C84ABafc6CbF119' as const

export const perpsMarketAtomicOrderModuleConfig = {
  address: perpsMarketAtomicOrderModuleAddress,
  abi: perpsMarketAtomicOrderModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/CollateralModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketCollateralModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'FlaggedForLiquidation' },
  {
    type: 'error',
    inputs: [
      { name: 'available', internalType: 'uint256', type: 'uint256' },
      { name: 'required', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralAvailableForWithdraw',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MaxCollateralExceeded',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amountDelta', internalType: 'int256', type: 'int256' },
    ],
    name: 'modifyCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxCollateralAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMaxCollateralAmount',
    outputs: [],
  },
] as const

export const perpsMarketCollateralModuleAddress =
  '0x621A2d7Bce753321f793172511D1C71d6A39E5d3' as const

export const perpsMarketCollateralModuleConfig = {
  address: perpsMarketCollateralModuleAddress,
  abi: perpsMarketCollateralModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/CoreModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketCoreModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const perpsMarketCoreModuleAddress =
  '0x9E300c1060815A81A145d455aDa5e0f722709f95' as const

export const perpsMarketCoreModuleConfig = {
  address: perpsMarketCoreModuleAddress,
  abi: perpsMarketCoreModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/FeatureFlagModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketFeatureFlagModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
] as const

export const perpsMarketFeatureFlagModuleAddress =
  '0x8bc7Fd740fFBc1640b3a4EE489f35250a63C20F2' as const

export const perpsMarketFeatureFlagModuleConfig = {
  address: perpsMarketFeatureFlagModuleAddress,
  abi: perpsMarketFeatureFlagModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/InitialProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketInitialProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const perpsMarketInitialProxyAddress =
  '0x02c97c94ca524fc3be68eb23459eE63014D6A69D' as const

export const perpsMarketInitialProxyConfig = {
  address: perpsMarketInitialProxyAddress,
  abi: perpsMarketInitialProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/LimitOrderModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketLimitOrderModuleABI = [] as const

export const perpsMarketLimitOrderModuleAddress =
  '0x4bd3026d3EbE3D660330b9502E07e427B4657E6a' as const

export const perpsMarketLimitOrderModuleConfig = {
  address: perpsMarketLimitOrderModuleAddress,
  abi: perpsMarketLimitOrderModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/LiquidationModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketLiquidationModuleABI = [
  {
    type: 'error',
    inputs: [
      {
        name: 'availableCollateralUsd',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'IneligibleForLiquidation',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'liquidate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'liquidateFlagged',
    outputs: [],
  },
] as const

export const perpsMarketLiquidationModuleAddress =
  '0x3e01e70C22f43d77C104817119a2a8113813aeAA' as const

export const perpsMarketLiquidationModuleConfig = {
  address: perpsMarketLiquidationModuleAddress,
  abi: perpsMarketLiquidationModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/MarketConfigurationModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketMarketConfigurationModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'strategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'addSettlementStrategy',
    outputs: [{ name: 'strategyId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'skewScale', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setSkewScale',
    outputs: [],
  },
] as const

export const perpsMarketMarketConfigurationModuleAddress =
  '0x1E02Dd580001f98D69708fF5f8bb1D6Cc38e0287' as const

export const perpsMarketMarketConfigurationModuleConfig = {
  address: perpsMarketMarketConfigurationModuleAddress,
  abi: perpsMarketMarketConfigurationModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/PerpsAccountModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketPerpsAccountModuleABI = [
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'openPosition',
    outputs: [
      { name: '', internalType: 'int256', type: 'int256' },
      { name: '', internalType: 'int256', type: 'int256' },
      { name: '', internalType: 'int256', type: 'int256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'totalAccountOpenInterest',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'totalCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

export const perpsMarketPerpsAccountModuleAddress =
  '0x12A3386bE5991E7218C2949262d92bD91dd74Ee5' as const

export const perpsMarketPerpsAccountModuleConfig = {
  address: perpsMarketPerpsAccountModuleAddress,
  abi: perpsMarketPerpsAccountModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/PerpsMarketFactoryModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketPerpsMarketFactoryModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'notNominatedAddress', internalType: 'address', type: 'address' },
    ],
    name: 'NotNominated',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'perpsMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'perpsMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'newNominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'perpsMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'MarketPriceDataUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'perpsMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'marketOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'marketSymbol',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'perpsMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'acceptMarketOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketName', internalType: 'string', type: 'string' },
      { name: 'marketSymbol', internalType: 'string', type: 'string' },
      { name: 'marketOwner', internalType: 'address', type: 'address' },
    ],
    name: 'createMarket',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'perpsMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'minimumCredit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'perpsMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateMarketOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'reportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'spotMarket',
        internalType: 'contract ISpotMarketSystem',
        type: 'address',
      },
    ],
    name: 'setSpotMarket',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'synthDeductionPriority',
        internalType: 'uint128[]',
        type: 'uint128[]',
      },
    ],
    name: 'setSynthDeductionPriority',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'synthetix',
        internalType: 'contract ISynthetixSystem',
        type: 'address',
      },
    ],
    name: 'setSynthetix',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'perpsMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'updatePriceData',
    outputs: [],
  },
] as const

export const perpsMarketPerpsMarketFactoryModuleAddress =
  '0x5B7f3A742B804fa07A39581Ac3439F9F1276cdc8' as const

export const perpsMarketPerpsMarketFactoryModuleConfig = {
  address: perpsMarketPerpsMarketFactoryModuleAddress,
  abi: perpsMarketPerpsMarketFactoryModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/PerpsMarketProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketPerpsMarketProxyABI = [
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'perpsMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'perpsMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'newNominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'perpsMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'MarketPriceDataUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'perpsMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'marketOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'marketSymbol',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'perpsMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'acceptMarketOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketName', internalType: 'string', type: 'string' },
      { name: 'marketSymbol', internalType: 'string', type: 'string' },
      { name: 'marketOwner', internalType: 'address', type: 'address' },
    ],
    name: 'createMarket',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'perpsMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'minimumCredit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'perpsMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateMarketOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'reportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'spotMarket',
        internalType: 'contract ISpotMarketSystem',
        type: 'address',
      },
    ],
    name: 'setSpotMarket',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'synthDeductionPriority',
        internalType: 'uint128[]',
        type: 'uint128[]',
      },
    ],
    name: 'setSynthDeductionPriority',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'synthetix',
        internalType: 'contract ISynthetixSystem',
        type: 'address',
      },
    ],
    name: 'setSynthetix',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'perpsMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'updatePriceData',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'openPosition',
    outputs: [
      { name: '', internalType: 'int256', type: 'int256' },
      { name: '', internalType: 'int256', type: 'int256' },
      { name: '', internalType: 'int256', type: 'int256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'totalAccountOpenInterest',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'totalCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { type: 'error', inputs: [], name: 'FlaggedForLiquidation' },
  {
    type: 'error',
    inputs: [
      { name: 'availableMargin', internalType: 'uint256', type: 'uint256' },
      { name: 'minMargin', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientMargin',
  },
  {
    type: 'error',
    inputs: [{ name: 'leftover', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientMarginError',
  },
  {
    type: 'error',
    inputs: [
      { name: 'status', internalType: 'enum AsyncOrder.Status', type: 'uint8' },
    ],
    name: 'InvalidOrder',
  },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'urls', internalType: 'string[]', type: 'string[]' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'callbackFunction', internalType: 'bytes4', type: 'bytes4' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'OffchainLookup',
  },
  { type: 'error', inputs: [], name: 'OrderNotValid' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'deviation', internalType: 'uint256', type: 'uint256' },
      { name: 'tolerance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PriceDeviationToleranceExceeded',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'strategyType',
        internalType: 'enum SettlementStrategy.Type',
        type: 'uint8',
      },
    ],
    name: 'SettlementStrategyNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
      {
        name: 'settlementExpiration',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'SettlementWindowExpired',
  },
  { type: 'error', inputs: [], name: 'ZeroSizeOrder' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PRECISION',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'commitment',
        internalType: 'struct AsyncOrder.OrderCommitmentRequest',
        type: 'tuple',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'accountId', internalType: 'uint128', type: 'uint128' },
          { name: 'sizeDelta', internalType: 'int256', type: 'int256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'acceptablePrice', internalType: 'uint256', type: 'uint256' },
          { name: 'trackingCode', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'commitOrder',
    outputs: [
      {
        name: 'retOrder',
        internalType: 'struct AsyncOrder.Data',
        type: 'tuple',
        components: [
          { name: 'accountId', internalType: 'uint128', type: 'uint128' },
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'sizeDelta', internalType: 'int256', type: 'int256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          { name: 'acceptablePrice', internalType: 'uint256', type: 'uint256' },
          { name: 'trackingCode', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
      { name: 'fees', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'settle',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'result', internalType: 'bytes', type: 'bytes' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'settlePythOrder',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'available', internalType: 'uint256', type: 'uint256' },
      { name: 'required', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralAvailableForWithdraw',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MaxCollateralExceeded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amountDelta', internalType: 'int256', type: 'int256' },
    ],
    name: 'modifyCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxCollateralAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMaxCollateralAmount',
    outputs: [],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'availableCollateralUsd',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'IneligibleForLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'liquidate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'liquidateFlagged',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'strategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'addSettlementStrategy',
    outputs: [{ name: 'strategyId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'skewScale', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setSkewScale',
    outputs: [],
  },
] as const

export const perpsMarketPerpsMarketProxyAddress =
  '0x02c97c94ca524fc3be68eb23459eE63014D6A69D' as const

export const perpsMarketPerpsMarketProxyConfig = {
  address: perpsMarketPerpsMarketProxyAddress,
  abi: perpsMarketPerpsMarketProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/PerpsMarketRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketPerpsMarketRouterABI = [
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'perpsMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'perpsMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'newNominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'perpsMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'MarketPriceDataUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'perpsMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'marketOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'marketSymbol',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'perpsMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'acceptMarketOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketName', internalType: 'string', type: 'string' },
      { name: 'marketSymbol', internalType: 'string', type: 'string' },
      { name: 'marketOwner', internalType: 'address', type: 'address' },
    ],
    name: 'createMarket',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'perpsMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'minimumCredit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'perpsMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateMarketOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'reportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'spotMarket',
        internalType: 'contract ISpotMarketSystem',
        type: 'address',
      },
    ],
    name: 'setSpotMarket',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'synthDeductionPriority',
        internalType: 'uint128[]',
        type: 'uint128[]',
      },
    ],
    name: 'setSynthDeductionPriority',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'synthetix',
        internalType: 'contract ISynthetixSystem',
        type: 'address',
      },
    ],
    name: 'setSynthetix',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'perpsMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'updatePriceData',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'openPosition',
    outputs: [
      { name: '', internalType: 'int256', type: 'int256' },
      { name: '', internalType: 'int256', type: 'int256' },
      { name: '', internalType: 'int256', type: 'int256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'totalAccountOpenInterest',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'totalCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { type: 'error', inputs: [], name: 'FlaggedForLiquidation' },
  {
    type: 'error',
    inputs: [
      { name: 'availableMargin', internalType: 'uint256', type: 'uint256' },
      { name: 'minMargin', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientMargin',
  },
  {
    type: 'error',
    inputs: [{ name: 'leftover', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientMarginError',
  },
  {
    type: 'error',
    inputs: [
      { name: 'status', internalType: 'enum AsyncOrder.Status', type: 'uint8' },
    ],
    name: 'InvalidOrder',
  },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'urls', internalType: 'string[]', type: 'string[]' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'callbackFunction', internalType: 'bytes4', type: 'bytes4' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'OffchainLookup',
  },
  { type: 'error', inputs: [], name: 'OrderNotValid' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'deviation', internalType: 'uint256', type: 'uint256' },
      { name: 'tolerance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PriceDeviationToleranceExceeded',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'strategyType',
        internalType: 'enum SettlementStrategy.Type',
        type: 'uint8',
      },
    ],
    name: 'SettlementStrategyNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
      {
        name: 'settlementExpiration',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'SettlementWindowExpired',
  },
  { type: 'error', inputs: [], name: 'ZeroSizeOrder' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PRECISION',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'commitment',
        internalType: 'struct AsyncOrder.OrderCommitmentRequest',
        type: 'tuple',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'accountId', internalType: 'uint128', type: 'uint128' },
          { name: 'sizeDelta', internalType: 'int256', type: 'int256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'acceptablePrice', internalType: 'uint256', type: 'uint256' },
          { name: 'trackingCode', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'commitOrder',
    outputs: [
      {
        name: 'retOrder',
        internalType: 'struct AsyncOrder.Data',
        type: 'tuple',
        components: [
          { name: 'accountId', internalType: 'uint128', type: 'uint128' },
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'sizeDelta', internalType: 'int256', type: 'int256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          { name: 'acceptablePrice', internalType: 'uint256', type: 'uint256' },
          { name: 'trackingCode', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
      { name: 'fees', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'settle',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'result', internalType: 'bytes', type: 'bytes' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'settlePythOrder',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'available', internalType: 'uint256', type: 'uint256' },
      { name: 'required', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralAvailableForWithdraw',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MaxCollateralExceeded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amountDelta', internalType: 'int256', type: 'int256' },
    ],
    name: 'modifyCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxCollateralAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMaxCollateralAmount',
    outputs: [],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'availableCollateralUsd',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'IneligibleForLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'liquidate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'liquidateFlagged',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'strategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'addSettlementStrategy',
    outputs: [{ name: 'strategyId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'skewScale', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setSkewScale',
    outputs: [],
  },
] as const

export const perpsMarketPerpsMarketRouterAddress =
  '0x5E24C91ec6E9f5D4746B123E177bC96BEf695c57' as const

export const perpsMarketPerpsMarketRouterConfig = {
  address: perpsMarketPerpsMarketRouterAddress,
  abi: perpsMarketPerpsMarketRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/AsyncOrderConfigurationModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketAsyncOrderConfigurationModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'strategyId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SettlementStrategyAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'strategyId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'enabled', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'SettlementStrategyUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'strategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'minimumUsdExchangeAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxRoundingLoss', internalType: 'uint256', type: 'uint256' },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'addSettlementStrategy',
    outputs: [{ name: 'strategyId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'strategyId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSettlementStrategy',
    outputs: [
      {
        name: 'settlementStrategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'minimumUsdExchangeAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxRoundingLoss', internalType: 'uint256', type: 'uint256' },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'strategyId', internalType: 'uint256', type: 'uint256' },
      { name: 'enabled', internalType: 'bool', type: 'bool' },
    ],
    name: 'setSettlementStrategyEnabled',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketAsyncOrderConfigurationModuleAddress =
  '0x4E976A6D19743Ef83Aa1890282b69Ccd6AE8abde' as const

export const perpsMarketSpotMarketAsyncOrderConfigurationModuleConfig = {
  address: perpsMarketSpotMarketAsyncOrderConfigurationModuleAddress,
  abi: perpsMarketSpotMarketAsyncOrderConfigurationModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/AsyncOrderModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketAsyncOrderModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'expirationTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForCancellation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientSharesAmount',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'transactionType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
      },
    ],
    name: 'InvalidAsyncTransactionType',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidClaim',
  },
  {
    type: 'error',
    inputs: [
      { name: 'minimumAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidCommitmentAmount',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidMarket',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'settlementStrategyId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InvalidSettlementStrategy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
      { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OrderAlreadySettled',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OrderCancelled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'orderType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
        indexed: true,
      },
      {
        name: 'amountProvided',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OrderCommitted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'cancelOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'orderType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
      },
      { name: 'amountProvided', internalType: 'uint256', type: 'uint256' },
      {
        name: 'settlementStrategyId',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'minimumSettlementAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'commitOrder',
    outputs: [
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getAsyncOrderClaim',
    outputs: [
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
] as const

export const perpsMarketSpotMarketAsyncOrderModuleAddress =
  '0x3baAe54CC1C1D52ED68CE027d3da49B080C8e867' as const

export const perpsMarketSpotMarketAsyncOrderModuleConfig = {
  address: perpsMarketSpotMarketAsyncOrderModuleAddress,
  abi: perpsMarketSpotMarketAsyncOrderModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/AsyncOrderSettlementModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketAsyncOrderSettlementModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidClaim',
  },
  { type: 'error', inputs: [], name: 'InvalidVerificationResponse' },
  {
    type: 'error',
    inputs: [
      { name: 'minimum', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'MinimumSettlementAmountNotMet',
  },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'urls', internalType: 'string[]', type: 'string[]' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'callbackFunction', internalType: 'bytes4', type: 'bytes4' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'OffchainLookup',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
      { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OrderAlreadySettled',
  },
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'startTime', internalType: 'uint256', type: 'uint256' },
      { name: 'expirationTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OutsideSettlementWindow',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'deviation', internalType: 'uint256', type: 'uint256' },
      { name: 'tolerance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PriceDeviationToleranceExceeded',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'strategyType',
        internalType: 'enum SettlementStrategy.Type',
        type: 'uint8',
      },
    ],
    name: 'SettlementStrategyNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'finalOrderAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'settler',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OrderSettled',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PRECISION',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'settleOrder',
    outputs: [
      { name: 'finalOrderAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'result', internalType: 'bytes', type: 'bytes' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'settlePythOrder',
    outputs: [
      { name: 'finalOrderAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
] as const

export const perpsMarketSpotMarketAsyncOrderSettlementModuleAddress =
  '0x3C5834914e8132F27D6C14441EC9f45670665621' as const

export const perpsMarketSpotMarketAsyncOrderSettlementModuleConfig = {
  address: perpsMarketSpotMarketAsyncOrderSettlementModuleAddress,
  abi: perpsMarketSpotMarketAsyncOrderSettlementModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/AtomicOrderModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketAtomicOrderModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'maxSynthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'synthAmountCharged', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ExceedsMaxSynthAmount',
  },
  {
    type: 'error',
    inputs: [
      { name: 'maxUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ExceedsMaxUsdAmount',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'current', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAmountReceived',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidMarket',
  },
  { type: 'error', inputs: [], name: 'InvalidPrices' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'synthReturned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthBought',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountReturned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthSold',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buy',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buyExactIn',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buyExactOut',
    outputs: [
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteBuyExactIn',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteBuyExactOut',
    outputs: [
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteSellExactIn',
    outputs: [
      { name: 'returnAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteSellExactOut',
    outputs: [
      { name: 'synthToBurn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sell',
    outputs: [
      { name: 'usdAmountReceived', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sellExactIn',
    outputs: [
      { name: 'returnAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxSynthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sellExactOut',
    outputs: [
      { name: 'synthToBurn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
] as const

export const perpsMarketSpotMarketAtomicOrderModuleAddress =
  '0x056E8C8B0DB1E185972DD5cEA887207B9194594F' as const

export const perpsMarketSpotMarketAtomicOrderModuleConfig = {
  address: perpsMarketSpotMarketAtomicOrderModuleAddress,
  abi: perpsMarketSpotMarketAtomicOrderModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/CoreModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketCoreModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketCoreModuleAddress =
  '0xD8aAaD19E284C4481738d088A09A0f879dA8A3dF' as const

export const perpsMarketSpotMarketCoreModuleConfig = {
  address: perpsMarketSpotMarketCoreModuleAddress,
  abi: perpsMarketSpotMarketCoreModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/FeatureFlagModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketFeatureFlagModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketFeatureFlagModuleAddress =
  '0xD095c6fBd5Df38E37657a1B75bAC0Ec82D67A6Cb' as const

export const perpsMarketSpotMarketFeatureFlagModuleConfig = {
  address: perpsMarketSpotMarketFeatureFlagModuleAddress,
  abi: perpsMarketSpotMarketFeatureFlagModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/FeeCollectorMock
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketFeeCollectorMockABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'feeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'tradeType', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'quoteFees',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_usdToken',
        internalType: 'contract ITokenModule',
        type: 'address',
      },
    ],
    name: 'setUsdToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'usdToken',
    outputs: [
      { name: '', internalType: 'contract ITokenModule', type: 'address' },
    ],
  },
] as const

export const perpsMarketSpotMarketFeeCollectorMockAddress =
  '0x2710cCB2ce5F658099b0859fBf8d097DCDF30d62' as const

export const perpsMarketSpotMarketFeeCollectorMockConfig = {
  address: perpsMarketSpotMarketFeeCollectorMockAddress,
  abi: perpsMarketSpotMarketFeeCollectorMockABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/InitialSpotMarketProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketInitialSpotMarketProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketInitialSpotMarketProxyAddress =
  '0x989B0B56511de4CE09510b319ACE4808b803Efa1' as const

export const perpsMarketSpotMarketInitialSpotMarketProxyConfig = {
  address: perpsMarketSpotMarketInitialSpotMarketProxyAddress,
  abi: perpsMarketSpotMarketInitialSpotMarketProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/MarketConfigurationModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketMarketConfigurationModuleABI = [
  {
    type: 'error',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidCollateralLeverage',
  },
  {
    type: 'error',
    inputs: [
      { name: 'invalidFeeCollector', internalType: 'address', type: 'address' },
    ],
    name: 'InvalidFeeCollectorInterface',
  },
  { type: 'error', inputs: [], name: 'InvalidWrapperFees' },
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'asyncFixedFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AsyncFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'atomicFixedFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AtomicFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'collateralLeverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CollateralLeverageSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'feeCollector',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeeCollectorSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'skewScale',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSkewScaleSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'utilizationFeeRate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketUtilizationFeesSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'sharePercentage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ReferrerShareUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'transactor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'fixedFeeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransactorFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'wrapFee',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'unwrapFee',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'WrapperFeesSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getCollateralLeverage',
    outputs: [
      { name: 'collateralLeverage', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'transactor', internalType: 'address', type: 'address' },
    ],
    name: 'getCustomTransactorFees',
    outputs: [
      { name: 'fixedFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getFeeCollector',
    outputs: [
      { name: 'feeCollector', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'atomicFixedFee', internalType: 'uint256', type: 'uint256' },
      { name: 'asyncFixedFee', internalType: 'uint256', type: 'uint256' },
      { name: 'wrapFee', internalType: 'int256', type: 'int256' },
      { name: 'unwrapFee', internalType: 'int256', type: 'int256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketSkewScale',
    outputs: [{ name: 'skewScale', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketUtilizationFees',
    outputs: [
      { name: 'utilizationFeeRate', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'getReferrerShare',
    outputs: [
      { name: 'sharePercentage', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncFixedFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAsyncFixedFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'atomicFixedFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAtomicFixedFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralLeverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCollateralLeverage',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'transactor', internalType: 'address', type: 'address' },
      { name: 'fixedFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCustomTransactorFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'feeCollector', internalType: 'address', type: 'address' },
    ],
    name: 'setFeeCollector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'skewScale', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMarketSkewScale',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'utilizationFeeRate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMarketUtilizationFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapFee', internalType: 'int256', type: 'int256' },
      { name: 'unwrapFee', internalType: 'int256', type: 'int256' },
    ],
    name: 'setWrapperFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'referrer', internalType: 'address', type: 'address' },
      { name: 'sharePercentage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateReferrerShare',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketMarketConfigurationModuleAddress =
  '0x247F11B76c19C7cfD5998E19cD01a85F7547a0d0' as const

export const perpsMarketSpotMarketMarketConfigurationModuleConfig = {
  address: perpsMarketSpotMarketMarketConfigurationModuleAddress,
  abi: perpsMarketSpotMarketMarketConfigurationModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/OracleVerifierMock
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketOracleVerifierMockABI = [
  { type: 'error', inputs: [], name: 'InsufficientFee' },
  { type: 'error', inputs: [], name: 'InvalidArgument' },
  { type: 'error', inputs: [], name: 'InvalidGovernanceDataSource' },
  { type: 'error', inputs: [], name: 'InvalidGovernanceMessage' },
  { type: 'error', inputs: [], name: 'InvalidGovernanceTarget' },
  { type: 'error', inputs: [], name: 'InvalidUpdateData' },
  { type: 'error', inputs: [], name: 'InvalidUpdateDataSource' },
  { type: 'error', inputs: [], name: 'InvalidWormholeVaa' },
  { type: 'error', inputs: [], name: 'NoFreshUpdate' },
  { type: 'error', inputs: [], name: 'OldGovernanceMessage' },
  { type: 'error', inputs: [], name: 'PriceFeedNotFound' },
  { type: 'error', inputs: [], name: 'PriceFeedNotFoundWithinRange' },
  { type: 'error', inputs: [], name: 'StalePrice' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'updateDataSize', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getUpdateFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'updateData', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'priceIds', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'minPublishTime', internalType: 'uint64', type: 'uint64' },
      { name: 'maxPublishTime', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'parsePriceFeedUpdates',
    outputs: [
      {
        name: 'priceFeeds',
        internalType: 'struct IPythVerifier.PriceFeed[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'price',
            internalType: 'struct IPythVerifier.Price',
            type: 'tuple',
            components: [
              { name: 'price', internalType: 'int64', type: 'int64' },
              { name: 'conf', internalType: 'uint64', type: 'uint64' },
              { name: 'expo', internalType: 'int32', type: 'int32' },
              { name: 'publishTime', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'emaPrice',
            internalType: 'struct IPythVerifier.Price',
            type: 'tuple',
            components: [
              { name: 'price', internalType: 'int64', type: 'int64' },
              { name: 'conf', internalType: 'uint64', type: 'uint64' },
              { name: 'expo', internalType: 'int32', type: 'int32' },
              { name: 'publishTime', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'price',
    outputs: [{ name: '', internalType: 'int64', type: 'int64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newPrice', internalType: 'int64', type: 'int64' }],
    name: 'setPrice',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'chainlinkBlob', internalType: 'bytes', type: 'bytes' }],
    name: 'verify',
    outputs: [
      { name: 'verifierResponse', internalType: 'bytes', type: 'bytes' },
    ],
  },
] as const

export const perpsMarketSpotMarketOracleVerifierMockAddress =
  '0x204eC246f58d06878AbAD54542712C40F918a5E1' as const

export const perpsMarketSpotMarketOracleVerifierMockConfig = {
  address: perpsMarketSpotMarketOracleVerifierMockAddress,
  abi: perpsMarketSpotMarketOracleVerifierMockABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/SpotMarketFactoryModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSpotMarketFactoryModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  { type: 'error', inputs: [], name: 'InvalidMarketOwner' },
  {
    type: 'error',
    inputs: [
      { name: 'synthImplementation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidSynthImplementation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominee',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthImplementationUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'buyFeedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sellFeedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'SynthPriceDataUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SynthRegistered',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'acceptMarketOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'synthOwner', internalType: 'address', type: 'address' },
    ],
    name: 'createSynth',
    outputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketOwner',
    outputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getSynth',
    outputs: [
      { name: 'synthAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getSynthImpl',
    outputs: [
      { name: 'implAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'minimumCredit',
    outputs: [
      { name: 'lockedAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'name',
    outputs: [{ name: 'marketName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateMarketOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'renounceMarketNomination',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'reportedDebt',
    outputs: [
      { name: 'reportedDebtAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'rate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setDecayRate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'setSynthImplementation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'synthetix',
        internalType: 'contract ISynthetixSystem',
        type: 'address',
      },
    ],
    name: 'setSynthetix',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: 'isSupported', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'buyFeedId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sellFeedId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'updatePriceData',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'upgradeSynthImpl',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSpotMarketFactoryModuleAddress =
  '0xD323493108275A43cBa2426dd1A119E9B817299c' as const

export const perpsMarketSpotMarketSpotMarketFactoryModuleConfig = {
  address: perpsMarketSpotMarketSpotMarketFactoryModuleAddress,
  abi: perpsMarketSpotMarketSpotMarketFactoryModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/SpotMarketProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSpotMarketProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  { type: 'error', inputs: [], name: 'InvalidMarketOwner' },
  {
    type: 'error',
    inputs: [
      { name: 'synthImplementation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidSynthImplementation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominee',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthImplementationUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'buyFeedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sellFeedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'SynthPriceDataUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SynthRegistered',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'acceptMarketOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'synthOwner', internalType: 'address', type: 'address' },
    ],
    name: 'createSynth',
    outputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketOwner',
    outputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getSynth',
    outputs: [
      { name: 'synthAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getSynthImpl',
    outputs: [
      { name: 'implAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'minimumCredit',
    outputs: [
      { name: 'lockedAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'name',
    outputs: [{ name: 'marketName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateMarketOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'renounceMarketNomination',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'reportedDebt',
    outputs: [
      { name: 'reportedDebtAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'rate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setDecayRate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'setSynthImplementation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'synthetix',
        internalType: 'contract ISynthetixSystem',
        type: 'address',
      },
    ],
    name: 'setSynthetix',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: 'isSupported', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'buyFeedId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sellFeedId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'updatePriceData',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'upgradeSynthImpl',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'maxSynthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'synthAmountCharged', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ExceedsMaxSynthAmount',
  },
  {
    type: 'error',
    inputs: [
      { name: 'maxUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ExceedsMaxUsdAmount',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'current', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAmountReceived',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidMarket',
  },
  { type: 'error', inputs: [], name: 'InvalidPrices' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'synthReturned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthBought',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountReturned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthSold',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buy',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buyExactIn',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buyExactOut',
    outputs: [
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteBuyExactIn',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteBuyExactOut',
    outputs: [
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteSellExactIn',
    outputs: [
      { name: 'returnAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteSellExactOut',
    outputs: [
      { name: 'synthToBurn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sell',
    outputs: [
      { name: 'usdAmountReceived', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sellExactIn',
    outputs: [
      { name: 'returnAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxSynthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sellExactOut',
    outputs: [
      { name: 'synthToBurn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'expirationTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForCancellation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientSharesAmount',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'transactionType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
      },
    ],
    name: 'InvalidAsyncTransactionType',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidClaim',
  },
  {
    type: 'error',
    inputs: [
      { name: 'minimumAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidCommitmentAmount',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'settlementStrategyId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InvalidSettlementStrategy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
      { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OrderAlreadySettled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OrderCancelled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'orderType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
        indexed: true,
      },
      {
        name: 'amountProvided',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OrderCommitted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'cancelOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'orderType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
      },
      { name: 'amountProvided', internalType: 'uint256', type: 'uint256' },
      {
        name: 'settlementStrategyId',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'minimumSettlementAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'commitOrder',
    outputs: [
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getAsyncOrderClaim',
    outputs: [
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  { type: 'error', inputs: [], name: 'InvalidVerificationResponse' },
  {
    type: 'error',
    inputs: [
      { name: 'minimum', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'MinimumSettlementAmountNotMet',
  },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'urls', internalType: 'string[]', type: 'string[]' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'callbackFunction', internalType: 'bytes4', type: 'bytes4' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'OffchainLookup',
  },
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'startTime', internalType: 'uint256', type: 'uint256' },
      { name: 'expirationTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OutsideSettlementWindow',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'deviation', internalType: 'uint256', type: 'uint256' },
      { name: 'tolerance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PriceDeviationToleranceExceeded',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'strategyType',
        internalType: 'enum SettlementStrategy.Type',
        type: 'uint8',
      },
    ],
    name: 'SettlementStrategyNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'finalOrderAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'settler',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OrderSettled',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PRECISION',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'settleOrder',
    outputs: [
      { name: 'finalOrderAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'result', internalType: 'bytes', type: 'bytes' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'settlePythOrder',
    outputs: [
      { name: 'finalOrderAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'strategyId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SettlementStrategyAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'strategyId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'enabled', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'SettlementStrategyUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'strategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'minimumUsdExchangeAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxRoundingLoss', internalType: 'uint256', type: 'uint256' },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'addSettlementStrategy',
    outputs: [{ name: 'strategyId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'strategyId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSettlementStrategy',
    outputs: [
      {
        name: 'settlementStrategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'minimumUsdExchangeAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxRoundingLoss', internalType: 'uint256', type: 'uint256' },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'strategyId', internalType: 'uint256', type: 'uint256' },
      { name: 'enabled', internalType: 'bool', type: 'bool' },
    ],
    name: 'setSettlementStrategyEnabled',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralType' },
  {
    type: 'error',
    inputs: [
      { name: 'maxWrappableAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'currentSupply', internalType: 'uint256', type: 'uint256' },
      { name: 'amountToWrap', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'WrapperExceedsMaxAmount',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountUnwrapped',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'feesCollected',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SynthUnwrapped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountWrapped',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'feesCollected',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SynthWrapped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'wrapCollateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'maxWrappableAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WrapperSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapCollateralType', internalType: 'address', type: 'address' },
      { name: 'maxWrappableAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setWrapper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'unwrapAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unwrap',
    outputs: [
      {
        name: 'returnCollateralAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'wrap',
    outputs: [
      { name: 'amountToMint', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidCollateralLeverage',
  },
  {
    type: 'error',
    inputs: [
      { name: 'invalidFeeCollector', internalType: 'address', type: 'address' },
    ],
    name: 'InvalidFeeCollectorInterface',
  },
  { type: 'error', inputs: [], name: 'InvalidWrapperFees' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'asyncFixedFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AsyncFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'atomicFixedFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AtomicFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'collateralLeverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CollateralLeverageSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'feeCollector',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeeCollectorSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'skewScale',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSkewScaleSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'utilizationFeeRate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketUtilizationFeesSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'sharePercentage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ReferrerShareUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'transactor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'fixedFeeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransactorFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'wrapFee',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'unwrapFee',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'WrapperFeesSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getCollateralLeverage',
    outputs: [
      { name: 'collateralLeverage', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'transactor', internalType: 'address', type: 'address' },
    ],
    name: 'getCustomTransactorFees',
    outputs: [
      { name: 'fixedFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getFeeCollector',
    outputs: [
      { name: 'feeCollector', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'atomicFixedFee', internalType: 'uint256', type: 'uint256' },
      { name: 'asyncFixedFee', internalType: 'uint256', type: 'uint256' },
      { name: 'wrapFee', internalType: 'int256', type: 'int256' },
      { name: 'unwrapFee', internalType: 'int256', type: 'int256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketSkewScale',
    outputs: [{ name: 'skewScale', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketUtilizationFees',
    outputs: [
      { name: 'utilizationFeeRate', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'getReferrerShare',
    outputs: [
      { name: 'sharePercentage', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncFixedFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAsyncFixedFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'atomicFixedFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAtomicFixedFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralLeverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCollateralLeverage',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'transactor', internalType: 'address', type: 'address' },
      { name: 'fixedFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCustomTransactorFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'feeCollector', internalType: 'address', type: 'address' },
    ],
    name: 'setFeeCollector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'skewScale', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMarketSkewScale',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'utilizationFeeRate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMarketUtilizationFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapFee', internalType: 'int256', type: 'int256' },
      { name: 'unwrapFee', internalType: 'int256', type: 'int256' },
    ],
    name: 'setWrapperFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'referrer', internalType: 'address', type: 'address' },
      { name: 'sharePercentage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateReferrerShare',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSpotMarketProxyAddress =
  '0x989B0B56511de4CE09510b319ACE4808b803Efa1' as const

export const perpsMarketSpotMarketSpotMarketProxyConfig = {
  address: perpsMarketSpotMarketSpotMarketProxyAddress,
  abi: perpsMarketSpotMarketSpotMarketProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/SpotMarketRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSpotMarketRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  { type: 'error', inputs: [], name: 'InvalidMarketOwner' },
  {
    type: 'error',
    inputs: [
      { name: 'synthImplementation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidSynthImplementation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominee',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthImplementationUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'buyFeedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sellFeedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'SynthPriceDataUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SynthRegistered',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'acceptMarketOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'synthOwner', internalType: 'address', type: 'address' },
    ],
    name: 'createSynth',
    outputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketOwner',
    outputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getSynth',
    outputs: [
      { name: 'synthAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getSynthImpl',
    outputs: [
      { name: 'implAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'minimumCredit',
    outputs: [
      { name: 'lockedAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'name',
    outputs: [{ name: 'marketName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateMarketOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'renounceMarketNomination',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'reportedDebt',
    outputs: [
      { name: 'reportedDebtAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'rate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setDecayRate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'setSynthImplementation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'synthetix',
        internalType: 'contract ISynthetixSystem',
        type: 'address',
      },
    ],
    name: 'setSynthetix',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: 'isSupported', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'buyFeedId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sellFeedId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'updatePriceData',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'upgradeSynthImpl',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'maxSynthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'synthAmountCharged', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ExceedsMaxSynthAmount',
  },
  {
    type: 'error',
    inputs: [
      { name: 'maxUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ExceedsMaxUsdAmount',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'current', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAmountReceived',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidMarket',
  },
  { type: 'error', inputs: [], name: 'InvalidPrices' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'synthReturned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthBought',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountReturned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthSold',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buy',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buyExactIn',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buyExactOut',
    outputs: [
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteBuyExactIn',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteBuyExactOut',
    outputs: [
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteSellExactIn',
    outputs: [
      { name: 'returnAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteSellExactOut',
    outputs: [
      { name: 'synthToBurn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sell',
    outputs: [
      { name: 'usdAmountReceived', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sellExactIn',
    outputs: [
      { name: 'returnAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxSynthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sellExactOut',
    outputs: [
      { name: 'synthToBurn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'expirationTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForCancellation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientSharesAmount',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'transactionType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
      },
    ],
    name: 'InvalidAsyncTransactionType',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidClaim',
  },
  {
    type: 'error',
    inputs: [
      { name: 'minimumAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidCommitmentAmount',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'settlementStrategyId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InvalidSettlementStrategy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
      { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OrderAlreadySettled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OrderCancelled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'orderType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
        indexed: true,
      },
      {
        name: 'amountProvided',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OrderCommitted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'cancelOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'orderType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
      },
      { name: 'amountProvided', internalType: 'uint256', type: 'uint256' },
      {
        name: 'settlementStrategyId',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'minimumSettlementAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'commitOrder',
    outputs: [
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getAsyncOrderClaim',
    outputs: [
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  { type: 'error', inputs: [], name: 'InvalidVerificationResponse' },
  {
    type: 'error',
    inputs: [
      { name: 'minimum', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'MinimumSettlementAmountNotMet',
  },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'urls', internalType: 'string[]', type: 'string[]' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'callbackFunction', internalType: 'bytes4', type: 'bytes4' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'OffchainLookup',
  },
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'startTime', internalType: 'uint256', type: 'uint256' },
      { name: 'expirationTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OutsideSettlementWindow',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'deviation', internalType: 'uint256', type: 'uint256' },
      { name: 'tolerance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PriceDeviationToleranceExceeded',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'strategyType',
        internalType: 'enum SettlementStrategy.Type',
        type: 'uint8',
      },
    ],
    name: 'SettlementStrategyNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'finalOrderAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'settler',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OrderSettled',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PRECISION',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'settleOrder',
    outputs: [
      { name: 'finalOrderAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'result', internalType: 'bytes', type: 'bytes' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'settlePythOrder',
    outputs: [
      { name: 'finalOrderAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'strategyId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SettlementStrategyAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'strategyId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'enabled', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'SettlementStrategyUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'strategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'minimumUsdExchangeAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxRoundingLoss', internalType: 'uint256', type: 'uint256' },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'addSettlementStrategy',
    outputs: [{ name: 'strategyId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'strategyId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSettlementStrategy',
    outputs: [
      {
        name: 'settlementStrategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'minimumUsdExchangeAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxRoundingLoss', internalType: 'uint256', type: 'uint256' },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'strategyId', internalType: 'uint256', type: 'uint256' },
      { name: 'enabled', internalType: 'bool', type: 'bool' },
    ],
    name: 'setSettlementStrategyEnabled',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralType' },
  {
    type: 'error',
    inputs: [
      { name: 'maxWrappableAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'currentSupply', internalType: 'uint256', type: 'uint256' },
      { name: 'amountToWrap', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'WrapperExceedsMaxAmount',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountUnwrapped',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'feesCollected',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SynthUnwrapped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountWrapped',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'feesCollected',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SynthWrapped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'wrapCollateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'maxWrappableAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WrapperSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapCollateralType', internalType: 'address', type: 'address' },
      { name: 'maxWrappableAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setWrapper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'unwrapAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unwrap',
    outputs: [
      {
        name: 'returnCollateralAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'wrap',
    outputs: [
      { name: 'amountToMint', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidCollateralLeverage',
  },
  {
    type: 'error',
    inputs: [
      { name: 'invalidFeeCollector', internalType: 'address', type: 'address' },
    ],
    name: 'InvalidFeeCollectorInterface',
  },
  { type: 'error', inputs: [], name: 'InvalidWrapperFees' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'asyncFixedFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AsyncFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'atomicFixedFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AtomicFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'collateralLeverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CollateralLeverageSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'feeCollector',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeeCollectorSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'skewScale',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSkewScaleSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'utilizationFeeRate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketUtilizationFeesSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'sharePercentage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ReferrerShareUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'transactor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'fixedFeeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransactorFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'wrapFee',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'unwrapFee',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'WrapperFeesSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getCollateralLeverage',
    outputs: [
      { name: 'collateralLeverage', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'transactor', internalType: 'address', type: 'address' },
    ],
    name: 'getCustomTransactorFees',
    outputs: [
      { name: 'fixedFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getFeeCollector',
    outputs: [
      { name: 'feeCollector', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'atomicFixedFee', internalType: 'uint256', type: 'uint256' },
      { name: 'asyncFixedFee', internalType: 'uint256', type: 'uint256' },
      { name: 'wrapFee', internalType: 'int256', type: 'int256' },
      { name: 'unwrapFee', internalType: 'int256', type: 'int256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketSkewScale',
    outputs: [{ name: 'skewScale', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketUtilizationFees',
    outputs: [
      { name: 'utilizationFeeRate', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'getReferrerShare',
    outputs: [
      { name: 'sharePercentage', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncFixedFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAsyncFixedFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'atomicFixedFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAtomicFixedFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralLeverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCollateralLeverage',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'transactor', internalType: 'address', type: 'address' },
      { name: 'fixedFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCustomTransactorFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'feeCollector', internalType: 'address', type: 'address' },
    ],
    name: 'setFeeCollector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'skewScale', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMarketSkewScale',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'utilizationFeeRate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMarketUtilizationFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapFee', internalType: 'int256', type: 'int256' },
      { name: 'unwrapFee', internalType: 'int256', type: 'int256' },
    ],
    name: 'setWrapperFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'referrer', internalType: 'address', type: 'address' },
      { name: 'sharePercentage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateReferrerShare',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSpotMarketRouterAddress =
  '0x0c92146fF95429d174C37B6c1D8Ec6f724768FE2' as const

export const perpsMarketSpotMarketSpotMarketRouterConfig = {
  address: perpsMarketSpotMarketSpotMarketRouterAddress,
  abi: perpsMarketSpotMarketSpotMarketRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/SynthRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  { type: 'error', inputs: [], name: 'InvalidDecayRate' },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'advanceEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decayRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_rate', internalType: 'uint256', type: 'uint256' }],
    name: 'setDecayRate',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: 'supply', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const perpsMarketSpotMarketSynthRouterAddress =
  '0xfc75ea9Dd5e3cB423A4aBF8Ea36F167fF7d1e8e3' as const

export const perpsMarketSpotMarketSynthRouterConfig = {
  address: perpsMarketSpotMarketSynthRouterAddress,
  abi: perpsMarketSpotMarketSynthRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/SynthTokenModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthTokenModuleABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  { type: 'error', inputs: [], name: 'InvalidDecayRate' },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'advanceEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decayRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_rate', internalType: 'uint256', type: 'uint256' }],
    name: 'setDecayRate',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: 'supply', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const perpsMarketSpotMarketSynthTokenModuleAddress =
  '0x38ADA250C264A1472cF232f415DD87623Be9fF16' as const

export const perpsMarketSpotMarketSynthTokenModuleConfig = {
  address: perpsMarketSpotMarketSynthTokenModuleAddress,
  abi: perpsMarketSpotMarketSynthTokenModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/WrapperModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketWrapperModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'current', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAmountReceived',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralType' },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidMarket',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  {
    type: 'error',
    inputs: [
      { name: 'maxWrappableAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'currentSupply', internalType: 'uint256', type: 'uint256' },
      { name: 'amountToWrap', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'WrapperExceedsMaxAmount',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountUnwrapped',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'feesCollected',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SynthUnwrapped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountWrapped',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'feesCollected',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SynthWrapped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'wrapCollateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'maxWrappableAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WrapperSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapCollateralType', internalType: 'address', type: 'address' },
      { name: 'maxWrappableAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setWrapper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'unwrapAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unwrap',
    outputs: [
      {
        name: 'returnCollateralAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'wrap',
    outputs: [
      { name: 'amountToMint', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
] as const

export const perpsMarketSpotMarketWrapperModuleAddress =
  '0x70E006fC659BE0DaC73175d475C1660DD308b89F' as const

export const perpsMarketSpotMarketWrapperModuleConfig = {
  address: perpsMarketSpotMarketWrapperModuleAddress,
  abi: perpsMarketSpotMarketWrapperModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/AccountModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixAccountModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSynthetixAccountModuleAddress =
  '0x979B8a61B877fC74f84648d0dCdeb42391ddCE3b' as const

export const perpsMarketSpotMarketSynthetixAccountModuleConfig = {
  address: perpsMarketSpotMarketSynthetixAccountModuleAddress,
  abi: perpsMarketSpotMarketSynthetixAccountModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/AccountProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixAccountProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'CannotSelfApprove',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IndexOverrun',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidTransferRecipient',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenAlreadyMinted',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenDoesNotExist',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
    name: 'setBaseTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSynthetixAccountProxyAddress =
  '0xE06fE85b65E0110f78638022FA9AD58c6b6c69bF' as const

export const perpsMarketSpotMarketSynthetixAccountProxyConfig = {
  address: perpsMarketSpotMarketSynthetixAccountProxyAddress,
  abi: perpsMarketSpotMarketSynthetixAccountProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/AccountRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixAccountRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'CannotSelfApprove',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IndexOverrun',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidTransferRecipient',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenAlreadyMinted',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenDoesNotExist',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
    name: 'setBaseTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSynthetixAccountRouterAddress =
  '0x6EbD720D47b0E1754CFe423e93730597D86aC26C' as const

export const perpsMarketSpotMarketSynthetixAccountRouterConfig = {
  address: perpsMarketSpotMarketSynthetixAccountRouterAddress,
  abi: perpsMarketSpotMarketSynthetixAccountRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/AccountTokenModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixAccountTokenModuleABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'CannotSelfApprove',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IndexOverrun',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidTransferRecipient',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenAlreadyMinted',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenDoesNotExist',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
    name: 'setBaseTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSynthetixAccountTokenModuleAddress =
  '0x790F6939f3Cb0b76A1465A340aEF9347d92ceEA0' as const

export const perpsMarketSpotMarketSynthetixAccountTokenModuleConfig = {
  address: perpsMarketSpotMarketSynthetixAccountTokenModuleAddress,
  abi: perpsMarketSpotMarketSynthetixAccountTokenModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/AssociateDebtModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixAssociateDebtModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint256', type: 'uint256' },
      { name: 'poolId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotFundedByPool',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'updatedDebt',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'DebtAssociated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'associateDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const perpsMarketSpotMarketSynthetixAssociateDebtModuleAddress =
  '0xbe7a510c72aE8c23560Ac7ada5d8765F9492BadA' as const

export const perpsMarketSpotMarketSynthetixAssociateDebtModuleConfig = {
  address: perpsMarketSpotMarketSynthetixAssociateDebtModuleAddress,
  abi: perpsMarketSpotMarketSynthetixAssociateDebtModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/AssociatedSystemsModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixAssociatedSystemsModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSynthetixAssociatedSystemsModuleAddress =
  '0xf8d85923ef87fb6e6f3875805beE59E02C596076' as const

export const perpsMarketSpotMarketSynthetixAssociatedSystemsModuleConfig = {
  address: perpsMarketSpotMarketSynthetixAssociatedSystemsModuleAddress,
  abi: perpsMarketSpotMarketSynthetixAssociatedSystemsModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/CollateralConfigurationModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixCollateralConfigurationModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
    ],
    name: 'CollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'configureCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hideDisabled', internalType: 'bool', type: 'bool' }],
    name: 'getCollateralConfigurations',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

export const perpsMarketSpotMarketSynthetixCollateralConfigurationModuleAddress =
  '0x9541aA2A6b9E4874205BfB8a348F287049FE5d0A' as const

export const perpsMarketSpotMarketSynthetixCollateralConfigurationModuleConfig =
  {
    address: perpsMarketSpotMarketSynthetixCollateralConfigurationModuleAddress,
    abi: perpsMarketSpotMarketSynthetixCollateralConfigurationModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/CollateralMock
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixCollateralMockABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const perpsMarketSpotMarketSynthetixCollateralMockAddress =
  '0x152E3B07d82538FaE3A588E0F04d176c2Ec08fA1' as const

export const perpsMarketSpotMarketSynthetixCollateralMockConfig = {
  address: perpsMarketSpotMarketSynthetixCollateralMockAddress,
  abi: perpsMarketSpotMarketSynthetixCollateralMockABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/CollateralModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixCollateralModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'currentTime', internalType: 'uint256', type: 'uint256' },
      { name: 'requiredTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'AccountActivityTimeoutPending',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockExpired',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cleanExpiredLocks',
    outputs: [{ name: 'cleared', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'expireTimestamp', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'createLock',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountAvailableCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountCollateral',
    outputs: [
      { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
      { name: 'totalAssigned', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLocked', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getLocks',
    outputs: [
      {
        name: 'locks',
        internalType: 'struct CollateralLock.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'amountD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'lockExpirationTime',
            internalType: 'uint64',
            type: 'uint64',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSynthetixCollateralModuleAddress =
  '0x658731A2CCf51FE5c92eD51A72A32F33702Bc526' as const

export const perpsMarketSpotMarketSynthetixCollateralModuleConfig = {
  address: perpsMarketSpotMarketSynthetixCollateralModuleAddress,
  abi: perpsMarketSpotMarketSynthetixCollateralModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/CoreProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixCoreProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint256', type: 'uint256' },
      { name: 'poolId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotFundedByPool',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'updatedDebt',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'DebtAssociated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'associateDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'currentTime', internalType: 'uint256', type: 'uint256' },
      { name: 'requiredTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'AccountActivityTimeoutPending',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockExpired',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cleanExpiredLocks',
    outputs: [{ name: 'cleared', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'expireTimestamp', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'createLock',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountAvailableCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountCollateral',
    outputs: [
      { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
      { name: 'totalAssigned', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLocked', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getLocks',
    outputs: [
      {
        name: 'locks',
        internalType: 'struct CollateralLock.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'amountD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'lockExpirationTime',
            internalType: 'uint64',
            type: 'uint64',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
    ],
    name: 'CollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'configureCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hideDisabled', internalType: 'bool', type: 'bool' }],
    name: 'getCollateralConfigurations',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    type: 'error',
    inputs: [{ name: 'currentDebt', internalType: 'int256', type: 'int256' }],
    name: 'InsufficientDebt',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IssuanceFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdBurned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdMinted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnUsd',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintUsd',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      { name: 'currentCRatio', internalType: 'uint256', type: 'uint256' },
      { name: 'cratio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForLiquidation',
  },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  { type: 'error', inputs: [], name: 'MustBeVaultLiquidated' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Liquidation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'VaultLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isPositionLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isVaultLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
    ],
    name: 'liquidate',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
      { name: 'maxUsd', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'liquidateVault',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToDeposit',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralDepositable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToWithdraw',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralWithdrawable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'systemAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MaximumMarketCollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'configureMaximumMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMarketCollateralAmount',
    outputs: [
      { name: 'collateralAmountD18', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMaximumMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketCollateral',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'IncorrectMarketInterface',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughLiquidity',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSystemFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMarketMinLiquidityRatio',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minDelegateTime',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
    ],
    name: 'SetMinDelegateTime',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'depositFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketMinDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketNetIssuance',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketTotalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOracleManager',
    outputs: [
      { name: '', internalType: 'contract IOracleManager', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUsdToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getWithdrawableMarketUsd',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'isMarketCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'registerMarket',
    outputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minDelegateTime', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'setMarketMinDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PreferredPoolSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'addApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getApprovedPools',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPreferredPool',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'removeApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'setPreferredPool',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolAlreadyExists',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'markets',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolConfigurationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNameUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnershipAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinLiquidityRatio',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'acceptPoolOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedPoolId', internalType: 'uint128', type: 'uint128' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'createPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getNominatedPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolName',
    outputs: [{ name: 'poolName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nominatedOwner', internalType: 'address', type: 'address' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'nominatePoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'renouncePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'revokePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newMarketConfigurations',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
    name: 'setPoolConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'name', internalType: 'string', type: 'string' },
    ],
    name: 'setPoolName',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    type: 'error',
    inputs: [{ name: 'distributor', internalType: 'address', type: 'address' }],
    name: 'RewardUnavailable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'start',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'duration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsDistributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRemoved',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'claimRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'start', internalType: 'uint64', type: 'uint64' },
      { name: 'duration', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'distributeRewards',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'getRewardRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'registerRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'removeRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'oracleManagerAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'configureOracleManager',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'k', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getConfig',
    outputs: [{ name: 'v', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ccipSend', internalType: 'address', type: 'address' },
      { name: 'ccipReceive', internalType: 'address', type: 'address' },
      { name: 'ccipTokenPool', internalType: 'address', type: 'address' },
    ],
    name: 'registerCcip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'k', internalType: 'bytes32', type: 'bytes32' },
      { name: 'v', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setConfig',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientDelegation',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralAmount' },
  {
    type: 'error',
    inputs: [{ name: 'leverage', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidLeverage',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'leverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'newCollateralAmountD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPosition',
    outputs: [
      { name: 'collateralAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      {
        name: 'collateralizationRatio',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const perpsMarketSpotMarketSynthetixCoreProxyAddress =
  '0x381aeF01aB853657163ccbBFC1A993D49a77307c' as const

export const perpsMarketSpotMarketSynthetixCoreProxyConfig = {
  address: perpsMarketSpotMarketSynthetixCoreProxyAddress,
  abi: perpsMarketSpotMarketSynthetixCoreProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/CoreRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixCoreRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint256', type: 'uint256' },
      { name: 'poolId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotFundedByPool',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'updatedDebt',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'DebtAssociated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'associateDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'currentTime', internalType: 'uint256', type: 'uint256' },
      { name: 'requiredTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'AccountActivityTimeoutPending',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockExpired',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cleanExpiredLocks',
    outputs: [{ name: 'cleared', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'expireTimestamp', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'createLock',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountAvailableCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountCollateral',
    outputs: [
      { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
      { name: 'totalAssigned', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLocked', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getLocks',
    outputs: [
      {
        name: 'locks',
        internalType: 'struct CollateralLock.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'amountD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'lockExpirationTime',
            internalType: 'uint64',
            type: 'uint64',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
    ],
    name: 'CollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'configureCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hideDisabled', internalType: 'bool', type: 'bool' }],
    name: 'getCollateralConfigurations',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    type: 'error',
    inputs: [{ name: 'currentDebt', internalType: 'int256', type: 'int256' }],
    name: 'InsufficientDebt',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IssuanceFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdBurned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdMinted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnUsd',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintUsd',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      { name: 'currentCRatio', internalType: 'uint256', type: 'uint256' },
      { name: 'cratio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForLiquidation',
  },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  { type: 'error', inputs: [], name: 'MustBeVaultLiquidated' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Liquidation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'VaultLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isPositionLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isVaultLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
    ],
    name: 'liquidate',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
      { name: 'maxUsd', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'liquidateVault',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToDeposit',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralDepositable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToWithdraw',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralWithdrawable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'systemAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MaximumMarketCollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'configureMaximumMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMarketCollateralAmount',
    outputs: [
      { name: 'collateralAmountD18', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMaximumMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketCollateral',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'IncorrectMarketInterface',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughLiquidity',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSystemFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMarketMinLiquidityRatio',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minDelegateTime',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
    ],
    name: 'SetMinDelegateTime',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'depositFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketMinDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketNetIssuance',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketTotalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOracleManager',
    outputs: [
      { name: '', internalType: 'contract IOracleManager', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUsdToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getWithdrawableMarketUsd',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'isMarketCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'registerMarket',
    outputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minDelegateTime', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'setMarketMinDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PreferredPoolSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'addApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getApprovedPools',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPreferredPool',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'removeApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'setPreferredPool',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolAlreadyExists',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'markets',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolConfigurationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNameUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnershipAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinLiquidityRatio',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'acceptPoolOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedPoolId', internalType: 'uint128', type: 'uint128' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'createPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getNominatedPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolName',
    outputs: [{ name: 'poolName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nominatedOwner', internalType: 'address', type: 'address' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'nominatePoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'renouncePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'revokePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newMarketConfigurations',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
    name: 'setPoolConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'name', internalType: 'string', type: 'string' },
    ],
    name: 'setPoolName',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    type: 'error',
    inputs: [{ name: 'distributor', internalType: 'address', type: 'address' }],
    name: 'RewardUnavailable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'start',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'duration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsDistributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRemoved',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'claimRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'start', internalType: 'uint64', type: 'uint64' },
      { name: 'duration', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'distributeRewards',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'getRewardRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'registerRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'removeRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'oracleManagerAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'configureOracleManager',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'k', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getConfig',
    outputs: [{ name: 'v', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ccipSend', internalType: 'address', type: 'address' },
      { name: 'ccipReceive', internalType: 'address', type: 'address' },
      { name: 'ccipTokenPool', internalType: 'address', type: 'address' },
    ],
    name: 'registerCcip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'k', internalType: 'bytes32', type: 'bytes32' },
      { name: 'v', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setConfig',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientDelegation',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralAmount' },
  {
    type: 'error',
    inputs: [{ name: 'leverage', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidLeverage',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'leverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'newCollateralAmountD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPosition',
    outputs: [
      { name: 'collateralAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      {
        name: 'collateralizationRatio',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const perpsMarketSpotMarketSynthetixCoreRouterAddress =
  '0x91752B65232fD32f9982273974c6aE0789e95697' as const

export const perpsMarketSpotMarketSynthetixCoreRouterConfig = {
  address: perpsMarketSpotMarketSynthetixCoreRouterAddress,
  abi: perpsMarketSpotMarketSynthetixCoreRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/FeatureFlagModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixFeatureFlagModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSynthetixFeatureFlagModuleAddress =
  '0x002AB3794418cCbFE9bBAad708C3Fa30B94e0e0F' as const

export const perpsMarketSpotMarketSynthetixFeatureFlagModuleConfig = {
  address: perpsMarketSpotMarketSynthetixFeatureFlagModuleAddress,
  abi: perpsMarketSpotMarketSynthetixFeatureFlagModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/InitialCoreProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixInitialCoreProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSynthetixInitialCoreProxyAddress =
  '0x381aeF01aB853657163ccbBFC1A993D49a77307c' as const

export const perpsMarketSpotMarketSynthetixInitialCoreProxyConfig = {
  address: perpsMarketSpotMarketSynthetixInitialCoreProxyAddress,
  abi: perpsMarketSpotMarketSynthetixInitialCoreProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/InitialModuleBundle
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixInitialModuleBundleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSynthetixInitialModuleBundleAddress =
  '0x2F4a58770bDaBFef1f3Cee0eF6Ad05Db4F4d954E' as const

export const perpsMarketSpotMarketSynthetixInitialModuleBundleConfig = {
  address: perpsMarketSpotMarketSynthetixInitialModuleBundleAddress,
  abi: perpsMarketSpotMarketSynthetixInitialModuleBundleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/IssueUSDModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixIssueUsdModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'currentDebt', internalType: 'int256', type: 'int256' }],
    name: 'InsufficientDebt',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IssuanceFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdBurned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdMinted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnUsd',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintUsd',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSynthetixIssueUsdModuleAddress =
  '0x1CD17c0acF7f48f3D6416b542E8f623b47e013ab' as const

export const perpsMarketSpotMarketSynthetixIssueUsdModuleConfig = {
  address: perpsMarketSpotMarketSynthetixIssueUsdModuleAddress,
  abi: perpsMarketSpotMarketSynthetixIssueUsdModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/LiquidationModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixLiquidationModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      { name: 'currentCRatio', internalType: 'uint256', type: 'uint256' },
      { name: 'cratio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForLiquidation',
  },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  { type: 'error', inputs: [], name: 'MustBeVaultLiquidated' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Liquidation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'VaultLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isPositionLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isVaultLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
    ],
    name: 'liquidate',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
      { name: 'maxUsd', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'liquidateVault',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
] as const

export const perpsMarketSpotMarketSynthetixLiquidationModuleAddress =
  '0x2cBB85cC49F73d87CACdeEA408ea196176Be60C9' as const

export const perpsMarketSpotMarketSynthetixLiquidationModuleConfig = {
  address: perpsMarketSpotMarketSynthetixLiquidationModuleAddress,
  abi: perpsMarketSpotMarketSynthetixLiquidationModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/MarketCollateralModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixMarketCollateralModuleABI = [
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToDeposit',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralDepositable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToWithdraw',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralWithdrawable',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'systemAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MaximumMarketCollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'configureMaximumMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMarketCollateralAmount',
    outputs: [
      { name: 'collateralAmountD18', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMaximumMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketCollateral',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSynthetixMarketCollateralModuleAddress =
  '0xa61825604f9Bb29E8A9dF85b4bDb663B358D6638' as const

export const perpsMarketSpotMarketSynthetixMarketCollateralModuleConfig = {
  address: perpsMarketSpotMarketSynthetixMarketCollateralModuleAddress,
  abi: perpsMarketSpotMarketSynthetixMarketCollateralModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/MarketManagerModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixMarketManagerModuleABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'IncorrectMarketInterface',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughLiquidity',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSystemFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMarketMinLiquidityRatio',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minDelegateTime',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
    ],
    name: 'SetMinDelegateTime',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'depositFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketMinDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketNetIssuance',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketTotalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOracleManager',
    outputs: [
      { name: '', internalType: 'contract IOracleManager', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUsdToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getWithdrawableMarketUsd',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'isMarketCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'registerMarket',
    outputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minDelegateTime', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'setMarketMinDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
] as const

export const perpsMarketSpotMarketSynthetixMarketManagerModuleAddress =
  '0x0137ecb811330763277daE159B6Cf9306645c18f' as const

export const perpsMarketSpotMarketSynthetixMarketManagerModuleConfig = {
  address: perpsMarketSpotMarketSynthetixMarketManagerModuleAddress,
  abi: perpsMarketSpotMarketSynthetixMarketManagerModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/MulticallModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixMulticallModuleABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
] as const

export const perpsMarketSpotMarketSynthetixMulticallModuleAddress =
  '0xb61926f01cAD38f51236F861dABcC59626F2078d' as const

export const perpsMarketSpotMarketSynthetixMulticallModuleConfig = {
  address: perpsMarketSpotMarketSynthetixMulticallModuleAddress,
  abi: perpsMarketSpotMarketSynthetixMulticallModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/PoolConfigurationModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixPoolConfigurationModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PreferredPoolSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'addApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getApprovedPools',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPreferredPool',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'removeApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'setPreferredPool',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSynthetixPoolConfigurationModuleAddress =
  '0x58fEF24F50d5658F7269aE804cF50dD1890992f6' as const

export const perpsMarketSpotMarketSynthetixPoolConfigurationModuleConfig = {
  address: perpsMarketSpotMarketSynthetixPoolConfigurationModuleAddress,
  abi: perpsMarketSpotMarketSynthetixPoolConfigurationModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/PoolModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixPoolModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolAlreadyExists',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'markets',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolConfigurationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNameUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnershipAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinLiquidityRatio',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'acceptPoolOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedPoolId', internalType: 'uint128', type: 'uint128' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'createPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getNominatedPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolName',
    outputs: [{ name: 'poolName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nominatedOwner', internalType: 'address', type: 'address' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'nominatePoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'renouncePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'revokePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newMarketConfigurations',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
    name: 'setPoolConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'name', internalType: 'string', type: 'string' },
    ],
    name: 'setPoolName',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSynthetixPoolModuleAddress =
  '0xd14aA7Ac9f07c98F3C2984e3cFCC1Bcc5B766701' as const

export const perpsMarketSpotMarketSynthetixPoolModuleConfig = {
  address: perpsMarketSpotMarketSynthetixPoolModuleAddress,
  abi: perpsMarketSpotMarketSynthetixPoolModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/RewardsManagerModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixRewardsManagerModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    type: 'error',
    inputs: [{ name: 'distributor', internalType: 'address', type: 'address' }],
    name: 'RewardUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'start',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'duration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsDistributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRemoved',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'claimRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'start', internalType: 'uint64', type: 'uint64' },
      { name: 'duration', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'distributeRewards',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'getRewardRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'registerRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'removeRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
] as const

export const perpsMarketSpotMarketSynthetixRewardsManagerModuleAddress =
  '0x6E842803c349F55447F370d516f38461f45A6ed2' as const

export const perpsMarketSpotMarketSynthetixRewardsManagerModuleConfig = {
  address: perpsMarketSpotMarketSynthetixRewardsManagerModuleAddress,
  abi: perpsMarketSpotMarketSynthetixRewardsManagerModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/TestableAccountRBACStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixTestableAccountRbacStorageABI = [
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'AccountRBAC_authorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'AccountRBAC_get_owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'AccountRBAC_grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'AccountRBAC_hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'AccountRBAC_isPermissionValid',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'AccountRBAC_revokeAllPermissions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'AccountRBAC_revokePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'AccountRBAC_setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'address', type: 'address' }],
    name: 'AccountRBAC_set_owner',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSynthetixTestableAccountRbacStorageAddress =
  '0x15979A635FF16F303261AC1392f7d000614458Cf' as const

export const perpsMarketSpotMarketSynthetixTestableAccountRbacStorageConfig = {
  address: perpsMarketSpotMarketSynthetixTestableAccountRbacStorageAddress,
  abi: perpsMarketSpotMarketSynthetixTestableAccountRbacStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/TestableAccountStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixTestableAccountStorageABI = [
  {
    type: 'error',
    inputs: [
      { name: 'requestedAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAccountCollateral',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Account_getAssignedCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Account_getCollateralTotals',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Account_get___slot2AvailableForFutureUse',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Account_get___slotAvailableForFutureUse',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Account_get_id',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Account_get_lastInteraction',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Account_recordInteraction',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amountD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Account_requireSufficientCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Account_set___slot2AvailableForFutureUse',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Account_set___slotAvailableForFutureUse',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Account_set_id',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Account_set_lastInteraction',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSynthetixTestableAccountStorageAddress =
  '0xe3f20c7Af53a6E3EAd26d40b82bA8283D2B1b94d' as const

export const perpsMarketSpotMarketSynthetixTestableAccountStorageConfig = {
  address: perpsMarketSpotMarketSynthetixTestableAccountStorageAddress,
  abi: perpsMarketSpotMarketSynthetixTestableAccountStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/TestableCollateralConfigurationStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixTestableCollateralConfigurationStorageABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralDepositDisabled',
    },
    { type: 'error', inputs: [], name: 'CollateralNotFound' },
    {
      type: 'error',
      inputs: [
        { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
        { name: 'debt', internalType: 'uint256', type: 'uint256' },
        { name: 'ratio', internalType: 'uint256', type: 'uint256' },
        { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientCollateralRatio',
    },
    {
      type: 'error',
      inputs: [
        { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientDelegation',
    },
    {
      type: 'error',
      inputs: [
        { name: 'parameter', internalType: 'string', type: 'string' },
        { name: 'reason', internalType: 'string', type: 'string' },
      ],
      name: 'InvalidParameter',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    {
      type: 'error',
      inputs: [
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
        { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      ],
      name: 'PrecisionLost',
    },
    { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_collateralEnabled',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_convertTokenToSystemAmount',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_getCollateralPrice',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_depositingEnabled',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_issuanceRatioD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_liquidationRatioD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_liquidationRewardD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_minDelegationD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_oracleNodeId',
      outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_tokenAddress',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'token', internalType: 'address', type: 'address' },
        { name: 'amountD18', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_requireSufficientDelegation',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        {
          name: 'config',
          internalType: 'struct CollateralConfiguration.Data',
          type: 'tuple',
          components: [
            { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
            {
              name: 'issuanceRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRewardD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
            { name: 'tokenAddress', internalType: 'address', type: 'address' },
            {
              name: 'minDelegationD18',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
      name: 'CollateralConfiguration_set',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'bool', type: 'bool' },
      ],
      name: 'CollateralConfiguration_set_depositingEnabled',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_set_issuanceRatioD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_set_liquidationRatioD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_set_liquidationRewardD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_set_minDelegationD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'CollateralConfiguration_set_oracleNodeId',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_set_tokenAddress',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'debtD18', internalType: 'uint256', type: 'uint256' },
        {
          name: 'collateralValueD18',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'CollateralConfiguration_verifyIssuanceRatio',
      outputs: [],
    },
  ] as const

export const perpsMarketSpotMarketSynthetixTestableCollateralConfigurationStorageAddress =
  '0x6a6FC716ce286bAb956861054448e324d790A505' as const

export const perpsMarketSpotMarketSynthetixTestableCollateralConfigurationStorageConfig =
  {
    address:
      perpsMarketSpotMarketSynthetixTestableCollateralConfigurationStorageAddress,
    abi: perpsMarketSpotMarketSynthetixTestableCollateralConfigurationStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/TestableCollateralLockStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixTestableCollateralLockStorageABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CollateralLock_get_amountD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CollateralLock_get_lockExpirationTime',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'CollateralLock_set_amountD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint64', type: 'uint64' }],
    name: 'CollateralLock_set_lockExpirationTime',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSynthetixTestableCollateralLockStorageAddress =
  '0xc08e5Df07c71b628D3c3c6DD5E3A7639c33b65CC' as const

export const perpsMarketSpotMarketSynthetixTestableCollateralLockStorageConfig =
  {
    address: perpsMarketSpotMarketSynthetixTestableCollateralLockStorageAddress,
    abi: perpsMarketSpotMarketSynthetixTestableCollateralLockStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/TestableCollateralStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixTestableCollateralStorageABI = [
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amountD18', internalType: 'uint256', type: 'uint256' }],
    name: 'Collateral_decreaseAvailableCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Collateral_getTotalLocked',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Collateral_get_amountAvailableForDelegationD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amountD18', internalType: 'uint256', type: 'uint256' }],
    name: 'Collateral_increaseAvailableCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint256', type: 'uint256' }],
    name: 'Collateral_set_amountAvailableForDelegationD18',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSynthetixTestableCollateralStorageAddress =
  '0x54bEF792148aBE24D48653ab0feF6Ddd94F7eb62' as const

export const perpsMarketSpotMarketSynthetixTestableCollateralStorageConfig = {
  address: perpsMarketSpotMarketSynthetixTestableCollateralStorageAddress,
  abi: perpsMarketSpotMarketSynthetixTestableCollateralStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/TestableDistributionActorStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixTestableDistributionActorStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'DistributionActor_get_lastValuePerShareD27',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'DistributionActor_get_sharesD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'DistributionActor_set_lastValuePerShareD27',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'DistributionActor_set_sharesD18',
      outputs: [],
    },
  ] as const

export const perpsMarketSpotMarketSynthetixTestableDistributionActorStorageAddress =
  '0x407dF88963443940815d706Ff0Dbba029317e10E' as const

export const perpsMarketSpotMarketSynthetixTestableDistributionActorStorageConfig =
  {
    address:
      perpsMarketSpotMarketSynthetixTestableDistributionActorStorageAddress,
    abi: perpsMarketSpotMarketSynthetixTestableDistributionActorStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/TestableDistributionStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixTestableDistributionStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'Distribution_accumulateActor',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'valueD18', internalType: 'int256', type: 'int256' }],
    name: 'Distribution_distributeValue',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'Distribution_getActorShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'Distribution_getActorValueChange',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Distribution_getValuePerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Distribution_get_totalSharesD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Distribution_get_valuePerShareD27',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'actorId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'newActorSharesD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Distribution_setActorShares',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'Distribution_set_totalSharesD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'Distribution_set_valuePerShareD27',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSynthetixTestableDistributionStorageAddress =
  '0x504AFA1d0Dba634478662145c733248f739064Af' as const

export const perpsMarketSpotMarketSynthetixTestableDistributionStorageConfig = {
  address: perpsMarketSpotMarketSynthetixTestableDistributionStorageAddress,
  abi: perpsMarketSpotMarketSynthetixTestableDistributionStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/TestableMarketConfigurationStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixTestableMarketConfigurationStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'MarketConfiguration_get_marketId',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'MarketConfiguration_get_maxDebtShareValueD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'MarketConfiguration_get_weightD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketConfiguration_set_marketId',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'MarketConfiguration_set_maxDebtShareValueD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketConfiguration_set_weightD18',
      outputs: [],
    },
  ] as const

export const perpsMarketSpotMarketSynthetixTestableMarketConfigurationStorageAddress =
  '0xeB8202F536559bE65cD21c2c7e45F3ccB836e352' as const

export const perpsMarketSpotMarketSynthetixTestableMarketConfigurationStorageConfig =
  {
    address:
      perpsMarketSpotMarketSynthetixTestableMarketConfigurationStorageAddress,
    abi: perpsMarketSpotMarketSynthetixTestableMarketConfigurationStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/TestableMarketPoolInfoStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixTestableMarketPoolInfoStorageABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MarketPoolInfo_get_creditCapacityAmountD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MarketPoolInfo_get_pendingDebtD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketPoolInfo_set_creditCapacityAmountD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketPoolInfo_set_pendingDebtD18',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSynthetixTestableMarketPoolInfoStorageAddress =
  '0xD6413ea2b9A2232e4D4D285eb9eF680c362892D3' as const

export const perpsMarketSpotMarketSynthetixTestableMarketPoolInfoStorageConfig =
  {
    address: perpsMarketSpotMarketSynthetixTestableMarketPoolInfoStorageAddress,
    abi: perpsMarketSpotMarketSynthetixTestableMarketPoolInfoStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/TestableMarketStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixTestableMarketStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Market__testOnly_getOutstandingDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market__testOnly_inRangePools',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market__testOnly_outRangePools',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newCreditCapacityD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'newPoolMaxShareValueD18',
        internalType: 'int256',
        type: 'int256',
      },
    ],
    name: 'Market_adjustPoolShares',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'maxDistributedD18', internalType: 'int256', type: 'int256' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Market_bumpPools',
    outputs: [
      { name: '', internalType: 'int256', type: 'int256' },
      { name: '', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Market_distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      {
        name: 'creditCapacitySharesD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'maxShareValueD18', internalType: 'int256', type: 'int256' },
    ],
    name: 'Market_getCreditCapacityContribution',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_getDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_getDepositedCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_getLockedCreditCapacity',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Market_getPoolCreditCapacity',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_getReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'valueToDistributeD18', internalType: 'int256', type: 'int256' },
    ],
    name: 'Market_getTargetValuePerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get___reservedForLater1',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get___reservedForLater2',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get___reservedForLater3',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get___reservedForLater4',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_creditCapacityD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_id',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_lastDistributedMarketBalanceD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_marketAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'idx', internalType: 'address', type: 'address' },
    ],
    name: 'Market_get_maximumDepositableD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_minDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_minLiquidityRatioD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_netIssuanceD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_isCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxDebtShareValueD18', internalType: 'int256', type: 'int256' },
      {
        name: 'newCreditCapacityD18',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'Market_rebalancePools',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'Market_set___reservedForLater1',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Market_set___reservedForLater2',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Market_set___reservedForLater3',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Market_set___reservedForLater4',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'int128', type: 'int128' },
    ],
    name: 'Market_set_creditCapacityD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Market_set_id',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'int128', type: 'int128' },
    ],
    name: 'Market_set_lastDistributedMarketBalanceD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'address', type: 'address' },
    ],
    name: 'Market_set_marketAddress',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'idx', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Market_set_maximumDepositableD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'Market_set_minDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Market_set_minLiquidityRatioD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'int128', type: 'int128' },
    ],
    name: 'Market_set_netIssuanceD18',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_totalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const perpsMarketSpotMarketSynthetixTestableMarketStorageAddress =
  '0x330b2de1a041c2D78225337dfDf7F3c922dE684B' as const

export const perpsMarketSpotMarketSynthetixTestableMarketStorageConfig = {
  address: perpsMarketSpotMarketSynthetixTestableMarketStorageAddress,
  abi: perpsMarketSpotMarketSynthetixTestableMarketStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/TestablePoolStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixTestablePoolStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_currentAccountCollateral',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_currentAccountCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_currentVaultCollateral',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_currentVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_currentVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_distributeDebtToVaults',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_getRequiredMinDelegationTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'minLiquidityRatioD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'debtPerShareD18', internalType: 'int256', type: 'int256' },
    ],
    name: 'Pool_getSystemMaxValuePerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get___reserved1',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get___reserved2',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get___reserved3',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_id',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_lastConfigurationTime',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_totalVaultDebtsD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_totalWeightsD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_hasMarket',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'caller', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_onlyPoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_recalculateVaultCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'lastDelegationTime', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_requireMinDelegationTimeElapsed',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_resetVault',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set___reserved1',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set___reserved2',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set___reserved3',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_set_id',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set_lastConfigurationTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'string', type: 'string' },
    ],
    name: 'Pool_set_name',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_set_nominatedOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_set_owner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'int128', type: 'int128' },
    ],
    name: 'Pool_set_totalVaultDebtsD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_set_totalWeightsD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_updateAccountDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const perpsMarketSpotMarketSynthetixTestablePoolStorageAddress =
  '0x47eb1a48Ebd64aEcb709f5DDF3c17005Fa178964' as const

export const perpsMarketSpotMarketSynthetixTestablePoolStorageConfig = {
  address: perpsMarketSpotMarketSynthetixTestablePoolStorageAddress,
  abi: perpsMarketSpotMarketSynthetixTestablePoolStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/TestableRewardDistributionClaimStatusStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixTestableRewardDistributionClaimStatusStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistributionClaimStatus_get_lastRewardPerShareD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistributionClaimStatus_get_pendingSendD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'RewardDistributionClaimStatus_set_lastRewardPerShareD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'RewardDistributionClaimStatus_set_pendingSendD18',
      outputs: [],
    },
  ] as const

export const perpsMarketSpotMarketSynthetixTestableRewardDistributionClaimStatusStorageAddress =
  '0x83D0EA8FCD52b2994f0EE2aaE45E2254e32210Dd' as const

export const perpsMarketSpotMarketSynthetixTestableRewardDistributionClaimStatusStorageConfig =
  {
    address:
      perpsMarketSpotMarketSynthetixTestableRewardDistributionClaimStatusStorageAddress,
    abi: perpsMarketSpotMarketSynthetixTestableRewardDistributionClaimStatusStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/TestableRewardDistributionStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixTestableRewardDistributionStorageABI =
  [
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
    { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
    { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get___slotAvailableForFutureUse',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get_duration',
      outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get_lastUpdate',
      outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get_rewardPerShareD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get_scheduledValueD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get_start',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'RewardDistribution_set___slotAvailableForFutureUse',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint32', type: 'uint32' }],
      name: 'RewardDistribution_set_duration',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint32', type: 'uint32' }],
      name: 'RewardDistribution_set_lastUpdate',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'RewardDistribution_set_rewardPerShareD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'RewardDistribution_set_scheduledValueD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint64', type: 'uint64' }],
      name: 'RewardDistribution_set_start',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        {
          name: 'totalSharesAmountD18',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'RewardDistribution_updateEntry',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
  ] as const

export const perpsMarketSpotMarketSynthetixTestableRewardDistributionStorageAddress =
  '0xC71E629349CbB297fc2dAA93bD9978E567A4BfC1' as const

export const perpsMarketSpotMarketSynthetixTestableRewardDistributionStorageConfig =
  {
    address:
      perpsMarketSpotMarketSynthetixTestableRewardDistributionStorageAddress,
    abi: perpsMarketSpotMarketSynthetixTestableRewardDistributionStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/TestableScalableMappingStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixTestableScalableMappingStorageABI = [
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'ScalableMapping_get',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'amountD18', internalType: 'uint256', type: 'uint256' }],
    name: 'ScalableMapping_getSharesForAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ScalableMapping_get_scaleModifierD27',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'idx', internalType: 'bytes32', type: 'bytes32' }],
    name: 'ScalableMapping_get_sharesD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ScalableMapping_get_totalSharesD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'valueD18', internalType: 'int256', type: 'int256' }],
    name: 'ScalableMapping_scale',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'actorId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'newActorValueD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ScalableMapping_set',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'ScalableMapping_set_scaleModifierD27',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'idx', internalType: 'bytes32', type: 'bytes32' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ScalableMapping_set_sharesD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'ScalableMapping_set_totalSharesD18',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ScalableMapping_totalAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

export const perpsMarketSpotMarketSynthetixTestableScalableMappingStorageAddress =
  '0xc97A01873B0d62B9d744110B3017b56F4727D202' as const

export const perpsMarketSpotMarketSynthetixTestableScalableMappingStorageConfig =
  {
    address:
      perpsMarketSpotMarketSynthetixTestableScalableMappingStorageAddress,
    abi: perpsMarketSpotMarketSynthetixTestableScalableMappingStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/TestableSystemPoolConfigurationStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixTestableSystemPoolConfigurationStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'SystemPoolConfiguration_get___reservedForFutureUse',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'SystemPoolConfiguration_get_minLiquidityRatioD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'SystemPoolConfiguration_get_preferredPool',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'SystemPoolConfiguration_set___reservedForFutureUse',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint256', type: 'uint256' }],
      name: 'SystemPoolConfiguration_set_minLiquidityRatioD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'SystemPoolConfiguration_set_preferredPool',
      outputs: [],
    },
  ] as const

export const perpsMarketSpotMarketSynthetixTestableSystemPoolConfigurationStorageAddress =
  '0xdF8614E3a42dDC32Ec95Ed438869EB5B4d0F4Eb5' as const

export const perpsMarketSpotMarketSynthetixTestableSystemPoolConfigurationStorageConfig =
  {
    address:
      perpsMarketSpotMarketSynthetixTestableSystemPoolConfigurationStorageAddress,
    abi: perpsMarketSpotMarketSynthetixTestableSystemPoolConfigurationStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/TestableVaultEpochStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixTestableVaultEpochStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amountD18', internalType: 'int256', type: 'int256' },
    ],
    name: 'VaultEpoch_assignDebtToAccount',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'VaultEpoch_consolidateAccountDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'debtChangeD18', internalType: 'int256', type: 'int256' }],
    name: 'VaultEpoch_distributeDebtToAccounts',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'VaultEpoch_getAccountCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'idx', internalType: 'uint256', type: 'uint256' }],
    name: 'VaultEpoch_get_consolidatedDebtAmountsD18',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'idx', internalType: 'uint128', type: 'uint128' }],
    name: 'VaultEpoch_get_lastDelegationTime',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'VaultEpoch_get_totalConsolidatedDebtD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'VaultEpoch_get_unconsolidatedDebtD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'idx', internalType: 'uint256', type: 'uint256' },
      { name: 'val', internalType: 'int256', type: 'int256' },
    ],
    name: 'VaultEpoch_set_consolidatedDebtAmountsD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'idx', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'VaultEpoch_set_lastDelegationTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'VaultEpoch_set_totalConsolidatedDebtD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'VaultEpoch_set_unconsolidatedDebtD18',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'VaultEpoch_totalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralAmountD18', internalType: 'uint256', type: 'uint256' },
      { name: 'leverageD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'VaultEpoch_updateAccountPosition',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSynthetixTestableVaultEpochStorageAddress =
  '0xD0700302fC769DE76BB98C2b10a46325fEBda460' as const

export const perpsMarketSpotMarketSynthetixTestableVaultEpochStorageConfig = {
  address: perpsMarketSpotMarketSynthetixTestableVaultEpochStorageAddress,
  abi: perpsMarketSpotMarketSynthetixTestableVaultEpochStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/TestableVaultStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixTestableVaultStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'Vault_consolidateAccountDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'Vault_currentAccountCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_currentCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_currentDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'debtChangeD18', internalType: 'int256', type: 'int256' }],
    name: 'Vault_distributeDebtToAccounts',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_get___slotAvailableForFutureUse',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_get_epoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_get_prevTotalDebtD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'Vault_reset',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'bytes32', type: 'bytes32' }],
    name: 'Vault_set___slotAvailableForFutureUse',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint256', type: 'uint256' }],
    name: 'Vault_set_epoch',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'Vault_set_prevTotalDebtD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'collateralPriceD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Vault_updateCreditCapacity',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'int256', type: 'int256' },
      { name: '', internalType: 'int256', type: 'int256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'rewardId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'Vault_updateReward',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Vault_updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
] as const

export const perpsMarketSpotMarketSynthetixTestableVaultStorageAddress =
  '0xe8021266D2659aa320c114f9333502B38787a04B' as const

export const perpsMarketSpotMarketSynthetixTestableVaultStorageConfig = {
  address: perpsMarketSpotMarketSynthetixTestableVaultStorageAddress,
  abi: perpsMarketSpotMarketSynthetixTestableVaultStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/USDProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixUsdProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnWithAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destChainId', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferCrossChain',
    outputs: [{ name: 'feesPaid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const perpsMarketSpotMarketSynthetixUsdProxyAddress =
  '0x629673e90e428069AeB328DE4EF2040a7C22f723' as const

export const perpsMarketSpotMarketSynthetixUsdProxyConfig = {
  address: perpsMarketSpotMarketSynthetixUsdProxyAddress,
  abi: perpsMarketSpotMarketSynthetixUsdProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/USDRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixUsdRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnWithAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destChainId', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferCrossChain',
    outputs: [{ name: 'feesPaid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const perpsMarketSpotMarketSynthetixUsdRouterAddress =
  '0xCB575e07D1547d7A2b736e7087AFeeb80c4389e1' as const

export const perpsMarketSpotMarketSynthetixUsdRouterConfig = {
  address: perpsMarketSpotMarketSynthetixUsdRouterAddress,
  abi: perpsMarketSpotMarketSynthetixUsdRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/USDTokenModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixUsdTokenModuleABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnWithAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destChainId', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferCrossChain',
    outputs: [{ name: 'feesPaid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const perpsMarketSpotMarketSynthetixUsdTokenModuleAddress =
  '0xc4C69b65ca3BFF98839A63a23AFb639a445f51A6' as const

export const perpsMarketSpotMarketSynthetixUsdTokenModuleConfig = {
  address: perpsMarketSpotMarketSynthetixUsdTokenModuleAddress,
  abi: perpsMarketSpotMarketSynthetixUsdTokenModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/UtilsModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixUtilsModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'oracleManagerAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'configureOracleManager',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'k', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getConfig',
    outputs: [{ name: 'v', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ccipSend', internalType: 'address', type: 'address' },
      { name: 'ccipReceive', internalType: 'address', type: 'address' },
      { name: 'ccipTokenPool', internalType: 'address', type: 'address' },
    ],
    name: 'registerCcip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'k', internalType: 'bytes32', type: 'bytes32' },
      { name: 'v', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setConfig',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSynthetixUtilsModuleAddress =
  '0x8986BC8B1cDB92FE2a2E9765a34193dF5754254D' as const

export const perpsMarketSpotMarketSynthetixUtilsModuleConfig = {
  address: perpsMarketSpotMarketSynthetixUtilsModuleAddress,
  abi: perpsMarketSpotMarketSynthetixUtilsModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/VaultModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixVaultModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [
      { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientDelegation',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralAmount' },
  {
    type: 'error',
    inputs: [{ name: 'leverage', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidLeverage',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'leverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'newCollateralAmountD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPosition',
    outputs: [
      { name: 'collateralAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      {
        name: 'collateralizationRatio',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const perpsMarketSpotMarketSynthetixVaultModuleAddress =
  '0xb5A39c13b25cb5578BaC3f9C4DaA96e318281fC8' as const

export const perpsMarketSpotMarketSynthetixVaultModuleConfig = {
  address: perpsMarketSpotMarketSynthetixVaultModuleAddress,
  abi: perpsMarketSpotMarketSynthetixVaultModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/oracle_manager/CoreModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixOracleManagerCoreModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSynthetixOracleManagerCoreModuleAddress =
  '0x606ACC428283663F0EFA30c75f39912BdfF49364' as const

export const perpsMarketSpotMarketSynthetixOracleManagerCoreModuleConfig = {
  address: perpsMarketSpotMarketSynthetixOracleManagerCoreModuleAddress,
  abi: perpsMarketSpotMarketSynthetixOracleManagerCoreModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/oracle_manager/InitialProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixOracleManagerInitialProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const perpsMarketSpotMarketSynthetixOracleManagerInitialProxyAddress =
  '0xc0958BD10cB079b7A6bfeC7Fb695F75845830E5f' as const

export const perpsMarketSpotMarketSynthetixOracleManagerInitialProxyConfig = {
  address: perpsMarketSpotMarketSynthetixOracleManagerInitialProxyAddress,
  abi: perpsMarketSpotMarketSynthetixOracleManagerInitialProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/oracle_manager/NodeModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixOracleManagerNodeModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'deviation', internalType: 'int256', type: 'int256' }],
    name: 'DeviationToleranceExceeded',
  },
  { type: 'error', inputs: [], name: 'InvalidInputPrice' },
  {
    type: 'error',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
    name: 'InvalidNodeDefinition',
  },
  {
    type: 'error',
    inputs: [{ name: 'price', internalType: 'int256', type: 'int256' }],
    name: 'InvalidPrice',
  },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'NodeNotRegistered',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowInt56ToInt24' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint160' },
  { type: 'error', inputs: [], name: 'OverflowUint56ToInt56' },
  { type: 'error', inputs: [], name: 'StalenessToleranceExceeded' },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'UnprocessableNode',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'operation',
        internalType: 'enum ReducerNode.Operations',
        type: 'uint8',
      },
    ],
    name: 'UnsupportedOperation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'nodeId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'parameters',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'parents',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
        indexed: false,
      },
    ],
    name: 'NodeRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getNode',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'getNodeId',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'process',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeOutput.Data',
        type: 'tuple',
        components: [
          { name: 'price', internalType: 'int256', type: 'int256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
          {
            name: '__slotAvailableForFutureUse1',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: '__slotAvailableForFutureUse2',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'registerNode',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

export const perpsMarketSpotMarketSynthetixOracleManagerNodeModuleAddress =
  '0xBa8acc65Dfa24e4547932BE2b248B3666fE59ade' as const

export const perpsMarketSpotMarketSynthetixOracleManagerNodeModuleConfig = {
  address: perpsMarketSpotMarketSynthetixOracleManagerNodeModuleAddress,
  abi: perpsMarketSpotMarketSynthetixOracleManagerNodeModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/oracle_manager/OracleRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixOracleManagerOracleRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'deviation', internalType: 'int256', type: 'int256' }],
    name: 'DeviationToleranceExceeded',
  },
  { type: 'error', inputs: [], name: 'InvalidInputPrice' },
  {
    type: 'error',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
    name: 'InvalidNodeDefinition',
  },
  {
    type: 'error',
    inputs: [{ name: 'price', internalType: 'int256', type: 'int256' }],
    name: 'InvalidPrice',
  },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'NodeNotRegistered',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowInt56ToInt24' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint160' },
  { type: 'error', inputs: [], name: 'OverflowUint56ToInt56' },
  { type: 'error', inputs: [], name: 'StalenessToleranceExceeded' },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'UnprocessableNode',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'operation',
        internalType: 'enum ReducerNode.Operations',
        type: 'uint8',
      },
    ],
    name: 'UnsupportedOperation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'nodeId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'parameters',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'parents',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
        indexed: false,
      },
    ],
    name: 'NodeRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getNode',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'getNodeId',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'process',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeOutput.Data',
        type: 'tuple',
        components: [
          { name: 'price', internalType: 'int256', type: 'int256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
          {
            name: '__slotAvailableForFutureUse1',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: '__slotAvailableForFutureUse2',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'registerNode',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

export const perpsMarketSpotMarketSynthetixOracleManagerOracleRouterAddress =
  '0xB1Aa8b59aED40bfa56356bfa10e18E17a11449d1' as const

export const perpsMarketSpotMarketSynthetixOracleManagerOracleRouterConfig = {
  address: perpsMarketSpotMarketSynthetixOracleManagerOracleRouterAddress,
  abi: perpsMarketSpotMarketSynthetixOracleManagerOracleRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/spotMarket/synthetix/oracle_manager/Proxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSpotMarketSynthetixOracleManagerProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'deviation', internalType: 'int256', type: 'int256' }],
    name: 'DeviationToleranceExceeded',
  },
  { type: 'error', inputs: [], name: 'InvalidInputPrice' },
  {
    type: 'error',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
    name: 'InvalidNodeDefinition',
  },
  {
    type: 'error',
    inputs: [{ name: 'price', internalType: 'int256', type: 'int256' }],
    name: 'InvalidPrice',
  },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'NodeNotRegistered',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowInt56ToInt24' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint160' },
  { type: 'error', inputs: [], name: 'OverflowUint56ToInt56' },
  { type: 'error', inputs: [], name: 'StalenessToleranceExceeded' },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'UnprocessableNode',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'operation',
        internalType: 'enum ReducerNode.Operations',
        type: 'uint8',
      },
    ],
    name: 'UnsupportedOperation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'nodeId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'parameters',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'parents',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
        indexed: false,
      },
    ],
    name: 'NodeRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getNode',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'getNodeId',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'process',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeOutput.Data',
        type: 'tuple',
        components: [
          { name: 'price', internalType: 'int256', type: 'int256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
          {
            name: '__slotAvailableForFutureUse1',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: '__slotAvailableForFutureUse2',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'registerNode',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

export const perpsMarketSpotMarketSynthetixOracleManagerProxyAddress =
  '0xc0958BD10cB079b7A6bfeC7Fb695F75845830E5f' as const

export const perpsMarketSpotMarketSynthetixOracleManagerProxyConfig = {
  address: perpsMarketSpotMarketSynthetixOracleManagerProxyAddress,
  abi: perpsMarketSpotMarketSynthetixOracleManagerProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/AccountModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixAccountModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixAccountModuleAddress =
  '0x979B8a61B877fC74f84648d0dCdeb42391ddCE3b' as const

export const perpsMarketSynthetixAccountModuleConfig = {
  address: perpsMarketSynthetixAccountModuleAddress,
  abi: perpsMarketSynthetixAccountModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/AccountProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixAccountProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'CannotSelfApprove',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IndexOverrun',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidTransferRecipient',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenAlreadyMinted',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenDoesNotExist',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
    name: 'setBaseTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixAccountProxyAddress =
  '0xE06fE85b65E0110f78638022FA9AD58c6b6c69bF' as const

export const perpsMarketSynthetixAccountProxyConfig = {
  address: perpsMarketSynthetixAccountProxyAddress,
  abi: perpsMarketSynthetixAccountProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/AccountRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixAccountRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'CannotSelfApprove',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IndexOverrun',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidTransferRecipient',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenAlreadyMinted',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenDoesNotExist',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
    name: 'setBaseTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixAccountRouterAddress =
  '0x6EbD720D47b0E1754CFe423e93730597D86aC26C' as const

export const perpsMarketSynthetixAccountRouterConfig = {
  address: perpsMarketSynthetixAccountRouterAddress,
  abi: perpsMarketSynthetixAccountRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/AccountTokenModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixAccountTokenModuleABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'CannotSelfApprove',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IndexOverrun',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidTransferRecipient',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenAlreadyMinted',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenDoesNotExist',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
    name: 'setBaseTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixAccountTokenModuleAddress =
  '0x790F6939f3Cb0b76A1465A340aEF9347d92ceEA0' as const

export const perpsMarketSynthetixAccountTokenModuleConfig = {
  address: perpsMarketSynthetixAccountTokenModuleAddress,
  abi: perpsMarketSynthetixAccountTokenModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/AssociateDebtModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixAssociateDebtModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint256', type: 'uint256' },
      { name: 'poolId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotFundedByPool',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'updatedDebt',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'DebtAssociated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'associateDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const perpsMarketSynthetixAssociateDebtModuleAddress =
  '0xbe7a510c72aE8c23560Ac7ada5d8765F9492BadA' as const

export const perpsMarketSynthetixAssociateDebtModuleConfig = {
  address: perpsMarketSynthetixAssociateDebtModuleAddress,
  abi: perpsMarketSynthetixAssociateDebtModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/AssociatedSystemsModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixAssociatedSystemsModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixAssociatedSystemsModuleAddress =
  '0xf8d85923ef87fb6e6f3875805beE59E02C596076' as const

export const perpsMarketSynthetixAssociatedSystemsModuleConfig = {
  address: perpsMarketSynthetixAssociatedSystemsModuleAddress,
  abi: perpsMarketSynthetixAssociatedSystemsModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/CollateralConfigurationModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixCollateralConfigurationModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
    ],
    name: 'CollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'configureCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hideDisabled', internalType: 'bool', type: 'bool' }],
    name: 'getCollateralConfigurations',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

export const perpsMarketSynthetixCollateralConfigurationModuleAddress =
  '0x9541aA2A6b9E4874205BfB8a348F287049FE5d0A' as const

export const perpsMarketSynthetixCollateralConfigurationModuleConfig = {
  address: perpsMarketSynthetixCollateralConfigurationModuleAddress,
  abi: perpsMarketSynthetixCollateralConfigurationModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/CollateralMock
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixCollateralMockABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const perpsMarketSynthetixCollateralMockAddress =
  '0x152E3B07d82538FaE3A588E0F04d176c2Ec08fA1' as const

export const perpsMarketSynthetixCollateralMockConfig = {
  address: perpsMarketSynthetixCollateralMockAddress,
  abi: perpsMarketSynthetixCollateralMockABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/CollateralModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixCollateralModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'currentTime', internalType: 'uint256', type: 'uint256' },
      { name: 'requiredTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'AccountActivityTimeoutPending',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockExpired',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cleanExpiredLocks',
    outputs: [{ name: 'cleared', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'expireTimestamp', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'createLock',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountAvailableCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountCollateral',
    outputs: [
      { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
      { name: 'totalAssigned', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLocked', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getLocks',
    outputs: [
      {
        name: 'locks',
        internalType: 'struct CollateralLock.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'amountD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'lockExpirationTime',
            internalType: 'uint64',
            type: 'uint64',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixCollateralModuleAddress =
  '0x658731A2CCf51FE5c92eD51A72A32F33702Bc526' as const

export const perpsMarketSynthetixCollateralModuleConfig = {
  address: perpsMarketSynthetixCollateralModuleAddress,
  abi: perpsMarketSynthetixCollateralModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/CoreProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixCoreProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint256', type: 'uint256' },
      { name: 'poolId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotFundedByPool',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'updatedDebt',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'DebtAssociated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'associateDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'currentTime', internalType: 'uint256', type: 'uint256' },
      { name: 'requiredTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'AccountActivityTimeoutPending',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockExpired',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cleanExpiredLocks',
    outputs: [{ name: 'cleared', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'expireTimestamp', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'createLock',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountAvailableCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountCollateral',
    outputs: [
      { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
      { name: 'totalAssigned', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLocked', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getLocks',
    outputs: [
      {
        name: 'locks',
        internalType: 'struct CollateralLock.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'amountD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'lockExpirationTime',
            internalType: 'uint64',
            type: 'uint64',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
    ],
    name: 'CollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'configureCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hideDisabled', internalType: 'bool', type: 'bool' }],
    name: 'getCollateralConfigurations',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    type: 'error',
    inputs: [{ name: 'currentDebt', internalType: 'int256', type: 'int256' }],
    name: 'InsufficientDebt',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IssuanceFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdBurned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdMinted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnUsd',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintUsd',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      { name: 'currentCRatio', internalType: 'uint256', type: 'uint256' },
      { name: 'cratio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForLiquidation',
  },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  { type: 'error', inputs: [], name: 'MustBeVaultLiquidated' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Liquidation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'VaultLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isPositionLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isVaultLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
    ],
    name: 'liquidate',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
      { name: 'maxUsd', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'liquidateVault',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToDeposit',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralDepositable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToWithdraw',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralWithdrawable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'systemAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MaximumMarketCollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'configureMaximumMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMarketCollateralAmount',
    outputs: [
      { name: 'collateralAmountD18', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMaximumMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketCollateral',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'IncorrectMarketInterface',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughLiquidity',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSystemFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMarketMinLiquidityRatio',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minDelegateTime',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
    ],
    name: 'SetMinDelegateTime',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'depositFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketMinDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketNetIssuance',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketTotalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOracleManager',
    outputs: [
      { name: '', internalType: 'contract IOracleManager', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUsdToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getWithdrawableMarketUsd',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'isMarketCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'registerMarket',
    outputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minDelegateTime', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'setMarketMinDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PreferredPoolSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'addApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getApprovedPools',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPreferredPool',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'removeApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'setPreferredPool',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolAlreadyExists',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'markets',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolConfigurationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNameUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnershipAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinLiquidityRatio',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'acceptPoolOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedPoolId', internalType: 'uint128', type: 'uint128' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'createPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getNominatedPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolName',
    outputs: [{ name: 'poolName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nominatedOwner', internalType: 'address', type: 'address' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'nominatePoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'renouncePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'revokePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newMarketConfigurations',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
    name: 'setPoolConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'name', internalType: 'string', type: 'string' },
    ],
    name: 'setPoolName',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    type: 'error',
    inputs: [{ name: 'distributor', internalType: 'address', type: 'address' }],
    name: 'RewardUnavailable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'start',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'duration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsDistributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRemoved',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'claimRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'start', internalType: 'uint64', type: 'uint64' },
      { name: 'duration', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'distributeRewards',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'getRewardRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'registerRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'removeRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'oracleManagerAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'configureOracleManager',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'k', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getConfig',
    outputs: [{ name: 'v', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ccipSend', internalType: 'address', type: 'address' },
      { name: 'ccipReceive', internalType: 'address', type: 'address' },
      { name: 'ccipTokenPool', internalType: 'address', type: 'address' },
    ],
    name: 'registerCcip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'k', internalType: 'bytes32', type: 'bytes32' },
      { name: 'v', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setConfig',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientDelegation',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralAmount' },
  {
    type: 'error',
    inputs: [{ name: 'leverage', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidLeverage',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'leverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'newCollateralAmountD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPosition',
    outputs: [
      { name: 'collateralAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      {
        name: 'collateralizationRatio',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const perpsMarketSynthetixCoreProxyAddress =
  '0x381aeF01aB853657163ccbBFC1A993D49a77307c' as const

export const perpsMarketSynthetixCoreProxyConfig = {
  address: perpsMarketSynthetixCoreProxyAddress,
  abi: perpsMarketSynthetixCoreProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/CoreRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixCoreRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint256', type: 'uint256' },
      { name: 'poolId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotFundedByPool',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'updatedDebt',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'DebtAssociated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'associateDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'currentTime', internalType: 'uint256', type: 'uint256' },
      { name: 'requiredTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'AccountActivityTimeoutPending',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockExpired',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cleanExpiredLocks',
    outputs: [{ name: 'cleared', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'expireTimestamp', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'createLock',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountAvailableCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountCollateral',
    outputs: [
      { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
      { name: 'totalAssigned', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLocked', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getLocks',
    outputs: [
      {
        name: 'locks',
        internalType: 'struct CollateralLock.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'amountD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'lockExpirationTime',
            internalType: 'uint64',
            type: 'uint64',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
    ],
    name: 'CollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'configureCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hideDisabled', internalType: 'bool', type: 'bool' }],
    name: 'getCollateralConfigurations',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    type: 'error',
    inputs: [{ name: 'currentDebt', internalType: 'int256', type: 'int256' }],
    name: 'InsufficientDebt',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IssuanceFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdBurned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdMinted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnUsd',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintUsd',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      { name: 'currentCRatio', internalType: 'uint256', type: 'uint256' },
      { name: 'cratio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForLiquidation',
  },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  { type: 'error', inputs: [], name: 'MustBeVaultLiquidated' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Liquidation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'VaultLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isPositionLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isVaultLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
    ],
    name: 'liquidate',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
      { name: 'maxUsd', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'liquidateVault',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToDeposit',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralDepositable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToWithdraw',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralWithdrawable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'systemAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MaximumMarketCollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'configureMaximumMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMarketCollateralAmount',
    outputs: [
      { name: 'collateralAmountD18', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMaximumMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketCollateral',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'IncorrectMarketInterface',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughLiquidity',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSystemFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMarketMinLiquidityRatio',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minDelegateTime',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
    ],
    name: 'SetMinDelegateTime',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'depositFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketMinDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketNetIssuance',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketTotalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOracleManager',
    outputs: [
      { name: '', internalType: 'contract IOracleManager', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUsdToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getWithdrawableMarketUsd',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'isMarketCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'registerMarket',
    outputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minDelegateTime', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'setMarketMinDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PreferredPoolSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'addApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getApprovedPools',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPreferredPool',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'removeApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'setPreferredPool',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolAlreadyExists',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'markets',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolConfigurationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNameUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnershipAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinLiquidityRatio',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'acceptPoolOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedPoolId', internalType: 'uint128', type: 'uint128' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'createPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getNominatedPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolName',
    outputs: [{ name: 'poolName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nominatedOwner', internalType: 'address', type: 'address' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'nominatePoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'renouncePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'revokePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newMarketConfigurations',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
    name: 'setPoolConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'name', internalType: 'string', type: 'string' },
    ],
    name: 'setPoolName',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    type: 'error',
    inputs: [{ name: 'distributor', internalType: 'address', type: 'address' }],
    name: 'RewardUnavailable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'start',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'duration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsDistributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRemoved',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'claimRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'start', internalType: 'uint64', type: 'uint64' },
      { name: 'duration', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'distributeRewards',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'getRewardRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'registerRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'removeRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'oracleManagerAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'configureOracleManager',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'k', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getConfig',
    outputs: [{ name: 'v', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ccipSend', internalType: 'address', type: 'address' },
      { name: 'ccipReceive', internalType: 'address', type: 'address' },
      { name: 'ccipTokenPool', internalType: 'address', type: 'address' },
    ],
    name: 'registerCcip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'k', internalType: 'bytes32', type: 'bytes32' },
      { name: 'v', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setConfig',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientDelegation',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralAmount' },
  {
    type: 'error',
    inputs: [{ name: 'leverage', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidLeverage',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'leverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'newCollateralAmountD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPosition',
    outputs: [
      { name: 'collateralAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      {
        name: 'collateralizationRatio',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const perpsMarketSynthetixCoreRouterAddress =
  '0x91752B65232fD32f9982273974c6aE0789e95697' as const

export const perpsMarketSynthetixCoreRouterConfig = {
  address: perpsMarketSynthetixCoreRouterAddress,
  abi: perpsMarketSynthetixCoreRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/FeatureFlagModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixFeatureFlagModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixFeatureFlagModuleAddress =
  '0x002AB3794418cCbFE9bBAad708C3Fa30B94e0e0F' as const

export const perpsMarketSynthetixFeatureFlagModuleConfig = {
  address: perpsMarketSynthetixFeatureFlagModuleAddress,
  abi: perpsMarketSynthetixFeatureFlagModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/InitialCoreProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixInitialCoreProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixInitialCoreProxyAddress =
  '0x381aeF01aB853657163ccbBFC1A993D49a77307c' as const

export const perpsMarketSynthetixInitialCoreProxyConfig = {
  address: perpsMarketSynthetixInitialCoreProxyAddress,
  abi: perpsMarketSynthetixInitialCoreProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/InitialModuleBundle
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixInitialModuleBundleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixInitialModuleBundleAddress =
  '0x2F4a58770bDaBFef1f3Cee0eF6Ad05Db4F4d954E' as const

export const perpsMarketSynthetixInitialModuleBundleConfig = {
  address: perpsMarketSynthetixInitialModuleBundleAddress,
  abi: perpsMarketSynthetixInitialModuleBundleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/IssueUSDModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixIssueUsdModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'currentDebt', internalType: 'int256', type: 'int256' }],
    name: 'InsufficientDebt',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IssuanceFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdBurned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdMinted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnUsd',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintUsd',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixIssueUsdModuleAddress =
  '0x1CD17c0acF7f48f3D6416b542E8f623b47e013ab' as const

export const perpsMarketSynthetixIssueUsdModuleConfig = {
  address: perpsMarketSynthetixIssueUsdModuleAddress,
  abi: perpsMarketSynthetixIssueUsdModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/LiquidationModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixLiquidationModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      { name: 'currentCRatio', internalType: 'uint256', type: 'uint256' },
      { name: 'cratio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForLiquidation',
  },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  { type: 'error', inputs: [], name: 'MustBeVaultLiquidated' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Liquidation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'VaultLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isPositionLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isVaultLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
    ],
    name: 'liquidate',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
      { name: 'maxUsd', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'liquidateVault',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
] as const

export const perpsMarketSynthetixLiquidationModuleAddress =
  '0x2cBB85cC49F73d87CACdeEA408ea196176Be60C9' as const

export const perpsMarketSynthetixLiquidationModuleConfig = {
  address: perpsMarketSynthetixLiquidationModuleAddress,
  abi: perpsMarketSynthetixLiquidationModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/MarketCollateralModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixMarketCollateralModuleABI = [
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToDeposit',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralDepositable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToWithdraw',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralWithdrawable',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'systemAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MaximumMarketCollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'configureMaximumMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMarketCollateralAmount',
    outputs: [
      { name: 'collateralAmountD18', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMaximumMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketCollateral',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixMarketCollateralModuleAddress =
  '0xa61825604f9Bb29E8A9dF85b4bDb663B358D6638' as const

export const perpsMarketSynthetixMarketCollateralModuleConfig = {
  address: perpsMarketSynthetixMarketCollateralModuleAddress,
  abi: perpsMarketSynthetixMarketCollateralModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/MarketManagerModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixMarketManagerModuleABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'IncorrectMarketInterface',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughLiquidity',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSystemFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMarketMinLiquidityRatio',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minDelegateTime',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
    ],
    name: 'SetMinDelegateTime',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'depositFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketMinDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketNetIssuance',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketTotalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOracleManager',
    outputs: [
      { name: '', internalType: 'contract IOracleManager', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUsdToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getWithdrawableMarketUsd',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'isMarketCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'registerMarket',
    outputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minDelegateTime', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'setMarketMinDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
] as const

export const perpsMarketSynthetixMarketManagerModuleAddress =
  '0x0137ecb811330763277daE159B6Cf9306645c18f' as const

export const perpsMarketSynthetixMarketManagerModuleConfig = {
  address: perpsMarketSynthetixMarketManagerModuleAddress,
  abi: perpsMarketSynthetixMarketManagerModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/MulticallModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixMulticallModuleABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
] as const

export const perpsMarketSynthetixMulticallModuleAddress =
  '0xb61926f01cAD38f51236F861dABcC59626F2078d' as const

export const perpsMarketSynthetixMulticallModuleConfig = {
  address: perpsMarketSynthetixMulticallModuleAddress,
  abi: perpsMarketSynthetixMulticallModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/PoolConfigurationModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixPoolConfigurationModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PreferredPoolSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'addApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getApprovedPools',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPreferredPool',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'removeApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'setPreferredPool',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixPoolConfigurationModuleAddress =
  '0x58fEF24F50d5658F7269aE804cF50dD1890992f6' as const

export const perpsMarketSynthetixPoolConfigurationModuleConfig = {
  address: perpsMarketSynthetixPoolConfigurationModuleAddress,
  abi: perpsMarketSynthetixPoolConfigurationModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/PoolModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixPoolModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolAlreadyExists',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'markets',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolConfigurationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNameUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnershipAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinLiquidityRatio',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'acceptPoolOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedPoolId', internalType: 'uint128', type: 'uint128' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'createPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getNominatedPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolName',
    outputs: [{ name: 'poolName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nominatedOwner', internalType: 'address', type: 'address' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'nominatePoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'renouncePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'revokePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newMarketConfigurations',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
    name: 'setPoolConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'name', internalType: 'string', type: 'string' },
    ],
    name: 'setPoolName',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixPoolModuleAddress =
  '0xd14aA7Ac9f07c98F3C2984e3cFCC1Bcc5B766701' as const

export const perpsMarketSynthetixPoolModuleConfig = {
  address: perpsMarketSynthetixPoolModuleAddress,
  abi: perpsMarketSynthetixPoolModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/RewardsManagerModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixRewardsManagerModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    type: 'error',
    inputs: [{ name: 'distributor', internalType: 'address', type: 'address' }],
    name: 'RewardUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'start',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'duration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsDistributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRemoved',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'claimRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'start', internalType: 'uint64', type: 'uint64' },
      { name: 'duration', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'distributeRewards',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'getRewardRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'registerRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'removeRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
] as const

export const perpsMarketSynthetixRewardsManagerModuleAddress =
  '0x6E842803c349F55447F370d516f38461f45A6ed2' as const

export const perpsMarketSynthetixRewardsManagerModuleConfig = {
  address: perpsMarketSynthetixRewardsManagerModuleAddress,
  abi: perpsMarketSynthetixRewardsManagerModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/TestableAccountRBACStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixTestableAccountRbacStorageABI = [
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'AccountRBAC_authorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'AccountRBAC_get_owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'AccountRBAC_grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'AccountRBAC_hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'AccountRBAC_isPermissionValid',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'AccountRBAC_revokeAllPermissions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'AccountRBAC_revokePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'AccountRBAC_setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'address', type: 'address' }],
    name: 'AccountRBAC_set_owner',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixTestableAccountRbacStorageAddress =
  '0x15979A635FF16F303261AC1392f7d000614458Cf' as const

export const perpsMarketSynthetixTestableAccountRbacStorageConfig = {
  address: perpsMarketSynthetixTestableAccountRbacStorageAddress,
  abi: perpsMarketSynthetixTestableAccountRbacStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/TestableAccountStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixTestableAccountStorageABI = [
  {
    type: 'error',
    inputs: [
      { name: 'requestedAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAccountCollateral',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Account_getAssignedCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Account_getCollateralTotals',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Account_get___slot2AvailableForFutureUse',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Account_get___slotAvailableForFutureUse',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Account_get_id',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Account_get_lastInteraction',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Account_recordInteraction',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amountD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Account_requireSufficientCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Account_set___slot2AvailableForFutureUse',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Account_set___slotAvailableForFutureUse',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Account_set_id',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Account_set_lastInteraction',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixTestableAccountStorageAddress =
  '0xe3f20c7Af53a6E3EAd26d40b82bA8283D2B1b94d' as const

export const perpsMarketSynthetixTestableAccountStorageConfig = {
  address: perpsMarketSynthetixTestableAccountStorageAddress,
  abi: perpsMarketSynthetixTestableAccountStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/TestableCollateralConfigurationStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixTestableCollateralConfigurationStorageABI = [
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [
      { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientDelegation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'token', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralConfiguration_collateralEnabled',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'CollateralConfiguration_convertTokenToSystemAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_token', internalType: 'address', type: 'address' }],
    name: 'CollateralConfiguration_getCollateralPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_token', internalType: 'address', type: 'address' }],
    name: 'CollateralConfiguration_get_depositingEnabled',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_token', internalType: 'address', type: 'address' }],
    name: 'CollateralConfiguration_get_issuanceRatioD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_token', internalType: 'address', type: 'address' }],
    name: 'CollateralConfiguration_get_liquidationRatioD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_token', internalType: 'address', type: 'address' }],
    name: 'CollateralConfiguration_get_liquidationRewardD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_token', internalType: 'address', type: 'address' }],
    name: 'CollateralConfiguration_get_minDelegationD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_token', internalType: 'address', type: 'address' }],
    name: 'CollateralConfiguration_get_oracleNodeId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_token', internalType: 'address', type: 'address' }],
    name: 'CollateralConfiguration_get_tokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'amountD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'CollateralConfiguration_requireSufficientDelegation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'CollateralConfiguration_set',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'bool', type: 'bool' },
    ],
    name: 'CollateralConfiguration_set_depositingEnabled',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'CollateralConfiguration_set_issuanceRatioD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'CollateralConfiguration_set_liquidationRatioD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'CollateralConfiguration_set_liquidationRewardD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'CollateralConfiguration_set_minDelegationD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'CollateralConfiguration_set_oracleNodeId',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralConfiguration_set_tokenAddress',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'debtD18', internalType: 'uint256', type: 'uint256' },
      { name: 'collateralValueD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'CollateralConfiguration_verifyIssuanceRatio',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixTestableCollateralConfigurationStorageAddress =
  '0x6a6FC716ce286bAb956861054448e324d790A505' as const

export const perpsMarketSynthetixTestableCollateralConfigurationStorageConfig =
  {
    address: perpsMarketSynthetixTestableCollateralConfigurationStorageAddress,
    abi: perpsMarketSynthetixTestableCollateralConfigurationStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/TestableCollateralLockStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixTestableCollateralLockStorageABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CollateralLock_get_amountD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CollateralLock_get_lockExpirationTime',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'CollateralLock_set_amountD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint64', type: 'uint64' }],
    name: 'CollateralLock_set_lockExpirationTime',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixTestableCollateralLockStorageAddress =
  '0xc08e5Df07c71b628D3c3c6DD5E3A7639c33b65CC' as const

export const perpsMarketSynthetixTestableCollateralLockStorageConfig = {
  address: perpsMarketSynthetixTestableCollateralLockStorageAddress,
  abi: perpsMarketSynthetixTestableCollateralLockStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/TestableCollateralStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixTestableCollateralStorageABI = [
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amountD18', internalType: 'uint256', type: 'uint256' }],
    name: 'Collateral_decreaseAvailableCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Collateral_getTotalLocked',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Collateral_get_amountAvailableForDelegationD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amountD18', internalType: 'uint256', type: 'uint256' }],
    name: 'Collateral_increaseAvailableCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint256', type: 'uint256' }],
    name: 'Collateral_set_amountAvailableForDelegationD18',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixTestableCollateralStorageAddress =
  '0x54bEF792148aBE24D48653ab0feF6Ddd94F7eb62' as const

export const perpsMarketSynthetixTestableCollateralStorageConfig = {
  address: perpsMarketSynthetixTestableCollateralStorageAddress,
  abi: perpsMarketSynthetixTestableCollateralStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/TestableDistributionActorStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixTestableDistributionActorStorageABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DistributionActor_get_lastValuePerShareD27',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DistributionActor_get_sharesD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'DistributionActor_set_lastValuePerShareD27',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'DistributionActor_set_sharesD18',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixTestableDistributionActorStorageAddress =
  '0x407dF88963443940815d706Ff0Dbba029317e10E' as const

export const perpsMarketSynthetixTestableDistributionActorStorageConfig = {
  address: perpsMarketSynthetixTestableDistributionActorStorageAddress,
  abi: perpsMarketSynthetixTestableDistributionActorStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/TestableDistributionStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixTestableDistributionStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'Distribution_accumulateActor',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'valueD18', internalType: 'int256', type: 'int256' }],
    name: 'Distribution_distributeValue',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'Distribution_getActorShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'Distribution_getActorValueChange',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Distribution_getValuePerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Distribution_get_totalSharesD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Distribution_get_valuePerShareD27',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'actorId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'newActorSharesD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Distribution_setActorShares',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'Distribution_set_totalSharesD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'Distribution_set_valuePerShareD27',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixTestableDistributionStorageAddress =
  '0x504AFA1d0Dba634478662145c733248f739064Af' as const

export const perpsMarketSynthetixTestableDistributionStorageConfig = {
  address: perpsMarketSynthetixTestableDistributionStorageAddress,
  abi: perpsMarketSynthetixTestableDistributionStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/TestableMarketConfigurationStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixTestableMarketConfigurationStorageABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MarketConfiguration_get_marketId',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MarketConfiguration_get_maxDebtShareValueD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MarketConfiguration_get_weightD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketConfiguration_set_marketId',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'MarketConfiguration_set_maxDebtShareValueD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketConfiguration_set_weightD18',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixTestableMarketConfigurationStorageAddress =
  '0xeB8202F536559bE65cD21c2c7e45F3ccB836e352' as const

export const perpsMarketSynthetixTestableMarketConfigurationStorageConfig = {
  address: perpsMarketSynthetixTestableMarketConfigurationStorageAddress,
  abi: perpsMarketSynthetixTestableMarketConfigurationStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/TestableMarketPoolInfoStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixTestableMarketPoolInfoStorageABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MarketPoolInfo_get_creditCapacityAmountD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MarketPoolInfo_get_pendingDebtD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketPoolInfo_set_creditCapacityAmountD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketPoolInfo_set_pendingDebtD18',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixTestableMarketPoolInfoStorageAddress =
  '0xD6413ea2b9A2232e4D4D285eb9eF680c362892D3' as const

export const perpsMarketSynthetixTestableMarketPoolInfoStorageConfig = {
  address: perpsMarketSynthetixTestableMarketPoolInfoStorageAddress,
  abi: perpsMarketSynthetixTestableMarketPoolInfoStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/TestableMarketStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixTestableMarketStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Market__testOnly_getOutstandingDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market__testOnly_inRangePools',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market__testOnly_outRangePools',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newCreditCapacityD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'newPoolMaxShareValueD18',
        internalType: 'int256',
        type: 'int256',
      },
    ],
    name: 'Market_adjustPoolShares',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'maxDistributedD18', internalType: 'int256', type: 'int256' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Market_bumpPools',
    outputs: [
      { name: '', internalType: 'int256', type: 'int256' },
      { name: '', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Market_distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      {
        name: 'creditCapacitySharesD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'maxShareValueD18', internalType: 'int256', type: 'int256' },
    ],
    name: 'Market_getCreditCapacityContribution',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_getDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_getDepositedCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_getLockedCreditCapacity',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Market_getPoolCreditCapacity',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_getReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'valueToDistributeD18', internalType: 'int256', type: 'int256' },
    ],
    name: 'Market_getTargetValuePerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get___reservedForLater1',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get___reservedForLater2',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get___reservedForLater3',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get___reservedForLater4',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_creditCapacityD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_id',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_lastDistributedMarketBalanceD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_marketAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'idx', internalType: 'address', type: 'address' },
    ],
    name: 'Market_get_maximumDepositableD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_minDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_minLiquidityRatioD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_netIssuanceD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_isCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxDebtShareValueD18', internalType: 'int256', type: 'int256' },
      {
        name: 'newCreditCapacityD18',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'Market_rebalancePools',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'Market_set___reservedForLater1',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Market_set___reservedForLater2',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Market_set___reservedForLater3',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Market_set___reservedForLater4',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'int128', type: 'int128' },
    ],
    name: 'Market_set_creditCapacityD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Market_set_id',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'int128', type: 'int128' },
    ],
    name: 'Market_set_lastDistributedMarketBalanceD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'address', type: 'address' },
    ],
    name: 'Market_set_marketAddress',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'idx', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Market_set_maximumDepositableD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'Market_set_minDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Market_set_minLiquidityRatioD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'int128', type: 'int128' },
    ],
    name: 'Market_set_netIssuanceD18',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_totalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const perpsMarketSynthetixTestableMarketStorageAddress =
  '0x330b2de1a041c2D78225337dfDf7F3c922dE684B' as const

export const perpsMarketSynthetixTestableMarketStorageConfig = {
  address: perpsMarketSynthetixTestableMarketStorageAddress,
  abi: perpsMarketSynthetixTestableMarketStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/TestablePoolStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixTestablePoolStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_currentAccountCollateral',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_currentAccountCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_currentVaultCollateral',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_currentVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_currentVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_distributeDebtToVaults',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_getRequiredMinDelegationTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'minLiquidityRatioD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'debtPerShareD18', internalType: 'int256', type: 'int256' },
    ],
    name: 'Pool_getSystemMaxValuePerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get___reserved1',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get___reserved2',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get___reserved3',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_id',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_lastConfigurationTime',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_totalVaultDebtsD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_totalWeightsD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_hasMarket',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'caller', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_onlyPoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_recalculateVaultCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'lastDelegationTime', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_requireMinDelegationTimeElapsed',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_resetVault',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set___reserved1',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set___reserved2',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set___reserved3',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_set_id',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set_lastConfigurationTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'string', type: 'string' },
    ],
    name: 'Pool_set_name',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_set_nominatedOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_set_owner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'int128', type: 'int128' },
    ],
    name: 'Pool_set_totalVaultDebtsD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_set_totalWeightsD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_updateAccountDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const perpsMarketSynthetixTestablePoolStorageAddress =
  '0x47eb1a48Ebd64aEcb709f5DDF3c17005Fa178964' as const

export const perpsMarketSynthetixTestablePoolStorageConfig = {
  address: perpsMarketSynthetixTestablePoolStorageAddress,
  abi: perpsMarketSynthetixTestablePoolStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/TestableRewardDistributionClaimStatusStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixTestableRewardDistributionClaimStatusStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistributionClaimStatus_get_lastRewardPerShareD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistributionClaimStatus_get_pendingSendD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'RewardDistributionClaimStatus_set_lastRewardPerShareD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'RewardDistributionClaimStatus_set_pendingSendD18',
      outputs: [],
    },
  ] as const

export const perpsMarketSynthetixTestableRewardDistributionClaimStatusStorageAddress =
  '0x83D0EA8FCD52b2994f0EE2aaE45E2254e32210Dd' as const

export const perpsMarketSynthetixTestableRewardDistributionClaimStatusStorageConfig =
  {
    address:
      perpsMarketSynthetixTestableRewardDistributionClaimStatusStorageAddress,
    abi: perpsMarketSynthetixTestableRewardDistributionClaimStatusStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/TestableRewardDistributionStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixTestableRewardDistributionStorageABI = [
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RewardDistribution_get___slotAvailableForFutureUse',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RewardDistribution_get_duration',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RewardDistribution_get_lastUpdate',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RewardDistribution_get_rewardPerShareD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RewardDistribution_get_scheduledValueD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RewardDistribution_get_start',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'RewardDistribution_set___slotAvailableForFutureUse',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint32', type: 'uint32' }],
    name: 'RewardDistribution_set_duration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint32', type: 'uint32' }],
    name: 'RewardDistribution_set_lastUpdate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'RewardDistribution_set_rewardPerShareD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'RewardDistribution_set_scheduledValueD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint64', type: 'uint64' }],
    name: 'RewardDistribution_set_start',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'totalSharesAmountD18',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'RewardDistribution_updateEntry',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const perpsMarketSynthetixTestableRewardDistributionStorageAddress =
  '0xC71E629349CbB297fc2dAA93bD9978E567A4BfC1' as const

export const perpsMarketSynthetixTestableRewardDistributionStorageConfig = {
  address: perpsMarketSynthetixTestableRewardDistributionStorageAddress,
  abi: perpsMarketSynthetixTestableRewardDistributionStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/TestableScalableMappingStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixTestableScalableMappingStorageABI = [
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'ScalableMapping_get',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'amountD18', internalType: 'uint256', type: 'uint256' }],
    name: 'ScalableMapping_getSharesForAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ScalableMapping_get_scaleModifierD27',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'idx', internalType: 'bytes32', type: 'bytes32' }],
    name: 'ScalableMapping_get_sharesD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ScalableMapping_get_totalSharesD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'valueD18', internalType: 'int256', type: 'int256' }],
    name: 'ScalableMapping_scale',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'actorId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'newActorValueD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ScalableMapping_set',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'ScalableMapping_set_scaleModifierD27',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'idx', internalType: 'bytes32', type: 'bytes32' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ScalableMapping_set_sharesD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'ScalableMapping_set_totalSharesD18',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ScalableMapping_totalAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

export const perpsMarketSynthetixTestableScalableMappingStorageAddress =
  '0xc97A01873B0d62B9d744110B3017b56F4727D202' as const

export const perpsMarketSynthetixTestableScalableMappingStorageConfig = {
  address: perpsMarketSynthetixTestableScalableMappingStorageAddress,
  abi: perpsMarketSynthetixTestableScalableMappingStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/TestableSystemPoolConfigurationStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixTestableSystemPoolConfigurationStorageABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SystemPoolConfiguration_get___reservedForFutureUse',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SystemPoolConfiguration_get_minLiquidityRatioD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SystemPoolConfiguration_get_preferredPool',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'SystemPoolConfiguration_set___reservedForFutureUse',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint256', type: 'uint256' }],
    name: 'SystemPoolConfiguration_set_minLiquidityRatioD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'SystemPoolConfiguration_set_preferredPool',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixTestableSystemPoolConfigurationStorageAddress =
  '0xdF8614E3a42dDC32Ec95Ed438869EB5B4d0F4Eb5' as const

export const perpsMarketSynthetixTestableSystemPoolConfigurationStorageConfig =
  {
    address: perpsMarketSynthetixTestableSystemPoolConfigurationStorageAddress,
    abi: perpsMarketSynthetixTestableSystemPoolConfigurationStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/TestableVaultEpochStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixTestableVaultEpochStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amountD18', internalType: 'int256', type: 'int256' },
    ],
    name: 'VaultEpoch_assignDebtToAccount',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'VaultEpoch_consolidateAccountDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'debtChangeD18', internalType: 'int256', type: 'int256' }],
    name: 'VaultEpoch_distributeDebtToAccounts',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'VaultEpoch_getAccountCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'idx', internalType: 'uint256', type: 'uint256' }],
    name: 'VaultEpoch_get_consolidatedDebtAmountsD18',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'idx', internalType: 'uint128', type: 'uint128' }],
    name: 'VaultEpoch_get_lastDelegationTime',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'VaultEpoch_get_totalConsolidatedDebtD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'VaultEpoch_get_unconsolidatedDebtD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'idx', internalType: 'uint256', type: 'uint256' },
      { name: 'val', internalType: 'int256', type: 'int256' },
    ],
    name: 'VaultEpoch_set_consolidatedDebtAmountsD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'idx', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'VaultEpoch_set_lastDelegationTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'VaultEpoch_set_totalConsolidatedDebtD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'VaultEpoch_set_unconsolidatedDebtD18',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'VaultEpoch_totalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralAmountD18', internalType: 'uint256', type: 'uint256' },
      { name: 'leverageD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'VaultEpoch_updateAccountPosition',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixTestableVaultEpochStorageAddress =
  '0xD0700302fC769DE76BB98C2b10a46325fEBda460' as const

export const perpsMarketSynthetixTestableVaultEpochStorageConfig = {
  address: perpsMarketSynthetixTestableVaultEpochStorageAddress,
  abi: perpsMarketSynthetixTestableVaultEpochStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/TestableVaultStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixTestableVaultStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'Vault_consolidateAccountDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'Vault_currentAccountCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_currentCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_currentDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'debtChangeD18', internalType: 'int256', type: 'int256' }],
    name: 'Vault_distributeDebtToAccounts',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_get___slotAvailableForFutureUse',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_get_epoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_get_prevTotalDebtD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'Vault_reset',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'bytes32', type: 'bytes32' }],
    name: 'Vault_set___slotAvailableForFutureUse',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint256', type: 'uint256' }],
    name: 'Vault_set_epoch',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'Vault_set_prevTotalDebtD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'collateralPriceD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Vault_updateCreditCapacity',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'int256', type: 'int256' },
      { name: '', internalType: 'int256', type: 'int256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'rewardId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'Vault_updateReward',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Vault_updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
] as const

export const perpsMarketSynthetixTestableVaultStorageAddress =
  '0xe8021266D2659aa320c114f9333502B38787a04B' as const

export const perpsMarketSynthetixTestableVaultStorageConfig = {
  address: perpsMarketSynthetixTestableVaultStorageAddress,
  abi: perpsMarketSynthetixTestableVaultStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/USDProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixUsdProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnWithAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destChainId', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferCrossChain',
    outputs: [{ name: 'feesPaid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const perpsMarketSynthetixUsdProxyAddress =
  '0x629673e90e428069AeB328DE4EF2040a7C22f723' as const

export const perpsMarketSynthetixUsdProxyConfig = {
  address: perpsMarketSynthetixUsdProxyAddress,
  abi: perpsMarketSynthetixUsdProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/USDRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixUsdRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnWithAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destChainId', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferCrossChain',
    outputs: [{ name: 'feesPaid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const perpsMarketSynthetixUsdRouterAddress =
  '0xCB575e07D1547d7A2b736e7087AFeeb80c4389e1' as const

export const perpsMarketSynthetixUsdRouterConfig = {
  address: perpsMarketSynthetixUsdRouterAddress,
  abi: perpsMarketSynthetixUsdRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/USDTokenModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixUsdTokenModuleABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnWithAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destChainId', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferCrossChain',
    outputs: [{ name: 'feesPaid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const perpsMarketSynthetixUsdTokenModuleAddress =
  '0xc4C69b65ca3BFF98839A63a23AFb639a445f51A6' as const

export const perpsMarketSynthetixUsdTokenModuleConfig = {
  address: perpsMarketSynthetixUsdTokenModuleAddress,
  abi: perpsMarketSynthetixUsdTokenModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/UtilsModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixUtilsModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'oracleManagerAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'configureOracleManager',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'k', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getConfig',
    outputs: [{ name: 'v', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ccipSend', internalType: 'address', type: 'address' },
      { name: 'ccipReceive', internalType: 'address', type: 'address' },
      { name: 'ccipTokenPool', internalType: 'address', type: 'address' },
    ],
    name: 'registerCcip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'k', internalType: 'bytes32', type: 'bytes32' },
      { name: 'v', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setConfig',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixUtilsModuleAddress =
  '0x8986BC8B1cDB92FE2a2E9765a34193dF5754254D' as const

export const perpsMarketSynthetixUtilsModuleConfig = {
  address: perpsMarketSynthetixUtilsModuleAddress,
  abi: perpsMarketSynthetixUtilsModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/VaultModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixVaultModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [
      { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientDelegation',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralAmount' },
  {
    type: 'error',
    inputs: [{ name: 'leverage', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidLeverage',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'leverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'newCollateralAmountD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPosition',
    outputs: [
      { name: 'collateralAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      {
        name: 'collateralizationRatio',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const perpsMarketSynthetixVaultModuleAddress =
  '0xb5A39c13b25cb5578BaC3f9C4DaA96e318281fC8' as const

export const perpsMarketSynthetixVaultModuleConfig = {
  address: perpsMarketSynthetixVaultModuleAddress,
  abi: perpsMarketSynthetixVaultModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/oracle_manager/CoreModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixOracleManagerCoreModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixOracleManagerCoreModuleAddress =
  '0x606ACC428283663F0EFA30c75f39912BdfF49364' as const

export const perpsMarketSynthetixOracleManagerCoreModuleConfig = {
  address: perpsMarketSynthetixOracleManagerCoreModuleAddress,
  abi: perpsMarketSynthetixOracleManagerCoreModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/oracle_manager/InitialProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixOracleManagerInitialProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const perpsMarketSynthetixOracleManagerInitialProxyAddress =
  '0xc0958BD10cB079b7A6bfeC7Fb695F75845830E5f' as const

export const perpsMarketSynthetixOracleManagerInitialProxyConfig = {
  address: perpsMarketSynthetixOracleManagerInitialProxyAddress,
  abi: perpsMarketSynthetixOracleManagerInitialProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/oracle_manager/NodeModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixOracleManagerNodeModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'deviation', internalType: 'int256', type: 'int256' }],
    name: 'DeviationToleranceExceeded',
  },
  { type: 'error', inputs: [], name: 'InvalidInputPrice' },
  {
    type: 'error',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
    name: 'InvalidNodeDefinition',
  },
  {
    type: 'error',
    inputs: [{ name: 'price', internalType: 'int256', type: 'int256' }],
    name: 'InvalidPrice',
  },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'NodeNotRegistered',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowInt56ToInt24' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint160' },
  { type: 'error', inputs: [], name: 'OverflowUint56ToInt56' },
  { type: 'error', inputs: [], name: 'StalenessToleranceExceeded' },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'UnprocessableNode',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'operation',
        internalType: 'enum ReducerNode.Operations',
        type: 'uint8',
      },
    ],
    name: 'UnsupportedOperation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'nodeId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'parameters',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'parents',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
        indexed: false,
      },
    ],
    name: 'NodeRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getNode',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'getNodeId',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'process',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeOutput.Data',
        type: 'tuple',
        components: [
          { name: 'price', internalType: 'int256', type: 'int256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
          {
            name: '__slotAvailableForFutureUse1',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: '__slotAvailableForFutureUse2',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'registerNode',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

export const perpsMarketSynthetixOracleManagerNodeModuleAddress =
  '0xBa8acc65Dfa24e4547932BE2b248B3666fE59ade' as const

export const perpsMarketSynthetixOracleManagerNodeModuleConfig = {
  address: perpsMarketSynthetixOracleManagerNodeModuleAddress,
  abi: perpsMarketSynthetixOracleManagerNodeModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/oracle_manager/OracleRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixOracleManagerOracleRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'deviation', internalType: 'int256', type: 'int256' }],
    name: 'DeviationToleranceExceeded',
  },
  { type: 'error', inputs: [], name: 'InvalidInputPrice' },
  {
    type: 'error',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
    name: 'InvalidNodeDefinition',
  },
  {
    type: 'error',
    inputs: [{ name: 'price', internalType: 'int256', type: 'int256' }],
    name: 'InvalidPrice',
  },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'NodeNotRegistered',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowInt56ToInt24' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint160' },
  { type: 'error', inputs: [], name: 'OverflowUint56ToInt56' },
  { type: 'error', inputs: [], name: 'StalenessToleranceExceeded' },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'UnprocessableNode',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'operation',
        internalType: 'enum ReducerNode.Operations',
        type: 'uint8',
      },
    ],
    name: 'UnsupportedOperation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'nodeId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'parameters',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'parents',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
        indexed: false,
      },
    ],
    name: 'NodeRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getNode',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'getNodeId',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'process',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeOutput.Data',
        type: 'tuple',
        components: [
          { name: 'price', internalType: 'int256', type: 'int256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
          {
            name: '__slotAvailableForFutureUse1',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: '__slotAvailableForFutureUse2',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'registerNode',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

export const perpsMarketSynthetixOracleManagerOracleRouterAddress =
  '0xB1Aa8b59aED40bfa56356bfa10e18E17a11449d1' as const

export const perpsMarketSynthetixOracleManagerOracleRouterConfig = {
  address: perpsMarketSynthetixOracleManagerOracleRouterAddress,
  abi: perpsMarketSynthetixOracleManagerOracleRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// perpsMarket/synthetix/oracle_manager/Proxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpsMarketSynthetixOracleManagerProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'deviation', internalType: 'int256', type: 'int256' }],
    name: 'DeviationToleranceExceeded',
  },
  { type: 'error', inputs: [], name: 'InvalidInputPrice' },
  {
    type: 'error',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
    name: 'InvalidNodeDefinition',
  },
  {
    type: 'error',
    inputs: [{ name: 'price', internalType: 'int256', type: 'int256' }],
    name: 'InvalidPrice',
  },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'NodeNotRegistered',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowInt56ToInt24' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint160' },
  { type: 'error', inputs: [], name: 'OverflowUint56ToInt56' },
  { type: 'error', inputs: [], name: 'StalenessToleranceExceeded' },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'UnprocessableNode',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'operation',
        internalType: 'enum ReducerNode.Operations',
        type: 'uint8',
      },
    ],
    name: 'UnsupportedOperation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'nodeId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'parameters',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'parents',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
        indexed: false,
      },
    ],
    name: 'NodeRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getNode',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'getNodeId',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'process',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeOutput.Data',
        type: 'tuple',
        components: [
          { name: 'price', internalType: 'int256', type: 'int256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
          {
            name: '__slotAvailableForFutureUse1',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: '__slotAvailableForFutureUse2',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'registerNode',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

export const perpsMarketSynthetixOracleManagerProxyAddress =
  '0xc0958BD10cB079b7A6bfeC7Fb695F75845830E5f' as const

export const perpsMarketSynthetixOracleManagerProxyConfig = {
  address: perpsMarketSynthetixOracleManagerProxyAddress,
  abi: perpsMarketSynthetixOracleManagerProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/AsyncOrderConfigurationModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketAsyncOrderConfigurationModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'strategyId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SettlementStrategyAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'strategyId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'enabled', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'SettlementStrategyUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'strategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'minimumUsdExchangeAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxRoundingLoss', internalType: 'uint256', type: 'uint256' },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'addSettlementStrategy',
    outputs: [{ name: 'strategyId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'strategyId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSettlementStrategy',
    outputs: [
      {
        name: 'settlementStrategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'minimumUsdExchangeAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxRoundingLoss', internalType: 'uint256', type: 'uint256' },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'strategyId', internalType: 'uint256', type: 'uint256' },
      { name: 'enabled', internalType: 'bool', type: 'bool' },
    ],
    name: 'setSettlementStrategyEnabled',
    outputs: [],
  },
] as const

export const spotMarketAsyncOrderConfigurationModuleAddress =
  '0x4E976A6D19743Ef83Aa1890282b69Ccd6AE8abde' as const

export const spotMarketAsyncOrderConfigurationModuleConfig = {
  address: spotMarketAsyncOrderConfigurationModuleAddress,
  abi: spotMarketAsyncOrderConfigurationModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/AsyncOrderModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketAsyncOrderModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'expirationTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForCancellation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientSharesAmount',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'transactionType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
      },
    ],
    name: 'InvalidAsyncTransactionType',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidClaim',
  },
  {
    type: 'error',
    inputs: [
      { name: 'minimumAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidCommitmentAmount',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidMarket',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'settlementStrategyId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InvalidSettlementStrategy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
      { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OrderAlreadySettled',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OrderCancelled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'orderType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
        indexed: true,
      },
      {
        name: 'amountProvided',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OrderCommitted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'cancelOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'orderType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
      },
      { name: 'amountProvided', internalType: 'uint256', type: 'uint256' },
      {
        name: 'settlementStrategyId',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'minimumSettlementAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'commitOrder',
    outputs: [
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getAsyncOrderClaim',
    outputs: [
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
] as const

export const spotMarketAsyncOrderModuleAddress =
  '0x3baAe54CC1C1D52ED68CE027d3da49B080C8e867' as const

export const spotMarketAsyncOrderModuleConfig = {
  address: spotMarketAsyncOrderModuleAddress,
  abi: spotMarketAsyncOrderModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/AsyncOrderSettlementModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketAsyncOrderSettlementModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidClaim',
  },
  { type: 'error', inputs: [], name: 'InvalidVerificationResponse' },
  {
    type: 'error',
    inputs: [
      { name: 'minimum', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'MinimumSettlementAmountNotMet',
  },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'urls', internalType: 'string[]', type: 'string[]' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'callbackFunction', internalType: 'bytes4', type: 'bytes4' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'OffchainLookup',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
      { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OrderAlreadySettled',
  },
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'startTime', internalType: 'uint256', type: 'uint256' },
      { name: 'expirationTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OutsideSettlementWindow',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'deviation', internalType: 'uint256', type: 'uint256' },
      { name: 'tolerance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PriceDeviationToleranceExceeded',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'strategyType',
        internalType: 'enum SettlementStrategy.Type',
        type: 'uint8',
      },
    ],
    name: 'SettlementStrategyNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'finalOrderAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'settler',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OrderSettled',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PRECISION',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'settleOrder',
    outputs: [
      { name: 'finalOrderAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'result', internalType: 'bytes', type: 'bytes' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'settlePythOrder',
    outputs: [
      { name: 'finalOrderAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
] as const

export const spotMarketAsyncOrderSettlementModuleAddress =
  '0x3C5834914e8132F27D6C14441EC9f45670665621' as const

export const spotMarketAsyncOrderSettlementModuleConfig = {
  address: spotMarketAsyncOrderSettlementModuleAddress,
  abi: spotMarketAsyncOrderSettlementModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/AtomicOrderModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketAtomicOrderModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'maxSynthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'synthAmountCharged', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ExceedsMaxSynthAmount',
  },
  {
    type: 'error',
    inputs: [
      { name: 'maxUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ExceedsMaxUsdAmount',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'current', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAmountReceived',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidMarket',
  },
  { type: 'error', inputs: [], name: 'InvalidPrices' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'synthReturned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthBought',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountReturned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthSold',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buy',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buyExactIn',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buyExactOut',
    outputs: [
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteBuyExactIn',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteBuyExactOut',
    outputs: [
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteSellExactIn',
    outputs: [
      { name: 'returnAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteSellExactOut',
    outputs: [
      { name: 'synthToBurn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sell',
    outputs: [
      { name: 'usdAmountReceived', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sellExactIn',
    outputs: [
      { name: 'returnAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxSynthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sellExactOut',
    outputs: [
      { name: 'synthToBurn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
] as const

export const spotMarketAtomicOrderModuleAddress =
  '0x056E8C8B0DB1E185972DD5cEA887207B9194594F' as const

export const spotMarketAtomicOrderModuleConfig = {
  address: spotMarketAtomicOrderModuleAddress,
  abi: spotMarketAtomicOrderModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/CoreModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketCoreModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const spotMarketCoreModuleAddress =
  '0xD8aAaD19E284C4481738d088A09A0f879dA8A3dF' as const

export const spotMarketCoreModuleConfig = {
  address: spotMarketCoreModuleAddress,
  abi: spotMarketCoreModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/FeatureFlagModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketFeatureFlagModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
] as const

export const spotMarketFeatureFlagModuleAddress =
  '0xD095c6fBd5Df38E37657a1B75bAC0Ec82D67A6Cb' as const

export const spotMarketFeatureFlagModuleConfig = {
  address: spotMarketFeatureFlagModuleAddress,
  abi: spotMarketFeatureFlagModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/FeeCollectorMock
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketFeeCollectorMockABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'feeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'tradeType', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'quoteFees',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_usdToken',
        internalType: 'contract ITokenModule',
        type: 'address',
      },
    ],
    name: 'setUsdToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'usdToken',
    outputs: [
      { name: '', internalType: 'contract ITokenModule', type: 'address' },
    ],
  },
] as const

export const spotMarketFeeCollectorMockAddress =
  '0x2710cCB2ce5F658099b0859fBf8d097DCDF30d62' as const

export const spotMarketFeeCollectorMockConfig = {
  address: spotMarketFeeCollectorMockAddress,
  abi: spotMarketFeeCollectorMockABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/InitialSpotMarketProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketInitialSpotMarketProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const spotMarketInitialSpotMarketProxyAddress =
  '0x989B0B56511de4CE09510b319ACE4808b803Efa1' as const

export const spotMarketInitialSpotMarketProxyConfig = {
  address: spotMarketInitialSpotMarketProxyAddress,
  abi: spotMarketInitialSpotMarketProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/MarketConfigurationModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketMarketConfigurationModuleABI = [
  {
    type: 'error',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidCollateralLeverage',
  },
  {
    type: 'error',
    inputs: [
      { name: 'invalidFeeCollector', internalType: 'address', type: 'address' },
    ],
    name: 'InvalidFeeCollectorInterface',
  },
  { type: 'error', inputs: [], name: 'InvalidWrapperFees' },
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'asyncFixedFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AsyncFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'atomicFixedFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AtomicFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'collateralLeverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CollateralLeverageSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'feeCollector',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeeCollectorSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'skewScale',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSkewScaleSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'utilizationFeeRate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketUtilizationFeesSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'sharePercentage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ReferrerShareUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'transactor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'fixedFeeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransactorFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'wrapFee',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'unwrapFee',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'WrapperFeesSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getCollateralLeverage',
    outputs: [
      { name: 'collateralLeverage', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'transactor', internalType: 'address', type: 'address' },
    ],
    name: 'getCustomTransactorFees',
    outputs: [
      { name: 'fixedFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getFeeCollector',
    outputs: [
      { name: 'feeCollector', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'atomicFixedFee', internalType: 'uint256', type: 'uint256' },
      { name: 'asyncFixedFee', internalType: 'uint256', type: 'uint256' },
      { name: 'wrapFee', internalType: 'int256', type: 'int256' },
      { name: 'unwrapFee', internalType: 'int256', type: 'int256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketSkewScale',
    outputs: [{ name: 'skewScale', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketUtilizationFees',
    outputs: [
      { name: 'utilizationFeeRate', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'getReferrerShare',
    outputs: [
      { name: 'sharePercentage', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncFixedFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAsyncFixedFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'atomicFixedFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAtomicFixedFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralLeverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCollateralLeverage',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'transactor', internalType: 'address', type: 'address' },
      { name: 'fixedFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCustomTransactorFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'feeCollector', internalType: 'address', type: 'address' },
    ],
    name: 'setFeeCollector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'skewScale', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMarketSkewScale',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'utilizationFeeRate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMarketUtilizationFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapFee', internalType: 'int256', type: 'int256' },
      { name: 'unwrapFee', internalType: 'int256', type: 'int256' },
    ],
    name: 'setWrapperFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'referrer', internalType: 'address', type: 'address' },
      { name: 'sharePercentage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateReferrerShare',
    outputs: [],
  },
] as const

export const spotMarketMarketConfigurationModuleAddress =
  '0x247F11B76c19C7cfD5998E19cD01a85F7547a0d0' as const

export const spotMarketMarketConfigurationModuleConfig = {
  address: spotMarketMarketConfigurationModuleAddress,
  abi: spotMarketMarketConfigurationModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/OracleVerifierMock
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketOracleVerifierMockABI = [
  { type: 'error', inputs: [], name: 'InsufficientFee' },
  { type: 'error', inputs: [], name: 'InvalidArgument' },
  { type: 'error', inputs: [], name: 'InvalidGovernanceDataSource' },
  { type: 'error', inputs: [], name: 'InvalidGovernanceMessage' },
  { type: 'error', inputs: [], name: 'InvalidGovernanceTarget' },
  { type: 'error', inputs: [], name: 'InvalidUpdateData' },
  { type: 'error', inputs: [], name: 'InvalidUpdateDataSource' },
  { type: 'error', inputs: [], name: 'InvalidWormholeVaa' },
  { type: 'error', inputs: [], name: 'NoFreshUpdate' },
  { type: 'error', inputs: [], name: 'OldGovernanceMessage' },
  { type: 'error', inputs: [], name: 'PriceFeedNotFound' },
  { type: 'error', inputs: [], name: 'PriceFeedNotFoundWithinRange' },
  { type: 'error', inputs: [], name: 'StalePrice' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'updateDataSize', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getUpdateFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'updateData', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'priceIds', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'minPublishTime', internalType: 'uint64', type: 'uint64' },
      { name: 'maxPublishTime', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'parsePriceFeedUpdates',
    outputs: [
      {
        name: 'priceFeeds',
        internalType: 'struct IPythVerifier.PriceFeed[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'price',
            internalType: 'struct IPythVerifier.Price',
            type: 'tuple',
            components: [
              { name: 'price', internalType: 'int64', type: 'int64' },
              { name: 'conf', internalType: 'uint64', type: 'uint64' },
              { name: 'expo', internalType: 'int32', type: 'int32' },
              { name: 'publishTime', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'emaPrice',
            internalType: 'struct IPythVerifier.Price',
            type: 'tuple',
            components: [
              { name: 'price', internalType: 'int64', type: 'int64' },
              { name: 'conf', internalType: 'uint64', type: 'uint64' },
              { name: 'expo', internalType: 'int32', type: 'int32' },
              { name: 'publishTime', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'price',
    outputs: [{ name: '', internalType: 'int64', type: 'int64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newPrice', internalType: 'int64', type: 'int64' }],
    name: 'setPrice',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'chainlinkBlob', internalType: 'bytes', type: 'bytes' }],
    name: 'verify',
    outputs: [
      { name: 'verifierResponse', internalType: 'bytes', type: 'bytes' },
    ],
  },
] as const

export const spotMarketOracleVerifierMockAddress =
  '0x204eC246f58d06878AbAD54542712C40F918a5E1' as const

export const spotMarketOracleVerifierMockConfig = {
  address: spotMarketOracleVerifierMockAddress,
  abi: spotMarketOracleVerifierMockABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/SpotMarketFactoryModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSpotMarketFactoryModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  { type: 'error', inputs: [], name: 'InvalidMarketOwner' },
  {
    type: 'error',
    inputs: [
      { name: 'synthImplementation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidSynthImplementation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominee',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthImplementationUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'buyFeedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sellFeedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'SynthPriceDataUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SynthRegistered',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'acceptMarketOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'synthOwner', internalType: 'address', type: 'address' },
    ],
    name: 'createSynth',
    outputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketOwner',
    outputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getSynth',
    outputs: [
      { name: 'synthAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getSynthImpl',
    outputs: [
      { name: 'implAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'minimumCredit',
    outputs: [
      { name: 'lockedAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'name',
    outputs: [{ name: 'marketName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateMarketOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'renounceMarketNomination',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'reportedDebt',
    outputs: [
      { name: 'reportedDebtAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'rate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setDecayRate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'setSynthImplementation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'synthetix',
        internalType: 'contract ISynthetixSystem',
        type: 'address',
      },
    ],
    name: 'setSynthetix',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: 'isSupported', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'buyFeedId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sellFeedId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'updatePriceData',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'upgradeSynthImpl',
    outputs: [],
  },
] as const

export const spotMarketSpotMarketFactoryModuleAddress =
  '0xD323493108275A43cBa2426dd1A119E9B817299c' as const

export const spotMarketSpotMarketFactoryModuleConfig = {
  address: spotMarketSpotMarketFactoryModuleAddress,
  abi: spotMarketSpotMarketFactoryModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/SpotMarketProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSpotMarketProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  { type: 'error', inputs: [], name: 'InvalidMarketOwner' },
  {
    type: 'error',
    inputs: [
      { name: 'synthImplementation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidSynthImplementation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominee',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthImplementationUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'buyFeedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sellFeedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'SynthPriceDataUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SynthRegistered',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'acceptMarketOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'synthOwner', internalType: 'address', type: 'address' },
    ],
    name: 'createSynth',
    outputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketOwner',
    outputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getSynth',
    outputs: [
      { name: 'synthAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getSynthImpl',
    outputs: [
      { name: 'implAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'minimumCredit',
    outputs: [
      { name: 'lockedAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'name',
    outputs: [{ name: 'marketName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateMarketOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'renounceMarketNomination',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'reportedDebt',
    outputs: [
      { name: 'reportedDebtAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'rate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setDecayRate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'setSynthImplementation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'synthetix',
        internalType: 'contract ISynthetixSystem',
        type: 'address',
      },
    ],
    name: 'setSynthetix',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: 'isSupported', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'buyFeedId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sellFeedId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'updatePriceData',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'upgradeSynthImpl',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'maxSynthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'synthAmountCharged', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ExceedsMaxSynthAmount',
  },
  {
    type: 'error',
    inputs: [
      { name: 'maxUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ExceedsMaxUsdAmount',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'current', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAmountReceived',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidMarket',
  },
  { type: 'error', inputs: [], name: 'InvalidPrices' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'synthReturned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthBought',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountReturned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthSold',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buy',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buyExactIn',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buyExactOut',
    outputs: [
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteBuyExactIn',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteBuyExactOut',
    outputs: [
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteSellExactIn',
    outputs: [
      { name: 'returnAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteSellExactOut',
    outputs: [
      { name: 'synthToBurn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sell',
    outputs: [
      { name: 'usdAmountReceived', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sellExactIn',
    outputs: [
      { name: 'returnAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxSynthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sellExactOut',
    outputs: [
      { name: 'synthToBurn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'expirationTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForCancellation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientSharesAmount',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'transactionType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
      },
    ],
    name: 'InvalidAsyncTransactionType',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidClaim',
  },
  {
    type: 'error',
    inputs: [
      { name: 'minimumAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidCommitmentAmount',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'settlementStrategyId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InvalidSettlementStrategy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
      { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OrderAlreadySettled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OrderCancelled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'orderType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
        indexed: true,
      },
      {
        name: 'amountProvided',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OrderCommitted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'cancelOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'orderType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
      },
      { name: 'amountProvided', internalType: 'uint256', type: 'uint256' },
      {
        name: 'settlementStrategyId',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'minimumSettlementAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'commitOrder',
    outputs: [
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getAsyncOrderClaim',
    outputs: [
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  { type: 'error', inputs: [], name: 'InvalidVerificationResponse' },
  {
    type: 'error',
    inputs: [
      { name: 'minimum', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'MinimumSettlementAmountNotMet',
  },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'urls', internalType: 'string[]', type: 'string[]' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'callbackFunction', internalType: 'bytes4', type: 'bytes4' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'OffchainLookup',
  },
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'startTime', internalType: 'uint256', type: 'uint256' },
      { name: 'expirationTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OutsideSettlementWindow',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'deviation', internalType: 'uint256', type: 'uint256' },
      { name: 'tolerance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PriceDeviationToleranceExceeded',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'strategyType',
        internalType: 'enum SettlementStrategy.Type',
        type: 'uint8',
      },
    ],
    name: 'SettlementStrategyNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'finalOrderAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'settler',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OrderSettled',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PRECISION',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'settleOrder',
    outputs: [
      { name: 'finalOrderAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'result', internalType: 'bytes', type: 'bytes' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'settlePythOrder',
    outputs: [
      { name: 'finalOrderAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'strategyId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SettlementStrategyAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'strategyId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'enabled', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'SettlementStrategyUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'strategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'minimumUsdExchangeAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxRoundingLoss', internalType: 'uint256', type: 'uint256' },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'addSettlementStrategy',
    outputs: [{ name: 'strategyId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'strategyId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSettlementStrategy',
    outputs: [
      {
        name: 'settlementStrategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'minimumUsdExchangeAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxRoundingLoss', internalType: 'uint256', type: 'uint256' },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'strategyId', internalType: 'uint256', type: 'uint256' },
      { name: 'enabled', internalType: 'bool', type: 'bool' },
    ],
    name: 'setSettlementStrategyEnabled',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralType' },
  {
    type: 'error',
    inputs: [
      { name: 'maxWrappableAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'currentSupply', internalType: 'uint256', type: 'uint256' },
      { name: 'amountToWrap', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'WrapperExceedsMaxAmount',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountUnwrapped',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'feesCollected',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SynthUnwrapped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountWrapped',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'feesCollected',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SynthWrapped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'wrapCollateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'maxWrappableAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WrapperSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapCollateralType', internalType: 'address', type: 'address' },
      { name: 'maxWrappableAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setWrapper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'unwrapAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unwrap',
    outputs: [
      {
        name: 'returnCollateralAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'wrap',
    outputs: [
      { name: 'amountToMint', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidCollateralLeverage',
  },
  {
    type: 'error',
    inputs: [
      { name: 'invalidFeeCollector', internalType: 'address', type: 'address' },
    ],
    name: 'InvalidFeeCollectorInterface',
  },
  { type: 'error', inputs: [], name: 'InvalidWrapperFees' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'asyncFixedFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AsyncFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'atomicFixedFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AtomicFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'collateralLeverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CollateralLeverageSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'feeCollector',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeeCollectorSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'skewScale',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSkewScaleSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'utilizationFeeRate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketUtilizationFeesSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'sharePercentage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ReferrerShareUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'transactor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'fixedFeeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransactorFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'wrapFee',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'unwrapFee',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'WrapperFeesSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getCollateralLeverage',
    outputs: [
      { name: 'collateralLeverage', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'transactor', internalType: 'address', type: 'address' },
    ],
    name: 'getCustomTransactorFees',
    outputs: [
      { name: 'fixedFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getFeeCollector',
    outputs: [
      { name: 'feeCollector', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'atomicFixedFee', internalType: 'uint256', type: 'uint256' },
      { name: 'asyncFixedFee', internalType: 'uint256', type: 'uint256' },
      { name: 'wrapFee', internalType: 'int256', type: 'int256' },
      { name: 'unwrapFee', internalType: 'int256', type: 'int256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketSkewScale',
    outputs: [{ name: 'skewScale', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketUtilizationFees',
    outputs: [
      { name: 'utilizationFeeRate', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'getReferrerShare',
    outputs: [
      { name: 'sharePercentage', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncFixedFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAsyncFixedFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'atomicFixedFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAtomicFixedFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralLeverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCollateralLeverage',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'transactor', internalType: 'address', type: 'address' },
      { name: 'fixedFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCustomTransactorFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'feeCollector', internalType: 'address', type: 'address' },
    ],
    name: 'setFeeCollector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'skewScale', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMarketSkewScale',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'utilizationFeeRate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMarketUtilizationFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapFee', internalType: 'int256', type: 'int256' },
      { name: 'unwrapFee', internalType: 'int256', type: 'int256' },
    ],
    name: 'setWrapperFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'referrer', internalType: 'address', type: 'address' },
      { name: 'sharePercentage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateReferrerShare',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
] as const

export const spotMarketSpotMarketProxyAddress =
  '0x989B0B56511de4CE09510b319ACE4808b803Efa1' as const

export const spotMarketSpotMarketProxyConfig = {
  address: spotMarketSpotMarketProxyAddress,
  abi: spotMarketSpotMarketProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/SpotMarketRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSpotMarketRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  { type: 'error', inputs: [], name: 'InvalidMarketOwner' },
  {
    type: 'error',
    inputs: [
      { name: 'synthImplementation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidSynthImplementation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominee',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthImplementationUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'buyFeedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sellFeedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'SynthPriceDataUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SynthRegistered',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'acceptMarketOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'synthOwner', internalType: 'address', type: 'address' },
    ],
    name: 'createSynth',
    outputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketOwner',
    outputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getSynth',
    outputs: [
      { name: 'synthAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getSynthImpl',
    outputs: [
      { name: 'implAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'minimumCredit',
    outputs: [
      { name: 'lockedAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'name',
    outputs: [{ name: 'marketName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateMarketOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'renounceMarketNomination',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'reportedDebt',
    outputs: [
      { name: 'reportedDebtAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'rate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setDecayRate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'setSynthImplementation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'synthetix',
        internalType: 'contract ISynthetixSystem',
        type: 'address',
      },
    ],
    name: 'setSynthetix',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: 'isSupported', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'buyFeedId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sellFeedId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'updatePriceData',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'upgradeSynthImpl',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'maxSynthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'synthAmountCharged', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ExceedsMaxSynthAmount',
  },
  {
    type: 'error',
    inputs: [
      { name: 'maxUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ExceedsMaxUsdAmount',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'current', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAmountReceived',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidMarket',
  },
  { type: 'error', inputs: [], name: 'InvalidPrices' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'synthReturned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthBought',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountReturned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthSold',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buy',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buyExactIn',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buyExactOut',
    outputs: [
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteBuyExactIn',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteBuyExactOut',
    outputs: [
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteSellExactIn',
    outputs: [
      { name: 'returnAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteSellExactOut',
    outputs: [
      { name: 'synthToBurn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sell',
    outputs: [
      { name: 'usdAmountReceived', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sellExactIn',
    outputs: [
      { name: 'returnAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxSynthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sellExactOut',
    outputs: [
      { name: 'synthToBurn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'expirationTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForCancellation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientSharesAmount',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'transactionType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
      },
    ],
    name: 'InvalidAsyncTransactionType',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidClaim',
  },
  {
    type: 'error',
    inputs: [
      { name: 'minimumAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidCommitmentAmount',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'settlementStrategyId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InvalidSettlementStrategy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
      { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OrderAlreadySettled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OrderCancelled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'orderType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
        indexed: true,
      },
      {
        name: 'amountProvided',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OrderCommitted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'cancelOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'orderType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
      },
      { name: 'amountProvided', internalType: 'uint256', type: 'uint256' },
      {
        name: 'settlementStrategyId',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'minimumSettlementAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'commitOrder',
    outputs: [
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getAsyncOrderClaim',
    outputs: [
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  { type: 'error', inputs: [], name: 'InvalidVerificationResponse' },
  {
    type: 'error',
    inputs: [
      { name: 'minimum', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'MinimumSettlementAmountNotMet',
  },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'urls', internalType: 'string[]', type: 'string[]' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'callbackFunction', internalType: 'bytes4', type: 'bytes4' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'OffchainLookup',
  },
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'startTime', internalType: 'uint256', type: 'uint256' },
      { name: 'expirationTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OutsideSettlementWindow',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'deviation', internalType: 'uint256', type: 'uint256' },
      { name: 'tolerance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PriceDeviationToleranceExceeded',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'strategyType',
        internalType: 'enum SettlementStrategy.Type',
        type: 'uint8',
      },
    ],
    name: 'SettlementStrategyNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'finalOrderAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'settler',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OrderSettled',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PRECISION',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'settleOrder',
    outputs: [
      { name: 'finalOrderAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'result', internalType: 'bytes', type: 'bytes' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'settlePythOrder',
    outputs: [
      { name: 'finalOrderAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'strategyId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SettlementStrategyAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'strategyId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'enabled', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'SettlementStrategyUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'strategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'minimumUsdExchangeAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxRoundingLoss', internalType: 'uint256', type: 'uint256' },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'addSettlementStrategy',
    outputs: [{ name: 'strategyId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'strategyId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSettlementStrategy',
    outputs: [
      {
        name: 'settlementStrategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'minimumUsdExchangeAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxRoundingLoss', internalType: 'uint256', type: 'uint256' },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'strategyId', internalType: 'uint256', type: 'uint256' },
      { name: 'enabled', internalType: 'bool', type: 'bool' },
    ],
    name: 'setSettlementStrategyEnabled',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralType' },
  {
    type: 'error',
    inputs: [
      { name: 'maxWrappableAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'currentSupply', internalType: 'uint256', type: 'uint256' },
      { name: 'amountToWrap', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'WrapperExceedsMaxAmount',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountUnwrapped',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'feesCollected',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SynthUnwrapped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountWrapped',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'feesCollected',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SynthWrapped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'wrapCollateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'maxWrappableAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WrapperSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapCollateralType', internalType: 'address', type: 'address' },
      { name: 'maxWrappableAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setWrapper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'unwrapAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unwrap',
    outputs: [
      {
        name: 'returnCollateralAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'wrap',
    outputs: [
      { name: 'amountToMint', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidCollateralLeverage',
  },
  {
    type: 'error',
    inputs: [
      { name: 'invalidFeeCollector', internalType: 'address', type: 'address' },
    ],
    name: 'InvalidFeeCollectorInterface',
  },
  { type: 'error', inputs: [], name: 'InvalidWrapperFees' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'asyncFixedFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AsyncFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'atomicFixedFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AtomicFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'collateralLeverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CollateralLeverageSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'feeCollector',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeeCollectorSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'skewScale',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSkewScaleSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'utilizationFeeRate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketUtilizationFeesSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'sharePercentage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ReferrerShareUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'transactor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'fixedFeeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransactorFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'wrapFee',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'unwrapFee',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'WrapperFeesSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getCollateralLeverage',
    outputs: [
      { name: 'collateralLeverage', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'transactor', internalType: 'address', type: 'address' },
    ],
    name: 'getCustomTransactorFees',
    outputs: [
      { name: 'fixedFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getFeeCollector',
    outputs: [
      { name: 'feeCollector', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'atomicFixedFee', internalType: 'uint256', type: 'uint256' },
      { name: 'asyncFixedFee', internalType: 'uint256', type: 'uint256' },
      { name: 'wrapFee', internalType: 'int256', type: 'int256' },
      { name: 'unwrapFee', internalType: 'int256', type: 'int256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketSkewScale',
    outputs: [{ name: 'skewScale', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketUtilizationFees',
    outputs: [
      { name: 'utilizationFeeRate', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'getReferrerShare',
    outputs: [
      { name: 'sharePercentage', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncFixedFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAsyncFixedFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'atomicFixedFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAtomicFixedFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralLeverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCollateralLeverage',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'transactor', internalType: 'address', type: 'address' },
      { name: 'fixedFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCustomTransactorFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'feeCollector', internalType: 'address', type: 'address' },
    ],
    name: 'setFeeCollector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'skewScale', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMarketSkewScale',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'utilizationFeeRate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMarketUtilizationFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapFee', internalType: 'int256', type: 'int256' },
      { name: 'unwrapFee', internalType: 'int256', type: 'int256' },
    ],
    name: 'setWrapperFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'referrer', internalType: 'address', type: 'address' },
      { name: 'sharePercentage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateReferrerShare',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
] as const

export const spotMarketSpotMarketRouterAddress =
  '0x0c92146fF95429d174C37B6c1D8Ec6f724768FE2' as const

export const spotMarketSpotMarketRouterConfig = {
  address: spotMarketSpotMarketRouterAddress,
  abi: spotMarketSpotMarketRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/SynthRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  { type: 'error', inputs: [], name: 'InvalidDecayRate' },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'advanceEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decayRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_rate', internalType: 'uint256', type: 'uint256' }],
    name: 'setDecayRate',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: 'supply', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const spotMarketSynthRouterAddress =
  '0xfc75ea9Dd5e3cB423A4aBF8Ea36F167fF7d1e8e3' as const

export const spotMarketSynthRouterConfig = {
  address: spotMarketSynthRouterAddress,
  abi: spotMarketSynthRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/SynthTokenModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthTokenModuleABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  { type: 'error', inputs: [], name: 'InvalidDecayRate' },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'advanceEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decayRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_rate', internalType: 'uint256', type: 'uint256' }],
    name: 'setDecayRate',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: 'supply', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const spotMarketSynthTokenModuleAddress =
  '0x38ADA250C264A1472cF232f415DD87623Be9fF16' as const

export const spotMarketSynthTokenModuleConfig = {
  address: spotMarketSynthTokenModuleAddress,
  abi: spotMarketSynthTokenModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/WrapperModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketWrapperModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'current', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAmountReceived',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralType' },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidMarket',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  {
    type: 'error',
    inputs: [
      { name: 'maxWrappableAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'currentSupply', internalType: 'uint256', type: 'uint256' },
      { name: 'amountToWrap', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'WrapperExceedsMaxAmount',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountUnwrapped',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'feesCollected',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SynthUnwrapped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountWrapped',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'feesCollected',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SynthWrapped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'wrapCollateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'maxWrappableAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WrapperSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapCollateralType', internalType: 'address', type: 'address' },
      { name: 'maxWrappableAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setWrapper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'unwrapAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unwrap',
    outputs: [
      {
        name: 'returnCollateralAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'wrap',
    outputs: [
      { name: 'amountToMint', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
] as const

export const spotMarketWrapperModuleAddress =
  '0x70E006fC659BE0DaC73175d475C1660DD308b89F' as const

export const spotMarketWrapperModuleConfig = {
  address: spotMarketWrapperModuleAddress,
  abi: spotMarketWrapperModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/AccountModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixAccountModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
] as const

export const spotMarketSynthetixAccountModuleAddress =
  '0x979B8a61B877fC74f84648d0dCdeb42391ddCE3b' as const

export const spotMarketSynthetixAccountModuleConfig = {
  address: spotMarketSynthetixAccountModuleAddress,
  abi: spotMarketSynthetixAccountModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/AccountProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixAccountProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'CannotSelfApprove',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IndexOverrun',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidTransferRecipient',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenAlreadyMinted',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenDoesNotExist',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
    name: 'setBaseTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

export const spotMarketSynthetixAccountProxyAddress =
  '0xE06fE85b65E0110f78638022FA9AD58c6b6c69bF' as const

export const spotMarketSynthetixAccountProxyConfig = {
  address: spotMarketSynthetixAccountProxyAddress,
  abi: spotMarketSynthetixAccountProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/AccountRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixAccountRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'CannotSelfApprove',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IndexOverrun',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidTransferRecipient',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenAlreadyMinted',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenDoesNotExist',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
    name: 'setBaseTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

export const spotMarketSynthetixAccountRouterAddress =
  '0x6EbD720D47b0E1754CFe423e93730597D86aC26C' as const

export const spotMarketSynthetixAccountRouterConfig = {
  address: spotMarketSynthetixAccountRouterAddress,
  abi: spotMarketSynthetixAccountRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/AccountTokenModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixAccountTokenModuleABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'CannotSelfApprove',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IndexOverrun',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidTransferRecipient',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenAlreadyMinted',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenDoesNotExist',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
    name: 'setBaseTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

export const spotMarketSynthetixAccountTokenModuleAddress =
  '0x790F6939f3Cb0b76A1465A340aEF9347d92ceEA0' as const

export const spotMarketSynthetixAccountTokenModuleConfig = {
  address: spotMarketSynthetixAccountTokenModuleAddress,
  abi: spotMarketSynthetixAccountTokenModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/AssociateDebtModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixAssociateDebtModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint256', type: 'uint256' },
      { name: 'poolId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotFundedByPool',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'updatedDebt',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'DebtAssociated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'associateDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const spotMarketSynthetixAssociateDebtModuleAddress =
  '0xbe7a510c72aE8c23560Ac7ada5d8765F9492BadA' as const

export const spotMarketSynthetixAssociateDebtModuleConfig = {
  address: spotMarketSynthetixAssociateDebtModuleAddress,
  abi: spotMarketSynthetixAssociateDebtModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/AssociatedSystemsModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixAssociatedSystemsModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
] as const

export const spotMarketSynthetixAssociatedSystemsModuleAddress =
  '0xf8d85923ef87fb6e6f3875805beE59E02C596076' as const

export const spotMarketSynthetixAssociatedSystemsModuleConfig = {
  address: spotMarketSynthetixAssociatedSystemsModuleAddress,
  abi: spotMarketSynthetixAssociatedSystemsModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/CollateralConfigurationModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixCollateralConfigurationModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
    ],
    name: 'CollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'configureCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hideDisabled', internalType: 'bool', type: 'bool' }],
    name: 'getCollateralConfigurations',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

export const spotMarketSynthetixCollateralConfigurationModuleAddress =
  '0x9541aA2A6b9E4874205BfB8a348F287049FE5d0A' as const

export const spotMarketSynthetixCollateralConfigurationModuleConfig = {
  address: spotMarketSynthetixCollateralConfigurationModuleAddress,
  abi: spotMarketSynthetixCollateralConfigurationModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/CollateralMock
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixCollateralMockABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const spotMarketSynthetixCollateralMockAddress =
  '0x152E3B07d82538FaE3A588E0F04d176c2Ec08fA1' as const

export const spotMarketSynthetixCollateralMockConfig = {
  address: spotMarketSynthetixCollateralMockAddress,
  abi: spotMarketSynthetixCollateralMockABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/CollateralModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixCollateralModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'currentTime', internalType: 'uint256', type: 'uint256' },
      { name: 'requiredTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'AccountActivityTimeoutPending',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockExpired',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cleanExpiredLocks',
    outputs: [{ name: 'cleared', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'expireTimestamp', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'createLock',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountAvailableCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountCollateral',
    outputs: [
      { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
      { name: 'totalAssigned', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLocked', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getLocks',
    outputs: [
      {
        name: 'locks',
        internalType: 'struct CollateralLock.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'amountD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'lockExpirationTime',
            internalType: 'uint64',
            type: 'uint64',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [],
  },
] as const

export const spotMarketSynthetixCollateralModuleAddress =
  '0x658731A2CCf51FE5c92eD51A72A32F33702Bc526' as const

export const spotMarketSynthetixCollateralModuleConfig = {
  address: spotMarketSynthetixCollateralModuleAddress,
  abi: spotMarketSynthetixCollateralModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/CoreProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixCoreProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint256', type: 'uint256' },
      { name: 'poolId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotFundedByPool',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'updatedDebt',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'DebtAssociated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'associateDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'currentTime', internalType: 'uint256', type: 'uint256' },
      { name: 'requiredTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'AccountActivityTimeoutPending',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockExpired',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cleanExpiredLocks',
    outputs: [{ name: 'cleared', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'expireTimestamp', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'createLock',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountAvailableCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountCollateral',
    outputs: [
      { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
      { name: 'totalAssigned', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLocked', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getLocks',
    outputs: [
      {
        name: 'locks',
        internalType: 'struct CollateralLock.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'amountD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'lockExpirationTime',
            internalType: 'uint64',
            type: 'uint64',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
    ],
    name: 'CollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'configureCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hideDisabled', internalType: 'bool', type: 'bool' }],
    name: 'getCollateralConfigurations',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    type: 'error',
    inputs: [{ name: 'currentDebt', internalType: 'int256', type: 'int256' }],
    name: 'InsufficientDebt',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IssuanceFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdBurned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdMinted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnUsd',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintUsd',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      { name: 'currentCRatio', internalType: 'uint256', type: 'uint256' },
      { name: 'cratio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForLiquidation',
  },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  { type: 'error', inputs: [], name: 'MustBeVaultLiquidated' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Liquidation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'VaultLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isPositionLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isVaultLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
    ],
    name: 'liquidate',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
      { name: 'maxUsd', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'liquidateVault',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToDeposit',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralDepositable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToWithdraw',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralWithdrawable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'systemAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MaximumMarketCollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'configureMaximumMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMarketCollateralAmount',
    outputs: [
      { name: 'collateralAmountD18', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMaximumMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketCollateral',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'IncorrectMarketInterface',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughLiquidity',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSystemFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMarketMinLiquidityRatio',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minDelegateTime',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
    ],
    name: 'SetMinDelegateTime',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'depositFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketMinDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketNetIssuance',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketTotalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOracleManager',
    outputs: [
      { name: '', internalType: 'contract IOracleManager', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUsdToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getWithdrawableMarketUsd',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'isMarketCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'registerMarket',
    outputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minDelegateTime', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'setMarketMinDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PreferredPoolSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'addApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getApprovedPools',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPreferredPool',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'removeApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'setPreferredPool',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolAlreadyExists',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'markets',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolConfigurationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNameUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnershipAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinLiquidityRatio',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'acceptPoolOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedPoolId', internalType: 'uint128', type: 'uint128' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'createPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getNominatedPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolName',
    outputs: [{ name: 'poolName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nominatedOwner', internalType: 'address', type: 'address' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'nominatePoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'renouncePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'revokePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newMarketConfigurations',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
    name: 'setPoolConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'name', internalType: 'string', type: 'string' },
    ],
    name: 'setPoolName',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    type: 'error',
    inputs: [{ name: 'distributor', internalType: 'address', type: 'address' }],
    name: 'RewardUnavailable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'start',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'duration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsDistributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRemoved',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'claimRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'start', internalType: 'uint64', type: 'uint64' },
      { name: 'duration', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'distributeRewards',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'getRewardRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'registerRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'removeRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'oracleManagerAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'configureOracleManager',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'k', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getConfig',
    outputs: [{ name: 'v', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ccipSend', internalType: 'address', type: 'address' },
      { name: 'ccipReceive', internalType: 'address', type: 'address' },
      { name: 'ccipTokenPool', internalType: 'address', type: 'address' },
    ],
    name: 'registerCcip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'k', internalType: 'bytes32', type: 'bytes32' },
      { name: 'v', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setConfig',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientDelegation',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralAmount' },
  {
    type: 'error',
    inputs: [{ name: 'leverage', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidLeverage',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'leverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'newCollateralAmountD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPosition',
    outputs: [
      { name: 'collateralAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      {
        name: 'collateralizationRatio',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const spotMarketSynthetixCoreProxyAddress =
  '0x381aeF01aB853657163ccbBFC1A993D49a77307c' as const

export const spotMarketSynthetixCoreProxyConfig = {
  address: spotMarketSynthetixCoreProxyAddress,
  abi: spotMarketSynthetixCoreProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/CoreRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixCoreRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint256', type: 'uint256' },
      { name: 'poolId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotFundedByPool',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'updatedDebt',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'DebtAssociated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'associateDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'currentTime', internalType: 'uint256', type: 'uint256' },
      { name: 'requiredTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'AccountActivityTimeoutPending',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockExpired',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cleanExpiredLocks',
    outputs: [{ name: 'cleared', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'expireTimestamp', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'createLock',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountAvailableCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountCollateral',
    outputs: [
      { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
      { name: 'totalAssigned', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLocked', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getLocks',
    outputs: [
      {
        name: 'locks',
        internalType: 'struct CollateralLock.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'amountD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'lockExpirationTime',
            internalType: 'uint64',
            type: 'uint64',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
    ],
    name: 'CollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'configureCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hideDisabled', internalType: 'bool', type: 'bool' }],
    name: 'getCollateralConfigurations',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    type: 'error',
    inputs: [{ name: 'currentDebt', internalType: 'int256', type: 'int256' }],
    name: 'InsufficientDebt',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IssuanceFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdBurned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdMinted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnUsd',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintUsd',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      { name: 'currentCRatio', internalType: 'uint256', type: 'uint256' },
      { name: 'cratio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForLiquidation',
  },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  { type: 'error', inputs: [], name: 'MustBeVaultLiquidated' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Liquidation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'VaultLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isPositionLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isVaultLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
    ],
    name: 'liquidate',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
      { name: 'maxUsd', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'liquidateVault',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToDeposit',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralDepositable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToWithdraw',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralWithdrawable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'systemAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MaximumMarketCollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'configureMaximumMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMarketCollateralAmount',
    outputs: [
      { name: 'collateralAmountD18', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMaximumMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketCollateral',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'IncorrectMarketInterface',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughLiquidity',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSystemFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMarketMinLiquidityRatio',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minDelegateTime',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
    ],
    name: 'SetMinDelegateTime',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'depositFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketMinDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketNetIssuance',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketTotalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOracleManager',
    outputs: [
      { name: '', internalType: 'contract IOracleManager', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUsdToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getWithdrawableMarketUsd',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'isMarketCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'registerMarket',
    outputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minDelegateTime', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'setMarketMinDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PreferredPoolSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'addApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getApprovedPools',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPreferredPool',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'removeApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'setPreferredPool',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolAlreadyExists',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'markets',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolConfigurationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNameUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnershipAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinLiquidityRatio',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'acceptPoolOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedPoolId', internalType: 'uint128', type: 'uint128' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'createPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getNominatedPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolName',
    outputs: [{ name: 'poolName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nominatedOwner', internalType: 'address', type: 'address' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'nominatePoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'renouncePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'revokePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newMarketConfigurations',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
    name: 'setPoolConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'name', internalType: 'string', type: 'string' },
    ],
    name: 'setPoolName',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    type: 'error',
    inputs: [{ name: 'distributor', internalType: 'address', type: 'address' }],
    name: 'RewardUnavailable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'start',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'duration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsDistributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRemoved',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'claimRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'start', internalType: 'uint64', type: 'uint64' },
      { name: 'duration', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'distributeRewards',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'getRewardRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'registerRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'removeRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'oracleManagerAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'configureOracleManager',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'k', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getConfig',
    outputs: [{ name: 'v', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ccipSend', internalType: 'address', type: 'address' },
      { name: 'ccipReceive', internalType: 'address', type: 'address' },
      { name: 'ccipTokenPool', internalType: 'address', type: 'address' },
    ],
    name: 'registerCcip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'k', internalType: 'bytes32', type: 'bytes32' },
      { name: 'v', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setConfig',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientDelegation',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralAmount' },
  {
    type: 'error',
    inputs: [{ name: 'leverage', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidLeverage',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'leverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'newCollateralAmountD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPosition',
    outputs: [
      { name: 'collateralAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      {
        name: 'collateralizationRatio',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const spotMarketSynthetixCoreRouterAddress =
  '0x91752B65232fD32f9982273974c6aE0789e95697' as const

export const spotMarketSynthetixCoreRouterConfig = {
  address: spotMarketSynthetixCoreRouterAddress,
  abi: spotMarketSynthetixCoreRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/FeatureFlagModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixFeatureFlagModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
] as const

export const spotMarketSynthetixFeatureFlagModuleAddress =
  '0x002AB3794418cCbFE9bBAad708C3Fa30B94e0e0F' as const

export const spotMarketSynthetixFeatureFlagModuleConfig = {
  address: spotMarketSynthetixFeatureFlagModuleAddress,
  abi: spotMarketSynthetixFeatureFlagModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/InitialCoreProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixInitialCoreProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const spotMarketSynthetixInitialCoreProxyAddress =
  '0x381aeF01aB853657163ccbBFC1A993D49a77307c' as const

export const spotMarketSynthetixInitialCoreProxyConfig = {
  address: spotMarketSynthetixInitialCoreProxyAddress,
  abi: spotMarketSynthetixInitialCoreProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/InitialModuleBundle
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixInitialModuleBundleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const spotMarketSynthetixInitialModuleBundleAddress =
  '0x2F4a58770bDaBFef1f3Cee0eF6Ad05Db4F4d954E' as const

export const spotMarketSynthetixInitialModuleBundleConfig = {
  address: spotMarketSynthetixInitialModuleBundleAddress,
  abi: spotMarketSynthetixInitialModuleBundleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/IssueUSDModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixIssueUsdModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'currentDebt', internalType: 'int256', type: 'int256' }],
    name: 'InsufficientDebt',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IssuanceFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdBurned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdMinted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnUsd',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintUsd',
    outputs: [],
  },
] as const

export const spotMarketSynthetixIssueUsdModuleAddress =
  '0x1CD17c0acF7f48f3D6416b542E8f623b47e013ab' as const

export const spotMarketSynthetixIssueUsdModuleConfig = {
  address: spotMarketSynthetixIssueUsdModuleAddress,
  abi: spotMarketSynthetixIssueUsdModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/LiquidationModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixLiquidationModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      { name: 'currentCRatio', internalType: 'uint256', type: 'uint256' },
      { name: 'cratio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForLiquidation',
  },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  { type: 'error', inputs: [], name: 'MustBeVaultLiquidated' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Liquidation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'VaultLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isPositionLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isVaultLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
    ],
    name: 'liquidate',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
      { name: 'maxUsd', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'liquidateVault',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
] as const

export const spotMarketSynthetixLiquidationModuleAddress =
  '0x2cBB85cC49F73d87CACdeEA408ea196176Be60C9' as const

export const spotMarketSynthetixLiquidationModuleConfig = {
  address: spotMarketSynthetixLiquidationModuleAddress,
  abi: spotMarketSynthetixLiquidationModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/MarketCollateralModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixMarketCollateralModuleABI = [
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToDeposit',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralDepositable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToWithdraw',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralWithdrawable',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'systemAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MaximumMarketCollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'configureMaximumMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMarketCollateralAmount',
    outputs: [
      { name: 'collateralAmountD18', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMaximumMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketCollateral',
    outputs: [],
  },
] as const

export const spotMarketSynthetixMarketCollateralModuleAddress =
  '0xa61825604f9Bb29E8A9dF85b4bDb663B358D6638' as const

export const spotMarketSynthetixMarketCollateralModuleConfig = {
  address: spotMarketSynthetixMarketCollateralModuleAddress,
  abi: spotMarketSynthetixMarketCollateralModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/MarketManagerModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixMarketManagerModuleABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'IncorrectMarketInterface',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughLiquidity',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSystemFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMarketMinLiquidityRatio',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minDelegateTime',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
    ],
    name: 'SetMinDelegateTime',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'depositFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketMinDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketNetIssuance',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketTotalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOracleManager',
    outputs: [
      { name: '', internalType: 'contract IOracleManager', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUsdToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getWithdrawableMarketUsd',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'isMarketCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'registerMarket',
    outputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minDelegateTime', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'setMarketMinDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
] as const

export const spotMarketSynthetixMarketManagerModuleAddress =
  '0x0137ecb811330763277daE159B6Cf9306645c18f' as const

export const spotMarketSynthetixMarketManagerModuleConfig = {
  address: spotMarketSynthetixMarketManagerModuleAddress,
  abi: spotMarketSynthetixMarketManagerModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/MulticallModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixMulticallModuleABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
] as const

export const spotMarketSynthetixMulticallModuleAddress =
  '0xb61926f01cAD38f51236F861dABcC59626F2078d' as const

export const spotMarketSynthetixMulticallModuleConfig = {
  address: spotMarketSynthetixMulticallModuleAddress,
  abi: spotMarketSynthetixMulticallModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/PoolConfigurationModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixPoolConfigurationModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PreferredPoolSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'addApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getApprovedPools',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPreferredPool',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'removeApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'setPreferredPool',
    outputs: [],
  },
] as const

export const spotMarketSynthetixPoolConfigurationModuleAddress =
  '0x58fEF24F50d5658F7269aE804cF50dD1890992f6' as const

export const spotMarketSynthetixPoolConfigurationModuleConfig = {
  address: spotMarketSynthetixPoolConfigurationModuleAddress,
  abi: spotMarketSynthetixPoolConfigurationModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/PoolModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixPoolModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolAlreadyExists',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'markets',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolConfigurationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNameUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnershipAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinLiquidityRatio',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'acceptPoolOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedPoolId', internalType: 'uint128', type: 'uint128' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'createPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getNominatedPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolName',
    outputs: [{ name: 'poolName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nominatedOwner', internalType: 'address', type: 'address' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'nominatePoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'renouncePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'revokePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newMarketConfigurations',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
    name: 'setPoolConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'name', internalType: 'string', type: 'string' },
    ],
    name: 'setPoolName',
    outputs: [],
  },
] as const

export const spotMarketSynthetixPoolModuleAddress =
  '0xd14aA7Ac9f07c98F3C2984e3cFCC1Bcc5B766701' as const

export const spotMarketSynthetixPoolModuleConfig = {
  address: spotMarketSynthetixPoolModuleAddress,
  abi: spotMarketSynthetixPoolModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/RewardsManagerModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixRewardsManagerModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    type: 'error',
    inputs: [{ name: 'distributor', internalType: 'address', type: 'address' }],
    name: 'RewardUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'start',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'duration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsDistributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRemoved',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'claimRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'start', internalType: 'uint64', type: 'uint64' },
      { name: 'duration', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'distributeRewards',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'getRewardRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'registerRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'removeRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
] as const

export const spotMarketSynthetixRewardsManagerModuleAddress =
  '0x6E842803c349F55447F370d516f38461f45A6ed2' as const

export const spotMarketSynthetixRewardsManagerModuleConfig = {
  address: spotMarketSynthetixRewardsManagerModuleAddress,
  abi: spotMarketSynthetixRewardsManagerModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/TestableAccountRBACStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixTestableAccountRbacStorageABI = [
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'AccountRBAC_authorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'AccountRBAC_get_owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'AccountRBAC_grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'AccountRBAC_hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'AccountRBAC_isPermissionValid',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'AccountRBAC_revokeAllPermissions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'AccountRBAC_revokePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'AccountRBAC_setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'address', type: 'address' }],
    name: 'AccountRBAC_set_owner',
    outputs: [],
  },
] as const

export const spotMarketSynthetixTestableAccountRbacStorageAddress =
  '0x15979A635FF16F303261AC1392f7d000614458Cf' as const

export const spotMarketSynthetixTestableAccountRbacStorageConfig = {
  address: spotMarketSynthetixTestableAccountRbacStorageAddress,
  abi: spotMarketSynthetixTestableAccountRbacStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/TestableAccountStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixTestableAccountStorageABI = [
  {
    type: 'error',
    inputs: [
      { name: 'requestedAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAccountCollateral',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Account_getAssignedCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Account_getCollateralTotals',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Account_get___slot2AvailableForFutureUse',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Account_get___slotAvailableForFutureUse',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Account_get_id',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Account_get_lastInteraction',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Account_recordInteraction',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amountD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Account_requireSufficientCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Account_set___slot2AvailableForFutureUse',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Account_set___slotAvailableForFutureUse',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Account_set_id',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Account_set_lastInteraction',
    outputs: [],
  },
] as const

export const spotMarketSynthetixTestableAccountStorageAddress =
  '0xe3f20c7Af53a6E3EAd26d40b82bA8283D2B1b94d' as const

export const spotMarketSynthetixTestableAccountStorageConfig = {
  address: spotMarketSynthetixTestableAccountStorageAddress,
  abi: spotMarketSynthetixTestableAccountStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/TestableCollateralConfigurationStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixTestableCollateralConfigurationStorageABI = [
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [
      { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientDelegation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'token', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralConfiguration_collateralEnabled',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'CollateralConfiguration_convertTokenToSystemAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_token', internalType: 'address', type: 'address' }],
    name: 'CollateralConfiguration_getCollateralPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_token', internalType: 'address', type: 'address' }],
    name: 'CollateralConfiguration_get_depositingEnabled',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_token', internalType: 'address', type: 'address' }],
    name: 'CollateralConfiguration_get_issuanceRatioD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_token', internalType: 'address', type: 'address' }],
    name: 'CollateralConfiguration_get_liquidationRatioD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_token', internalType: 'address', type: 'address' }],
    name: 'CollateralConfiguration_get_liquidationRewardD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_token', internalType: 'address', type: 'address' }],
    name: 'CollateralConfiguration_get_minDelegationD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_token', internalType: 'address', type: 'address' }],
    name: 'CollateralConfiguration_get_oracleNodeId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_token', internalType: 'address', type: 'address' }],
    name: 'CollateralConfiguration_get_tokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'amountD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'CollateralConfiguration_requireSufficientDelegation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'CollateralConfiguration_set',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'bool', type: 'bool' },
    ],
    name: 'CollateralConfiguration_set_depositingEnabled',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'CollateralConfiguration_set_issuanceRatioD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'CollateralConfiguration_set_liquidationRatioD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'CollateralConfiguration_set_liquidationRewardD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'CollateralConfiguration_set_minDelegationD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'CollateralConfiguration_set_oracleNodeId',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralConfiguration_set_tokenAddress',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'debtD18', internalType: 'uint256', type: 'uint256' },
      { name: 'collateralValueD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'CollateralConfiguration_verifyIssuanceRatio',
    outputs: [],
  },
] as const

export const spotMarketSynthetixTestableCollateralConfigurationStorageAddress =
  '0x6a6FC716ce286bAb956861054448e324d790A505' as const

export const spotMarketSynthetixTestableCollateralConfigurationStorageConfig = {
  address: spotMarketSynthetixTestableCollateralConfigurationStorageAddress,
  abi: spotMarketSynthetixTestableCollateralConfigurationStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/TestableCollateralLockStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixTestableCollateralLockStorageABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CollateralLock_get_amountD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CollateralLock_get_lockExpirationTime',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'CollateralLock_set_amountD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint64', type: 'uint64' }],
    name: 'CollateralLock_set_lockExpirationTime',
    outputs: [],
  },
] as const

export const spotMarketSynthetixTestableCollateralLockStorageAddress =
  '0xc08e5Df07c71b628D3c3c6DD5E3A7639c33b65CC' as const

export const spotMarketSynthetixTestableCollateralLockStorageConfig = {
  address: spotMarketSynthetixTestableCollateralLockStorageAddress,
  abi: spotMarketSynthetixTestableCollateralLockStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/TestableCollateralStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixTestableCollateralStorageABI = [
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amountD18', internalType: 'uint256', type: 'uint256' }],
    name: 'Collateral_decreaseAvailableCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Collateral_getTotalLocked',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Collateral_get_amountAvailableForDelegationD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amountD18', internalType: 'uint256', type: 'uint256' }],
    name: 'Collateral_increaseAvailableCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint256', type: 'uint256' }],
    name: 'Collateral_set_amountAvailableForDelegationD18',
    outputs: [],
  },
] as const

export const spotMarketSynthetixTestableCollateralStorageAddress =
  '0x54bEF792148aBE24D48653ab0feF6Ddd94F7eb62' as const

export const spotMarketSynthetixTestableCollateralStorageConfig = {
  address: spotMarketSynthetixTestableCollateralStorageAddress,
  abi: spotMarketSynthetixTestableCollateralStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/TestableDistributionActorStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixTestableDistributionActorStorageABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DistributionActor_get_lastValuePerShareD27',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DistributionActor_get_sharesD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'DistributionActor_set_lastValuePerShareD27',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'DistributionActor_set_sharesD18',
    outputs: [],
  },
] as const

export const spotMarketSynthetixTestableDistributionActorStorageAddress =
  '0x407dF88963443940815d706Ff0Dbba029317e10E' as const

export const spotMarketSynthetixTestableDistributionActorStorageConfig = {
  address: spotMarketSynthetixTestableDistributionActorStorageAddress,
  abi: spotMarketSynthetixTestableDistributionActorStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/TestableDistributionStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixTestableDistributionStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'Distribution_accumulateActor',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'valueD18', internalType: 'int256', type: 'int256' }],
    name: 'Distribution_distributeValue',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'Distribution_getActorShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'Distribution_getActorValueChange',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Distribution_getValuePerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Distribution_get_totalSharesD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Distribution_get_valuePerShareD27',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'actorId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'newActorSharesD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Distribution_setActorShares',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'Distribution_set_totalSharesD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'Distribution_set_valuePerShareD27',
    outputs: [],
  },
] as const

export const spotMarketSynthetixTestableDistributionStorageAddress =
  '0x504AFA1d0Dba634478662145c733248f739064Af' as const

export const spotMarketSynthetixTestableDistributionStorageConfig = {
  address: spotMarketSynthetixTestableDistributionStorageAddress,
  abi: spotMarketSynthetixTestableDistributionStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/TestableMarketConfigurationStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixTestableMarketConfigurationStorageABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MarketConfiguration_get_marketId',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MarketConfiguration_get_maxDebtShareValueD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MarketConfiguration_get_weightD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketConfiguration_set_marketId',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'MarketConfiguration_set_maxDebtShareValueD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketConfiguration_set_weightD18',
    outputs: [],
  },
] as const

export const spotMarketSynthetixTestableMarketConfigurationStorageAddress =
  '0xeB8202F536559bE65cD21c2c7e45F3ccB836e352' as const

export const spotMarketSynthetixTestableMarketConfigurationStorageConfig = {
  address: spotMarketSynthetixTestableMarketConfigurationStorageAddress,
  abi: spotMarketSynthetixTestableMarketConfigurationStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/TestableMarketPoolInfoStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixTestableMarketPoolInfoStorageABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MarketPoolInfo_get_creditCapacityAmountD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MarketPoolInfo_get_pendingDebtD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketPoolInfo_set_creditCapacityAmountD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketPoolInfo_set_pendingDebtD18',
    outputs: [],
  },
] as const

export const spotMarketSynthetixTestableMarketPoolInfoStorageAddress =
  '0xD6413ea2b9A2232e4D4D285eb9eF680c362892D3' as const

export const spotMarketSynthetixTestableMarketPoolInfoStorageConfig = {
  address: spotMarketSynthetixTestableMarketPoolInfoStorageAddress,
  abi: spotMarketSynthetixTestableMarketPoolInfoStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/TestableMarketStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixTestableMarketStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Market__testOnly_getOutstandingDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market__testOnly_inRangePools',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market__testOnly_outRangePools',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newCreditCapacityD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'newPoolMaxShareValueD18',
        internalType: 'int256',
        type: 'int256',
      },
    ],
    name: 'Market_adjustPoolShares',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'maxDistributedD18', internalType: 'int256', type: 'int256' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Market_bumpPools',
    outputs: [
      { name: '', internalType: 'int256', type: 'int256' },
      { name: '', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Market_distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      {
        name: 'creditCapacitySharesD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'maxShareValueD18', internalType: 'int256', type: 'int256' },
    ],
    name: 'Market_getCreditCapacityContribution',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_getDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_getDepositedCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_getLockedCreditCapacity',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Market_getPoolCreditCapacity',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_getReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'valueToDistributeD18', internalType: 'int256', type: 'int256' },
    ],
    name: 'Market_getTargetValuePerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get___reservedForLater1',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get___reservedForLater2',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get___reservedForLater3',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get___reservedForLater4',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_creditCapacityD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_id',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_lastDistributedMarketBalanceD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_marketAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'idx', internalType: 'address', type: 'address' },
    ],
    name: 'Market_get_maximumDepositableD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_minDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_minLiquidityRatioD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_netIssuanceD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_isCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxDebtShareValueD18', internalType: 'int256', type: 'int256' },
      {
        name: 'newCreditCapacityD18',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'Market_rebalancePools',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'Market_set___reservedForLater1',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Market_set___reservedForLater2',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Market_set___reservedForLater3',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Market_set___reservedForLater4',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'int128', type: 'int128' },
    ],
    name: 'Market_set_creditCapacityD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Market_set_id',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'int128', type: 'int128' },
    ],
    name: 'Market_set_lastDistributedMarketBalanceD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'address', type: 'address' },
    ],
    name: 'Market_set_marketAddress',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'idx', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Market_set_maximumDepositableD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'Market_set_minDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Market_set_minLiquidityRatioD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'int128', type: 'int128' },
    ],
    name: 'Market_set_netIssuanceD18',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_totalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const spotMarketSynthetixTestableMarketStorageAddress =
  '0x330b2de1a041c2D78225337dfDf7F3c922dE684B' as const

export const spotMarketSynthetixTestableMarketStorageConfig = {
  address: spotMarketSynthetixTestableMarketStorageAddress,
  abi: spotMarketSynthetixTestableMarketStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/TestablePoolStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixTestablePoolStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_currentAccountCollateral',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_currentAccountCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_currentVaultCollateral',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_currentVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_currentVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_distributeDebtToVaults',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_getRequiredMinDelegationTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'minLiquidityRatioD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'debtPerShareD18', internalType: 'int256', type: 'int256' },
    ],
    name: 'Pool_getSystemMaxValuePerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get___reserved1',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get___reserved2',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get___reserved3',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_id',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_lastConfigurationTime',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_totalVaultDebtsD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_totalWeightsD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_hasMarket',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'caller', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_onlyPoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_recalculateVaultCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'lastDelegationTime', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_requireMinDelegationTimeElapsed',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_resetVault',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set___reserved1',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set___reserved2',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set___reserved3',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_set_id',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set_lastConfigurationTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'string', type: 'string' },
    ],
    name: 'Pool_set_name',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_set_nominatedOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_set_owner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'int128', type: 'int128' },
    ],
    name: 'Pool_set_totalVaultDebtsD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_set_totalWeightsD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_updateAccountDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const spotMarketSynthetixTestablePoolStorageAddress =
  '0x47eb1a48Ebd64aEcb709f5DDF3c17005Fa178964' as const

export const spotMarketSynthetixTestablePoolStorageConfig = {
  address: spotMarketSynthetixTestablePoolStorageAddress,
  abi: spotMarketSynthetixTestablePoolStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/TestableRewardDistributionClaimStatusStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixTestableRewardDistributionClaimStatusStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistributionClaimStatus_get_lastRewardPerShareD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistributionClaimStatus_get_pendingSendD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'RewardDistributionClaimStatus_set_lastRewardPerShareD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'RewardDistributionClaimStatus_set_pendingSendD18',
      outputs: [],
    },
  ] as const

export const spotMarketSynthetixTestableRewardDistributionClaimStatusStorageAddress =
  '0x83D0EA8FCD52b2994f0EE2aaE45E2254e32210Dd' as const

export const spotMarketSynthetixTestableRewardDistributionClaimStatusStorageConfig =
  {
    address:
      spotMarketSynthetixTestableRewardDistributionClaimStatusStorageAddress,
    abi: spotMarketSynthetixTestableRewardDistributionClaimStatusStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/TestableRewardDistributionStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixTestableRewardDistributionStorageABI = [
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RewardDistribution_get___slotAvailableForFutureUse',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RewardDistribution_get_duration',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RewardDistribution_get_lastUpdate',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RewardDistribution_get_rewardPerShareD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RewardDistribution_get_scheduledValueD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RewardDistribution_get_start',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'RewardDistribution_set___slotAvailableForFutureUse',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint32', type: 'uint32' }],
    name: 'RewardDistribution_set_duration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint32', type: 'uint32' }],
    name: 'RewardDistribution_set_lastUpdate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'RewardDistribution_set_rewardPerShareD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'RewardDistribution_set_scheduledValueD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint64', type: 'uint64' }],
    name: 'RewardDistribution_set_start',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'totalSharesAmountD18',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'RewardDistribution_updateEntry',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const spotMarketSynthetixTestableRewardDistributionStorageAddress =
  '0xC71E629349CbB297fc2dAA93bD9978E567A4BfC1' as const

export const spotMarketSynthetixTestableRewardDistributionStorageConfig = {
  address: spotMarketSynthetixTestableRewardDistributionStorageAddress,
  abi: spotMarketSynthetixTestableRewardDistributionStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/TestableScalableMappingStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixTestableScalableMappingStorageABI = [
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'ScalableMapping_get',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'amountD18', internalType: 'uint256', type: 'uint256' }],
    name: 'ScalableMapping_getSharesForAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ScalableMapping_get_scaleModifierD27',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'idx', internalType: 'bytes32', type: 'bytes32' }],
    name: 'ScalableMapping_get_sharesD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ScalableMapping_get_totalSharesD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'valueD18', internalType: 'int256', type: 'int256' }],
    name: 'ScalableMapping_scale',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'actorId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'newActorValueD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ScalableMapping_set',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'ScalableMapping_set_scaleModifierD27',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'idx', internalType: 'bytes32', type: 'bytes32' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ScalableMapping_set_sharesD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'ScalableMapping_set_totalSharesD18',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ScalableMapping_totalAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

export const spotMarketSynthetixTestableScalableMappingStorageAddress =
  '0xc97A01873B0d62B9d744110B3017b56F4727D202' as const

export const spotMarketSynthetixTestableScalableMappingStorageConfig = {
  address: spotMarketSynthetixTestableScalableMappingStorageAddress,
  abi: spotMarketSynthetixTestableScalableMappingStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/TestableSystemPoolConfigurationStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixTestableSystemPoolConfigurationStorageABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SystemPoolConfiguration_get___reservedForFutureUse',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SystemPoolConfiguration_get_minLiquidityRatioD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SystemPoolConfiguration_get_preferredPool',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'SystemPoolConfiguration_set___reservedForFutureUse',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint256', type: 'uint256' }],
    name: 'SystemPoolConfiguration_set_minLiquidityRatioD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'SystemPoolConfiguration_set_preferredPool',
    outputs: [],
  },
] as const

export const spotMarketSynthetixTestableSystemPoolConfigurationStorageAddress =
  '0xdF8614E3a42dDC32Ec95Ed438869EB5B4d0F4Eb5' as const

export const spotMarketSynthetixTestableSystemPoolConfigurationStorageConfig = {
  address: spotMarketSynthetixTestableSystemPoolConfigurationStorageAddress,
  abi: spotMarketSynthetixTestableSystemPoolConfigurationStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/TestableVaultEpochStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixTestableVaultEpochStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amountD18', internalType: 'int256', type: 'int256' },
    ],
    name: 'VaultEpoch_assignDebtToAccount',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'VaultEpoch_consolidateAccountDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'debtChangeD18', internalType: 'int256', type: 'int256' }],
    name: 'VaultEpoch_distributeDebtToAccounts',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'VaultEpoch_getAccountCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'idx', internalType: 'uint256', type: 'uint256' }],
    name: 'VaultEpoch_get_consolidatedDebtAmountsD18',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'idx', internalType: 'uint128', type: 'uint128' }],
    name: 'VaultEpoch_get_lastDelegationTime',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'VaultEpoch_get_totalConsolidatedDebtD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'VaultEpoch_get_unconsolidatedDebtD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'idx', internalType: 'uint256', type: 'uint256' },
      { name: 'val', internalType: 'int256', type: 'int256' },
    ],
    name: 'VaultEpoch_set_consolidatedDebtAmountsD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'idx', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'VaultEpoch_set_lastDelegationTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'VaultEpoch_set_totalConsolidatedDebtD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'VaultEpoch_set_unconsolidatedDebtD18',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'VaultEpoch_totalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralAmountD18', internalType: 'uint256', type: 'uint256' },
      { name: 'leverageD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'VaultEpoch_updateAccountPosition',
    outputs: [],
  },
] as const

export const spotMarketSynthetixTestableVaultEpochStorageAddress =
  '0xD0700302fC769DE76BB98C2b10a46325fEBda460' as const

export const spotMarketSynthetixTestableVaultEpochStorageConfig = {
  address: spotMarketSynthetixTestableVaultEpochStorageAddress,
  abi: spotMarketSynthetixTestableVaultEpochStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/TestableVaultStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixTestableVaultStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'Vault_consolidateAccountDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'Vault_currentAccountCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_currentCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_currentDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'debtChangeD18', internalType: 'int256', type: 'int256' }],
    name: 'Vault_distributeDebtToAccounts',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_get___slotAvailableForFutureUse',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_get_epoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_get_prevTotalDebtD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'Vault_reset',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'bytes32', type: 'bytes32' }],
    name: 'Vault_set___slotAvailableForFutureUse',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint256', type: 'uint256' }],
    name: 'Vault_set_epoch',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'Vault_set_prevTotalDebtD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'collateralPriceD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Vault_updateCreditCapacity',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'int256', type: 'int256' },
      { name: '', internalType: 'int256', type: 'int256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'rewardId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'Vault_updateReward',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Vault_updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
] as const

export const spotMarketSynthetixTestableVaultStorageAddress =
  '0xe8021266D2659aa320c114f9333502B38787a04B' as const

export const spotMarketSynthetixTestableVaultStorageConfig = {
  address: spotMarketSynthetixTestableVaultStorageAddress,
  abi: spotMarketSynthetixTestableVaultStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/USDProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixUsdProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnWithAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destChainId', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferCrossChain',
    outputs: [{ name: 'feesPaid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const spotMarketSynthetixUsdProxyAddress =
  '0x629673e90e428069AeB328DE4EF2040a7C22f723' as const

export const spotMarketSynthetixUsdProxyConfig = {
  address: spotMarketSynthetixUsdProxyAddress,
  abi: spotMarketSynthetixUsdProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/USDRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixUsdRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnWithAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destChainId', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferCrossChain',
    outputs: [{ name: 'feesPaid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const spotMarketSynthetixUsdRouterAddress =
  '0xCB575e07D1547d7A2b736e7087AFeeb80c4389e1' as const

export const spotMarketSynthetixUsdRouterConfig = {
  address: spotMarketSynthetixUsdRouterAddress,
  abi: spotMarketSynthetixUsdRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/USDTokenModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixUsdTokenModuleABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnWithAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destChainId', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferCrossChain',
    outputs: [{ name: 'feesPaid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const spotMarketSynthetixUsdTokenModuleAddress =
  '0xc4C69b65ca3BFF98839A63a23AFb639a445f51A6' as const

export const spotMarketSynthetixUsdTokenModuleConfig = {
  address: spotMarketSynthetixUsdTokenModuleAddress,
  abi: spotMarketSynthetixUsdTokenModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/UtilsModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixUtilsModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'oracleManagerAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'configureOracleManager',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'k', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getConfig',
    outputs: [{ name: 'v', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ccipSend', internalType: 'address', type: 'address' },
      { name: 'ccipReceive', internalType: 'address', type: 'address' },
      { name: 'ccipTokenPool', internalType: 'address', type: 'address' },
    ],
    name: 'registerCcip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'k', internalType: 'bytes32', type: 'bytes32' },
      { name: 'v', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setConfig',
    outputs: [],
  },
] as const

export const spotMarketSynthetixUtilsModuleAddress =
  '0x8986BC8B1cDB92FE2a2E9765a34193dF5754254D' as const

export const spotMarketSynthetixUtilsModuleConfig = {
  address: spotMarketSynthetixUtilsModuleAddress,
  abi: spotMarketSynthetixUtilsModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/VaultModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixVaultModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [
      { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientDelegation',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralAmount' },
  {
    type: 'error',
    inputs: [{ name: 'leverage', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidLeverage',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'leverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'newCollateralAmountD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPosition',
    outputs: [
      { name: 'collateralAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      {
        name: 'collateralizationRatio',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const spotMarketSynthetixVaultModuleAddress =
  '0xb5A39c13b25cb5578BaC3f9C4DaA96e318281fC8' as const

export const spotMarketSynthetixVaultModuleConfig = {
  address: spotMarketSynthetixVaultModuleAddress,
  abi: spotMarketSynthetixVaultModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/oracle_manager/CoreModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixOracleManagerCoreModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const spotMarketSynthetixOracleManagerCoreModuleAddress =
  '0x606ACC428283663F0EFA30c75f39912BdfF49364' as const

export const spotMarketSynthetixOracleManagerCoreModuleConfig = {
  address: spotMarketSynthetixOracleManagerCoreModuleAddress,
  abi: spotMarketSynthetixOracleManagerCoreModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/oracle_manager/InitialProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixOracleManagerInitialProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const spotMarketSynthetixOracleManagerInitialProxyAddress =
  '0xc0958BD10cB079b7A6bfeC7Fb695F75845830E5f' as const

export const spotMarketSynthetixOracleManagerInitialProxyConfig = {
  address: spotMarketSynthetixOracleManagerInitialProxyAddress,
  abi: spotMarketSynthetixOracleManagerInitialProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/oracle_manager/NodeModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixOracleManagerNodeModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'deviation', internalType: 'int256', type: 'int256' }],
    name: 'DeviationToleranceExceeded',
  },
  { type: 'error', inputs: [], name: 'InvalidInputPrice' },
  {
    type: 'error',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
    name: 'InvalidNodeDefinition',
  },
  {
    type: 'error',
    inputs: [{ name: 'price', internalType: 'int256', type: 'int256' }],
    name: 'InvalidPrice',
  },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'NodeNotRegistered',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowInt56ToInt24' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint160' },
  { type: 'error', inputs: [], name: 'OverflowUint56ToInt56' },
  { type: 'error', inputs: [], name: 'StalenessToleranceExceeded' },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'UnprocessableNode',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'operation',
        internalType: 'enum ReducerNode.Operations',
        type: 'uint8',
      },
    ],
    name: 'UnsupportedOperation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'nodeId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'parameters',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'parents',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
        indexed: false,
      },
    ],
    name: 'NodeRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getNode',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'getNodeId',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'process',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeOutput.Data',
        type: 'tuple',
        components: [
          { name: 'price', internalType: 'int256', type: 'int256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
          {
            name: '__slotAvailableForFutureUse1',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: '__slotAvailableForFutureUse2',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'registerNode',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

export const spotMarketSynthetixOracleManagerNodeModuleAddress =
  '0xBa8acc65Dfa24e4547932BE2b248B3666fE59ade' as const

export const spotMarketSynthetixOracleManagerNodeModuleConfig = {
  address: spotMarketSynthetixOracleManagerNodeModuleAddress,
  abi: spotMarketSynthetixOracleManagerNodeModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/oracle_manager/OracleRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixOracleManagerOracleRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'deviation', internalType: 'int256', type: 'int256' }],
    name: 'DeviationToleranceExceeded',
  },
  { type: 'error', inputs: [], name: 'InvalidInputPrice' },
  {
    type: 'error',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
    name: 'InvalidNodeDefinition',
  },
  {
    type: 'error',
    inputs: [{ name: 'price', internalType: 'int256', type: 'int256' }],
    name: 'InvalidPrice',
  },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'NodeNotRegistered',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowInt56ToInt24' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint160' },
  { type: 'error', inputs: [], name: 'OverflowUint56ToInt56' },
  { type: 'error', inputs: [], name: 'StalenessToleranceExceeded' },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'UnprocessableNode',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'operation',
        internalType: 'enum ReducerNode.Operations',
        type: 'uint8',
      },
    ],
    name: 'UnsupportedOperation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'nodeId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'parameters',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'parents',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
        indexed: false,
      },
    ],
    name: 'NodeRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getNode',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'getNodeId',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'process',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeOutput.Data',
        type: 'tuple',
        components: [
          { name: 'price', internalType: 'int256', type: 'int256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
          {
            name: '__slotAvailableForFutureUse1',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: '__slotAvailableForFutureUse2',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'registerNode',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

export const spotMarketSynthetixOracleManagerOracleRouterAddress =
  '0xB1Aa8b59aED40bfa56356bfa10e18E17a11449d1' as const

export const spotMarketSynthetixOracleManagerOracleRouterConfig = {
  address: spotMarketSynthetixOracleManagerOracleRouterAddress,
  abi: spotMarketSynthetixOracleManagerOracleRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// spotMarket/synthetix/oracle_manager/Proxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spotMarketSynthetixOracleManagerProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'deviation', internalType: 'int256', type: 'int256' }],
    name: 'DeviationToleranceExceeded',
  },
  { type: 'error', inputs: [], name: 'InvalidInputPrice' },
  {
    type: 'error',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
    name: 'InvalidNodeDefinition',
  },
  {
    type: 'error',
    inputs: [{ name: 'price', internalType: 'int256', type: 'int256' }],
    name: 'InvalidPrice',
  },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'NodeNotRegistered',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowInt56ToInt24' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint160' },
  { type: 'error', inputs: [], name: 'OverflowUint56ToInt56' },
  { type: 'error', inputs: [], name: 'StalenessToleranceExceeded' },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'UnprocessableNode',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'operation',
        internalType: 'enum ReducerNode.Operations',
        type: 'uint8',
      },
    ],
    name: 'UnsupportedOperation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'nodeId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'parameters',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'parents',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
        indexed: false,
      },
    ],
    name: 'NodeRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getNode',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'getNodeId',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'process',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeOutput.Data',
        type: 'tuple',
        components: [
          { name: 'price', internalType: 'int256', type: 'int256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
          {
            name: '__slotAvailableForFutureUse1',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: '__slotAvailableForFutureUse2',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'registerNode',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

export const spotMarketSynthetixOracleManagerProxyAddress =
  '0xc0958BD10cB079b7A6bfeC7Fb695F75845830E5f' as const

export const spotMarketSynthetixOracleManagerProxyConfig = {
  address: spotMarketSynthetixOracleManagerProxyAddress,
  abi: spotMarketSynthetixOracleManagerProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/AccountModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixAccountModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
] as const

export const synthetixAccountModuleAddress =
  '0x979B8a61B877fC74f84648d0dCdeb42391ddCE3b' as const

export const synthetixAccountModuleConfig = {
  address: synthetixAccountModuleAddress,
  abi: synthetixAccountModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/AccountProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixAccountProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'CannotSelfApprove',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IndexOverrun',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidTransferRecipient',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenAlreadyMinted',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenDoesNotExist',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
    name: 'setBaseTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

export const synthetixAccountProxyAddress =
  '0xE06fE85b65E0110f78638022FA9AD58c6b6c69bF' as const

export const synthetixAccountProxyConfig = {
  address: synthetixAccountProxyAddress,
  abi: synthetixAccountProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/AccountRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixAccountRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'CannotSelfApprove',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IndexOverrun',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidTransferRecipient',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenAlreadyMinted',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenDoesNotExist',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
    name: 'setBaseTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

export const synthetixAccountRouterAddress =
  '0x6EbD720D47b0E1754CFe423e93730597D86aC26C' as const

export const synthetixAccountRouterConfig = {
  address: synthetixAccountRouterAddress,
  abi: synthetixAccountRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/AccountTokenModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixAccountTokenModuleABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'CannotSelfApprove',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IndexOverrun',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidTransferRecipient',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenAlreadyMinted',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenDoesNotExist',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
    name: 'setBaseTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

export const synthetixAccountTokenModuleAddress =
  '0x790F6939f3Cb0b76A1465A340aEF9347d92ceEA0' as const

export const synthetixAccountTokenModuleConfig = {
  address: synthetixAccountTokenModuleAddress,
  abi: synthetixAccountTokenModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/AssociateDebtModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixAssociateDebtModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint256', type: 'uint256' },
      { name: 'poolId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotFundedByPool',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'updatedDebt',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'DebtAssociated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'associateDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const synthetixAssociateDebtModuleAddress =
  '0xbe7a510c72aE8c23560Ac7ada5d8765F9492BadA' as const

export const synthetixAssociateDebtModuleConfig = {
  address: synthetixAssociateDebtModuleAddress,
  abi: synthetixAssociateDebtModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/AssociatedSystemsModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixAssociatedSystemsModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
] as const

export const synthetixAssociatedSystemsModuleAddress =
  '0xf8d85923ef87fb6e6f3875805beE59E02C596076' as const

export const synthetixAssociatedSystemsModuleConfig = {
  address: synthetixAssociatedSystemsModuleAddress,
  abi: synthetixAssociatedSystemsModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/CollateralConfigurationModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixCollateralConfigurationModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
    ],
    name: 'CollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'configureCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hideDisabled', internalType: 'bool', type: 'bool' }],
    name: 'getCollateralConfigurations',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

export const synthetixCollateralConfigurationModuleAddress =
  '0x9541aA2A6b9E4874205BfB8a348F287049FE5d0A' as const

export const synthetixCollateralConfigurationModuleConfig = {
  address: synthetixCollateralConfigurationModuleAddress,
  abi: synthetixCollateralConfigurationModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/CollateralMock
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixCollateralMockABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const synthetixCollateralMockAddress =
  '0x152E3B07d82538FaE3A588E0F04d176c2Ec08fA1' as const

export const synthetixCollateralMockConfig = {
  address: synthetixCollateralMockAddress,
  abi: synthetixCollateralMockABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/CollateralModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixCollateralModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'currentTime', internalType: 'uint256', type: 'uint256' },
      { name: 'requiredTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'AccountActivityTimeoutPending',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockExpired',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cleanExpiredLocks',
    outputs: [{ name: 'cleared', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'expireTimestamp', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'createLock',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountAvailableCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountCollateral',
    outputs: [
      { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
      { name: 'totalAssigned', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLocked', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getLocks',
    outputs: [
      {
        name: 'locks',
        internalType: 'struct CollateralLock.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'amountD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'lockExpirationTime',
            internalType: 'uint64',
            type: 'uint64',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [],
  },
] as const

export const synthetixCollateralModuleAddress =
  '0x658731A2CCf51FE5c92eD51A72A32F33702Bc526' as const

export const synthetixCollateralModuleConfig = {
  address: synthetixCollateralModuleAddress,
  abi: synthetixCollateralModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/CoreProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixCoreProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint256', type: 'uint256' },
      { name: 'poolId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotFundedByPool',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'updatedDebt',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'DebtAssociated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'associateDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'currentTime', internalType: 'uint256', type: 'uint256' },
      { name: 'requiredTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'AccountActivityTimeoutPending',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockExpired',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cleanExpiredLocks',
    outputs: [{ name: 'cleared', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'expireTimestamp', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'createLock',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountAvailableCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountCollateral',
    outputs: [
      { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
      { name: 'totalAssigned', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLocked', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getLocks',
    outputs: [
      {
        name: 'locks',
        internalType: 'struct CollateralLock.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'amountD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'lockExpirationTime',
            internalType: 'uint64',
            type: 'uint64',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
    ],
    name: 'CollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'configureCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hideDisabled', internalType: 'bool', type: 'bool' }],
    name: 'getCollateralConfigurations',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    type: 'error',
    inputs: [{ name: 'currentDebt', internalType: 'int256', type: 'int256' }],
    name: 'InsufficientDebt',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IssuanceFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdBurned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdMinted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnUsd',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintUsd',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      { name: 'currentCRatio', internalType: 'uint256', type: 'uint256' },
      { name: 'cratio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForLiquidation',
  },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  { type: 'error', inputs: [], name: 'MustBeVaultLiquidated' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Liquidation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'VaultLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isPositionLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isVaultLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
    ],
    name: 'liquidate',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
      { name: 'maxUsd', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'liquidateVault',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToDeposit',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralDepositable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToWithdraw',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralWithdrawable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'systemAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MaximumMarketCollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'configureMaximumMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMarketCollateralAmount',
    outputs: [
      { name: 'collateralAmountD18', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMaximumMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketCollateral',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'IncorrectMarketInterface',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughLiquidity',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSystemFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMarketMinLiquidityRatio',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minDelegateTime',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
    ],
    name: 'SetMinDelegateTime',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'depositFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketMinDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketNetIssuance',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketTotalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOracleManager',
    outputs: [
      { name: '', internalType: 'contract IOracleManager', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUsdToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getWithdrawableMarketUsd',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'isMarketCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'registerMarket',
    outputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minDelegateTime', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'setMarketMinDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PreferredPoolSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'addApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getApprovedPools',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPreferredPool',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'removeApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'setPreferredPool',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolAlreadyExists',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'markets',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolConfigurationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNameUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnershipAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinLiquidityRatio',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'acceptPoolOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedPoolId', internalType: 'uint128', type: 'uint128' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'createPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getNominatedPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolName',
    outputs: [{ name: 'poolName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nominatedOwner', internalType: 'address', type: 'address' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'nominatePoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'renouncePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'revokePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newMarketConfigurations',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
    name: 'setPoolConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'name', internalType: 'string', type: 'string' },
    ],
    name: 'setPoolName',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    type: 'error',
    inputs: [{ name: 'distributor', internalType: 'address', type: 'address' }],
    name: 'RewardUnavailable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'start',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'duration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsDistributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRemoved',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'claimRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'start', internalType: 'uint64', type: 'uint64' },
      { name: 'duration', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'distributeRewards',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'getRewardRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'registerRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'removeRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'oracleManagerAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'configureOracleManager',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'k', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getConfig',
    outputs: [{ name: 'v', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ccipSend', internalType: 'address', type: 'address' },
      { name: 'ccipReceive', internalType: 'address', type: 'address' },
      { name: 'ccipTokenPool', internalType: 'address', type: 'address' },
    ],
    name: 'registerCcip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'k', internalType: 'bytes32', type: 'bytes32' },
      { name: 'v', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setConfig',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientDelegation',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralAmount' },
  {
    type: 'error',
    inputs: [{ name: 'leverage', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidLeverage',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'leverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'newCollateralAmountD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPosition',
    outputs: [
      { name: 'collateralAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      {
        name: 'collateralizationRatio',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const synthetixCoreProxyAddress =
  '0x381aeF01aB853657163ccbBFC1A993D49a77307c' as const

export const synthetixCoreProxyConfig = {
  address: synthetixCoreProxyAddress,
  abi: synthetixCoreProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/CoreRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixCoreRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint256', type: 'uint256' },
      { name: 'poolId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotFundedByPool',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'updatedDebt',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'DebtAssociated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'associateDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'currentTime', internalType: 'uint256', type: 'uint256' },
      { name: 'requiredTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'AccountActivityTimeoutPending',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockExpired',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cleanExpiredLocks',
    outputs: [{ name: 'cleared', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'expireTimestamp', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'createLock',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountAvailableCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountCollateral',
    outputs: [
      { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
      { name: 'totalAssigned', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLocked', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getLocks',
    outputs: [
      {
        name: 'locks',
        internalType: 'struct CollateralLock.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'amountD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'lockExpirationTime',
            internalType: 'uint64',
            type: 'uint64',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
    ],
    name: 'CollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'configureCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hideDisabled', internalType: 'bool', type: 'bool' }],
    name: 'getCollateralConfigurations',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    type: 'error',
    inputs: [{ name: 'currentDebt', internalType: 'int256', type: 'int256' }],
    name: 'InsufficientDebt',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IssuanceFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdBurned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdMinted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnUsd',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintUsd',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      { name: 'currentCRatio', internalType: 'uint256', type: 'uint256' },
      { name: 'cratio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForLiquidation',
  },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  { type: 'error', inputs: [], name: 'MustBeVaultLiquidated' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Liquidation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'VaultLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isPositionLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isVaultLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
    ],
    name: 'liquidate',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
      { name: 'maxUsd', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'liquidateVault',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToDeposit',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralDepositable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToWithdraw',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralWithdrawable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'systemAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MaximumMarketCollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'configureMaximumMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMarketCollateralAmount',
    outputs: [
      { name: 'collateralAmountD18', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMaximumMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketCollateral',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'IncorrectMarketInterface',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughLiquidity',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSystemFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMarketMinLiquidityRatio',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minDelegateTime',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
    ],
    name: 'SetMinDelegateTime',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'depositFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketMinDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketNetIssuance',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketTotalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOracleManager',
    outputs: [
      { name: '', internalType: 'contract IOracleManager', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUsdToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getWithdrawableMarketUsd',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'isMarketCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'registerMarket',
    outputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minDelegateTime', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'setMarketMinDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PreferredPoolSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'addApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getApprovedPools',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPreferredPool',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'removeApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'setPreferredPool',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolAlreadyExists',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'markets',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolConfigurationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNameUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnershipAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinLiquidityRatio',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'acceptPoolOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedPoolId', internalType: 'uint128', type: 'uint128' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'createPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getNominatedPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolName',
    outputs: [{ name: 'poolName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nominatedOwner', internalType: 'address', type: 'address' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'nominatePoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'renouncePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'revokePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newMarketConfigurations',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
    name: 'setPoolConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'name', internalType: 'string', type: 'string' },
    ],
    name: 'setPoolName',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    type: 'error',
    inputs: [{ name: 'distributor', internalType: 'address', type: 'address' }],
    name: 'RewardUnavailable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'start',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'duration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsDistributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRemoved',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'claimRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'start', internalType: 'uint64', type: 'uint64' },
      { name: 'duration', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'distributeRewards',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'getRewardRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'registerRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'removeRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'oracleManagerAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'configureOracleManager',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'k', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getConfig',
    outputs: [{ name: 'v', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ccipSend', internalType: 'address', type: 'address' },
      { name: 'ccipReceive', internalType: 'address', type: 'address' },
      { name: 'ccipTokenPool', internalType: 'address', type: 'address' },
    ],
    name: 'registerCcip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'k', internalType: 'bytes32', type: 'bytes32' },
      { name: 'v', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setConfig',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientDelegation',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralAmount' },
  {
    type: 'error',
    inputs: [{ name: 'leverage', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidLeverage',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'leverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'newCollateralAmountD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPosition',
    outputs: [
      { name: 'collateralAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      {
        name: 'collateralizationRatio',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const synthetixCoreRouterAddress =
  '0x91752B65232fD32f9982273974c6aE0789e95697' as const

export const synthetixCoreRouterConfig = {
  address: synthetixCoreRouterAddress,
  abi: synthetixCoreRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/FeatureFlagModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixFeatureFlagModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
] as const

export const synthetixFeatureFlagModuleAddress =
  '0x002AB3794418cCbFE9bBAad708C3Fa30B94e0e0F' as const

export const synthetixFeatureFlagModuleConfig = {
  address: synthetixFeatureFlagModuleAddress,
  abi: synthetixFeatureFlagModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/InitialCoreProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixInitialCoreProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const synthetixInitialCoreProxyAddress =
  '0x381aeF01aB853657163ccbBFC1A993D49a77307c' as const

export const synthetixInitialCoreProxyConfig = {
  address: synthetixInitialCoreProxyAddress,
  abi: synthetixInitialCoreProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/InitialModuleBundle
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixInitialModuleBundleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const synthetixInitialModuleBundleAddress =
  '0x2F4a58770bDaBFef1f3Cee0eF6Ad05Db4F4d954E' as const

export const synthetixInitialModuleBundleConfig = {
  address: synthetixInitialModuleBundleAddress,
  abi: synthetixInitialModuleBundleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/IssueUSDModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixIssueUsdModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'currentDebt', internalType: 'int256', type: 'int256' }],
    name: 'InsufficientDebt',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IssuanceFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdBurned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdMinted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnUsd',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintUsd',
    outputs: [],
  },
] as const

export const synthetixIssueUsdModuleAddress =
  '0x1CD17c0acF7f48f3D6416b542E8f623b47e013ab' as const

export const synthetixIssueUsdModuleConfig = {
  address: synthetixIssueUsdModuleAddress,
  abi: synthetixIssueUsdModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/LiquidationModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixLiquidationModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      { name: 'currentCRatio', internalType: 'uint256', type: 'uint256' },
      { name: 'cratio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForLiquidation',
  },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  { type: 'error', inputs: [], name: 'MustBeVaultLiquidated' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Liquidation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'VaultLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isPositionLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isVaultLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
    ],
    name: 'liquidate',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
      { name: 'maxUsd', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'liquidateVault',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
] as const

export const synthetixLiquidationModuleAddress =
  '0x2cBB85cC49F73d87CACdeEA408ea196176Be60C9' as const

export const synthetixLiquidationModuleConfig = {
  address: synthetixLiquidationModuleAddress,
  abi: synthetixLiquidationModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/MarketCollateralModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixMarketCollateralModuleABI = [
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToDeposit',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralDepositable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToWithdraw',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralWithdrawable',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'systemAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MaximumMarketCollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'configureMaximumMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMarketCollateralAmount',
    outputs: [
      { name: 'collateralAmountD18', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMaximumMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketCollateral',
    outputs: [],
  },
] as const

export const synthetixMarketCollateralModuleAddress =
  '0xa61825604f9Bb29E8A9dF85b4bDb663B358D6638' as const

export const synthetixMarketCollateralModuleConfig = {
  address: synthetixMarketCollateralModuleAddress,
  abi: synthetixMarketCollateralModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/MarketManagerModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixMarketManagerModuleABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'IncorrectMarketInterface',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughLiquidity',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSystemFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMarketMinLiquidityRatio',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minDelegateTime',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
    ],
    name: 'SetMinDelegateTime',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'depositFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketMinDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketNetIssuance',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketTotalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOracleManager',
    outputs: [
      { name: '', internalType: 'contract IOracleManager', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUsdToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getWithdrawableMarketUsd',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'isMarketCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'registerMarket',
    outputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minDelegateTime', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'setMarketMinDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
] as const

export const synthetixMarketManagerModuleAddress =
  '0x0137ecb811330763277daE159B6Cf9306645c18f' as const

export const synthetixMarketManagerModuleConfig = {
  address: synthetixMarketManagerModuleAddress,
  abi: synthetixMarketManagerModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/MulticallModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixMulticallModuleABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
] as const

export const synthetixMulticallModuleAddress =
  '0xb61926f01cAD38f51236F861dABcC59626F2078d' as const

export const synthetixMulticallModuleConfig = {
  address: synthetixMulticallModuleAddress,
  abi: synthetixMulticallModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/PoolConfigurationModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixPoolConfigurationModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PreferredPoolSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'addApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getApprovedPools',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPreferredPool',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'removeApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'setPreferredPool',
    outputs: [],
  },
] as const

export const synthetixPoolConfigurationModuleAddress =
  '0x58fEF24F50d5658F7269aE804cF50dD1890992f6' as const

export const synthetixPoolConfigurationModuleConfig = {
  address: synthetixPoolConfigurationModuleAddress,
  abi: synthetixPoolConfigurationModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/PoolModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixPoolModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolAlreadyExists',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'markets',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolConfigurationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNameUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnershipAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinLiquidityRatio',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'acceptPoolOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedPoolId', internalType: 'uint128', type: 'uint128' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'createPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getNominatedPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolName',
    outputs: [{ name: 'poolName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nominatedOwner', internalType: 'address', type: 'address' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'nominatePoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'renouncePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'revokePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newMarketConfigurations',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
    name: 'setPoolConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'name', internalType: 'string', type: 'string' },
    ],
    name: 'setPoolName',
    outputs: [],
  },
] as const

export const synthetixPoolModuleAddress =
  '0xd14aA7Ac9f07c98F3C2984e3cFCC1Bcc5B766701' as const

export const synthetixPoolModuleConfig = {
  address: synthetixPoolModuleAddress,
  abi: synthetixPoolModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/RewardsManagerModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixRewardsManagerModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    type: 'error',
    inputs: [{ name: 'distributor', internalType: 'address', type: 'address' }],
    name: 'RewardUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'start',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'duration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsDistributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRemoved',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'claimRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'start', internalType: 'uint64', type: 'uint64' },
      { name: 'duration', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'distributeRewards',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'getRewardRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'registerRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'removeRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
] as const

export const synthetixRewardsManagerModuleAddress =
  '0x6E842803c349F55447F370d516f38461f45A6ed2' as const

export const synthetixRewardsManagerModuleConfig = {
  address: synthetixRewardsManagerModuleAddress,
  abi: synthetixRewardsManagerModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/TestableAccountRBACStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixTestableAccountRbacStorageABI = [
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'AccountRBAC_authorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'AccountRBAC_get_owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'AccountRBAC_grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'AccountRBAC_hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'AccountRBAC_isPermissionValid',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'AccountRBAC_revokeAllPermissions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'AccountRBAC_revokePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'AccountRBAC_setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'address', type: 'address' }],
    name: 'AccountRBAC_set_owner',
    outputs: [],
  },
] as const

export const synthetixTestableAccountRbacStorageAddress =
  '0x15979A635FF16F303261AC1392f7d000614458Cf' as const

export const synthetixTestableAccountRbacStorageConfig = {
  address: synthetixTestableAccountRbacStorageAddress,
  abi: synthetixTestableAccountRbacStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/TestableAccountStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixTestableAccountStorageABI = [
  {
    type: 'error',
    inputs: [
      { name: 'requestedAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAccountCollateral',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Account_getAssignedCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Account_getCollateralTotals',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Account_get___slot2AvailableForFutureUse',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Account_get___slotAvailableForFutureUse',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Account_get_id',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Account_get_lastInteraction',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Account_recordInteraction',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amountD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Account_requireSufficientCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Account_set___slot2AvailableForFutureUse',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Account_set___slotAvailableForFutureUse',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Account_set_id',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Account_set_lastInteraction',
    outputs: [],
  },
] as const

export const synthetixTestableAccountStorageAddress =
  '0xe3f20c7Af53a6E3EAd26d40b82bA8283D2B1b94d' as const

export const synthetixTestableAccountStorageConfig = {
  address: synthetixTestableAccountStorageAddress,
  abi: synthetixTestableAccountStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/TestableCollateralConfigurationStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixTestableCollateralConfigurationStorageABI = [
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [
      { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientDelegation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'token', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralConfiguration_collateralEnabled',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'CollateralConfiguration_convertTokenToSystemAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_token', internalType: 'address', type: 'address' }],
    name: 'CollateralConfiguration_getCollateralPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_token', internalType: 'address', type: 'address' }],
    name: 'CollateralConfiguration_get_depositingEnabled',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_token', internalType: 'address', type: 'address' }],
    name: 'CollateralConfiguration_get_issuanceRatioD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_token', internalType: 'address', type: 'address' }],
    name: 'CollateralConfiguration_get_liquidationRatioD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_token', internalType: 'address', type: 'address' }],
    name: 'CollateralConfiguration_get_liquidationRewardD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_token', internalType: 'address', type: 'address' }],
    name: 'CollateralConfiguration_get_minDelegationD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_token', internalType: 'address', type: 'address' }],
    name: 'CollateralConfiguration_get_oracleNodeId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_token', internalType: 'address', type: 'address' }],
    name: 'CollateralConfiguration_get_tokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'amountD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'CollateralConfiguration_requireSufficientDelegation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'CollateralConfiguration_set',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'bool', type: 'bool' },
    ],
    name: 'CollateralConfiguration_set_depositingEnabled',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'CollateralConfiguration_set_issuanceRatioD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'CollateralConfiguration_set_liquidationRatioD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'CollateralConfiguration_set_liquidationRewardD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'CollateralConfiguration_set_minDelegationD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'CollateralConfiguration_set_oracleNodeId',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralConfiguration_set_tokenAddress',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_token', internalType: 'address', type: 'address' },
      { name: 'debtD18', internalType: 'uint256', type: 'uint256' },
      { name: 'collateralValueD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'CollateralConfiguration_verifyIssuanceRatio',
    outputs: [],
  },
] as const

export const synthetixTestableCollateralConfigurationStorageAddress =
  '0x6a6FC716ce286bAb956861054448e324d790A505' as const

export const synthetixTestableCollateralConfigurationStorageConfig = {
  address: synthetixTestableCollateralConfigurationStorageAddress,
  abi: synthetixTestableCollateralConfigurationStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/TestableCollateralLockStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixTestableCollateralLockStorageABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CollateralLock_get_amountD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CollateralLock_get_lockExpirationTime',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'CollateralLock_set_amountD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint64', type: 'uint64' }],
    name: 'CollateralLock_set_lockExpirationTime',
    outputs: [],
  },
] as const

export const synthetixTestableCollateralLockStorageAddress =
  '0xc08e5Df07c71b628D3c3c6DD5E3A7639c33b65CC' as const

export const synthetixTestableCollateralLockStorageConfig = {
  address: synthetixTestableCollateralLockStorageAddress,
  abi: synthetixTestableCollateralLockStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/TestableCollateralStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixTestableCollateralStorageABI = [
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amountD18', internalType: 'uint256', type: 'uint256' }],
    name: 'Collateral_decreaseAvailableCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Collateral_getTotalLocked',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Collateral_get_amountAvailableForDelegationD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amountD18', internalType: 'uint256', type: 'uint256' }],
    name: 'Collateral_increaseAvailableCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint256', type: 'uint256' }],
    name: 'Collateral_set_amountAvailableForDelegationD18',
    outputs: [],
  },
] as const

export const synthetixTestableCollateralStorageAddress =
  '0x54bEF792148aBE24D48653ab0feF6Ddd94F7eb62' as const

export const synthetixTestableCollateralStorageConfig = {
  address: synthetixTestableCollateralStorageAddress,
  abi: synthetixTestableCollateralStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/TestableDistributionActorStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixTestableDistributionActorStorageABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DistributionActor_get_lastValuePerShareD27',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DistributionActor_get_sharesD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'DistributionActor_set_lastValuePerShareD27',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'DistributionActor_set_sharesD18',
    outputs: [],
  },
] as const

export const synthetixTestableDistributionActorStorageAddress =
  '0x407dF88963443940815d706Ff0Dbba029317e10E' as const

export const synthetixTestableDistributionActorStorageConfig = {
  address: synthetixTestableDistributionActorStorageAddress,
  abi: synthetixTestableDistributionActorStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/TestableDistributionStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixTestableDistributionStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'Distribution_accumulateActor',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'valueD18', internalType: 'int256', type: 'int256' }],
    name: 'Distribution_distributeValue',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'Distribution_getActorShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'Distribution_getActorValueChange',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Distribution_getValuePerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Distribution_get_totalSharesD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Distribution_get_valuePerShareD27',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'actorId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'newActorSharesD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Distribution_setActorShares',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'Distribution_set_totalSharesD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'Distribution_set_valuePerShareD27',
    outputs: [],
  },
] as const

export const synthetixTestableDistributionStorageAddress =
  '0x504AFA1d0Dba634478662145c733248f739064Af' as const

export const synthetixTestableDistributionStorageConfig = {
  address: synthetixTestableDistributionStorageAddress,
  abi: synthetixTestableDistributionStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/TestableMarketConfigurationStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixTestableMarketConfigurationStorageABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MarketConfiguration_get_marketId',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MarketConfiguration_get_maxDebtShareValueD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MarketConfiguration_get_weightD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketConfiguration_set_marketId',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'MarketConfiguration_set_maxDebtShareValueD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketConfiguration_set_weightD18',
    outputs: [],
  },
] as const

export const synthetixTestableMarketConfigurationStorageAddress =
  '0xeB8202F536559bE65cD21c2c7e45F3ccB836e352' as const

export const synthetixTestableMarketConfigurationStorageConfig = {
  address: synthetixTestableMarketConfigurationStorageAddress,
  abi: synthetixTestableMarketConfigurationStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/TestableMarketPoolInfoStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixTestableMarketPoolInfoStorageABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MarketPoolInfo_get_creditCapacityAmountD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MarketPoolInfo_get_pendingDebtD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketPoolInfo_set_creditCapacityAmountD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketPoolInfo_set_pendingDebtD18',
    outputs: [],
  },
] as const

export const synthetixTestableMarketPoolInfoStorageAddress =
  '0xD6413ea2b9A2232e4D4D285eb9eF680c362892D3' as const

export const synthetixTestableMarketPoolInfoStorageConfig = {
  address: synthetixTestableMarketPoolInfoStorageAddress,
  abi: synthetixTestableMarketPoolInfoStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/TestableMarketStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixTestableMarketStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Market__testOnly_getOutstandingDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market__testOnly_inRangePools',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market__testOnly_outRangePools',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newCreditCapacityD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'newPoolMaxShareValueD18',
        internalType: 'int256',
        type: 'int256',
      },
    ],
    name: 'Market_adjustPoolShares',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'maxDistributedD18', internalType: 'int256', type: 'int256' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Market_bumpPools',
    outputs: [
      { name: '', internalType: 'int256', type: 'int256' },
      { name: '', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Market_distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      {
        name: 'creditCapacitySharesD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'maxShareValueD18', internalType: 'int256', type: 'int256' },
    ],
    name: 'Market_getCreditCapacityContribution',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_getDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_getDepositedCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_getLockedCreditCapacity',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Market_getPoolCreditCapacity',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_getReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'valueToDistributeD18', internalType: 'int256', type: 'int256' },
    ],
    name: 'Market_getTargetValuePerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get___reservedForLater1',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get___reservedForLater2',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get___reservedForLater3',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get___reservedForLater4',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_creditCapacityD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_id',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_lastDistributedMarketBalanceD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_marketAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'idx', internalType: 'address', type: 'address' },
    ],
    name: 'Market_get_maximumDepositableD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_minDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_minLiquidityRatioD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_netIssuanceD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_isCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxDebtShareValueD18', internalType: 'int256', type: 'int256' },
      {
        name: 'newCreditCapacityD18',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'Market_rebalancePools',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'Market_set___reservedForLater1',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Market_set___reservedForLater2',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Market_set___reservedForLater3',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Market_set___reservedForLater4',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'int128', type: 'int128' },
    ],
    name: 'Market_set_creditCapacityD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Market_set_id',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'int128', type: 'int128' },
    ],
    name: 'Market_set_lastDistributedMarketBalanceD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'address', type: 'address' },
    ],
    name: 'Market_set_marketAddress',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'idx', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Market_set_maximumDepositableD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'Market_set_minDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Market_set_minLiquidityRatioD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'int128', type: 'int128' },
    ],
    name: 'Market_set_netIssuanceD18',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_totalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const synthetixTestableMarketStorageAddress =
  '0x330b2de1a041c2D78225337dfDf7F3c922dE684B' as const

export const synthetixTestableMarketStorageConfig = {
  address: synthetixTestableMarketStorageAddress,
  abi: synthetixTestableMarketStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/TestablePoolStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixTestablePoolStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_currentAccountCollateral',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_currentAccountCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_currentVaultCollateral',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_currentVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_currentVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_distributeDebtToVaults',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_getRequiredMinDelegationTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'minLiquidityRatioD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'debtPerShareD18', internalType: 'int256', type: 'int256' },
    ],
    name: 'Pool_getSystemMaxValuePerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get___reserved1',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get___reserved2',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get___reserved3',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_id',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_lastConfigurationTime',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_totalVaultDebtsD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_totalWeightsD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_hasMarket',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'caller', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_onlyPoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_recalculateVaultCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'lastDelegationTime', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_requireMinDelegationTimeElapsed',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_resetVault',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set___reserved1',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set___reserved2',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set___reserved3',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_set_id',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set_lastConfigurationTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'string', type: 'string' },
    ],
    name: 'Pool_set_name',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_set_nominatedOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_set_owner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'int128', type: 'int128' },
    ],
    name: 'Pool_set_totalVaultDebtsD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_set_totalWeightsD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_updateAccountDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const synthetixTestablePoolStorageAddress =
  '0x47eb1a48Ebd64aEcb709f5DDF3c17005Fa178964' as const

export const synthetixTestablePoolStorageConfig = {
  address: synthetixTestablePoolStorageAddress,
  abi: synthetixTestablePoolStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/TestableRewardDistributionClaimStatusStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixTestableRewardDistributionClaimStatusStorageABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RewardDistributionClaimStatus_get_lastRewardPerShareD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RewardDistributionClaimStatus_get_pendingSendD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'RewardDistributionClaimStatus_set_lastRewardPerShareD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'RewardDistributionClaimStatus_set_pendingSendD18',
    outputs: [],
  },
] as const

export const synthetixTestableRewardDistributionClaimStatusStorageAddress =
  '0x83D0EA8FCD52b2994f0EE2aaE45E2254e32210Dd' as const

export const synthetixTestableRewardDistributionClaimStatusStorageConfig = {
  address: synthetixTestableRewardDistributionClaimStatusStorageAddress,
  abi: synthetixTestableRewardDistributionClaimStatusStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/TestableRewardDistributionStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixTestableRewardDistributionStorageABI = [
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RewardDistribution_get___slotAvailableForFutureUse',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RewardDistribution_get_duration',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RewardDistribution_get_lastUpdate',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RewardDistribution_get_rewardPerShareD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RewardDistribution_get_scheduledValueD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RewardDistribution_get_start',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'RewardDistribution_set___slotAvailableForFutureUse',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint32', type: 'uint32' }],
    name: 'RewardDistribution_set_duration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint32', type: 'uint32' }],
    name: 'RewardDistribution_set_lastUpdate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'RewardDistribution_set_rewardPerShareD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'RewardDistribution_set_scheduledValueD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint64', type: 'uint64' }],
    name: 'RewardDistribution_set_start',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'totalSharesAmountD18',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'RewardDistribution_updateEntry',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const synthetixTestableRewardDistributionStorageAddress =
  '0xC71E629349CbB297fc2dAA93bD9978E567A4BfC1' as const

export const synthetixTestableRewardDistributionStorageConfig = {
  address: synthetixTestableRewardDistributionStorageAddress,
  abi: synthetixTestableRewardDistributionStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/TestableScalableMappingStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixTestableScalableMappingStorageABI = [
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'ScalableMapping_get',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'amountD18', internalType: 'uint256', type: 'uint256' }],
    name: 'ScalableMapping_getSharesForAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ScalableMapping_get_scaleModifierD27',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'idx', internalType: 'bytes32', type: 'bytes32' }],
    name: 'ScalableMapping_get_sharesD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ScalableMapping_get_totalSharesD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'valueD18', internalType: 'int256', type: 'int256' }],
    name: 'ScalableMapping_scale',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'actorId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'newActorValueD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ScalableMapping_set',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'ScalableMapping_set_scaleModifierD27',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'idx', internalType: 'bytes32', type: 'bytes32' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ScalableMapping_set_sharesD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'ScalableMapping_set_totalSharesD18',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ScalableMapping_totalAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

export const synthetixTestableScalableMappingStorageAddress =
  '0xc97A01873B0d62B9d744110B3017b56F4727D202' as const

export const synthetixTestableScalableMappingStorageConfig = {
  address: synthetixTestableScalableMappingStorageAddress,
  abi: synthetixTestableScalableMappingStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/TestableSystemPoolConfigurationStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixTestableSystemPoolConfigurationStorageABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SystemPoolConfiguration_get___reservedForFutureUse',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SystemPoolConfiguration_get_minLiquidityRatioD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SystemPoolConfiguration_get_preferredPool',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'SystemPoolConfiguration_set___reservedForFutureUse',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint256', type: 'uint256' }],
    name: 'SystemPoolConfiguration_set_minLiquidityRatioD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'SystemPoolConfiguration_set_preferredPool',
    outputs: [],
  },
] as const

export const synthetixTestableSystemPoolConfigurationStorageAddress =
  '0xdF8614E3a42dDC32Ec95Ed438869EB5B4d0F4Eb5' as const

export const synthetixTestableSystemPoolConfigurationStorageConfig = {
  address: synthetixTestableSystemPoolConfigurationStorageAddress,
  abi: synthetixTestableSystemPoolConfigurationStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/TestableVaultEpochStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixTestableVaultEpochStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amountD18', internalType: 'int256', type: 'int256' },
    ],
    name: 'VaultEpoch_assignDebtToAccount',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'VaultEpoch_consolidateAccountDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'debtChangeD18', internalType: 'int256', type: 'int256' }],
    name: 'VaultEpoch_distributeDebtToAccounts',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'VaultEpoch_getAccountCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'idx', internalType: 'uint256', type: 'uint256' }],
    name: 'VaultEpoch_get_consolidatedDebtAmountsD18',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'idx', internalType: 'uint128', type: 'uint128' }],
    name: 'VaultEpoch_get_lastDelegationTime',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'VaultEpoch_get_totalConsolidatedDebtD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'VaultEpoch_get_unconsolidatedDebtD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'idx', internalType: 'uint256', type: 'uint256' },
      { name: 'val', internalType: 'int256', type: 'int256' },
    ],
    name: 'VaultEpoch_set_consolidatedDebtAmountsD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'idx', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'VaultEpoch_set_lastDelegationTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'VaultEpoch_set_totalConsolidatedDebtD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'VaultEpoch_set_unconsolidatedDebtD18',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'VaultEpoch_totalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralAmountD18', internalType: 'uint256', type: 'uint256' },
      { name: 'leverageD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'VaultEpoch_updateAccountPosition',
    outputs: [],
  },
] as const

export const synthetixTestableVaultEpochStorageAddress =
  '0xD0700302fC769DE76BB98C2b10a46325fEBda460' as const

export const synthetixTestableVaultEpochStorageConfig = {
  address: synthetixTestableVaultEpochStorageAddress,
  abi: synthetixTestableVaultEpochStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/TestableVaultStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixTestableVaultStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'Vault_consolidateAccountDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'Vault_currentAccountCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_currentCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_currentDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'debtChangeD18', internalType: 'int256', type: 'int256' }],
    name: 'Vault_distributeDebtToAccounts',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_get___slotAvailableForFutureUse',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_get_epoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_get_prevTotalDebtD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'Vault_reset',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'bytes32', type: 'bytes32' }],
    name: 'Vault_set___slotAvailableForFutureUse',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint256', type: 'uint256' }],
    name: 'Vault_set_epoch',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'Vault_set_prevTotalDebtD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'collateralPriceD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Vault_updateCreditCapacity',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'int256', type: 'int256' },
      { name: '', internalType: 'int256', type: 'int256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'rewardId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'Vault_updateReward',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Vault_updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
] as const

export const synthetixTestableVaultStorageAddress =
  '0xe8021266D2659aa320c114f9333502B38787a04B' as const

export const synthetixTestableVaultStorageConfig = {
  address: synthetixTestableVaultStorageAddress,
  abi: synthetixTestableVaultStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/USDProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixUsdProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnWithAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destChainId', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferCrossChain',
    outputs: [{ name: 'feesPaid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const synthetixUsdProxyAddress =
  '0x629673e90e428069AeB328DE4EF2040a7C22f723' as const

export const synthetixUsdProxyConfig = {
  address: synthetixUsdProxyAddress,
  abi: synthetixUsdProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/USDRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixUsdRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnWithAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destChainId', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferCrossChain',
    outputs: [{ name: 'feesPaid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const synthetixUsdRouterAddress =
  '0xCB575e07D1547d7A2b736e7087AFeeb80c4389e1' as const

export const synthetixUsdRouterConfig = {
  address: synthetixUsdRouterAddress,
  abi: synthetixUsdRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/USDTokenModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixUsdTokenModuleABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnWithAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destChainId', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferCrossChain',
    outputs: [{ name: 'feesPaid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const synthetixUsdTokenModuleAddress =
  '0xc4C69b65ca3BFF98839A63a23AFb639a445f51A6' as const

export const synthetixUsdTokenModuleConfig = {
  address: synthetixUsdTokenModuleAddress,
  abi: synthetixUsdTokenModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/UtilsModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixUtilsModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'oracleManagerAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'configureOracleManager',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'k', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getConfig',
    outputs: [{ name: 'v', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ccipSend', internalType: 'address', type: 'address' },
      { name: 'ccipReceive', internalType: 'address', type: 'address' },
      { name: 'ccipTokenPool', internalType: 'address', type: 'address' },
    ],
    name: 'registerCcip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'k', internalType: 'bytes32', type: 'bytes32' },
      { name: 'v', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setConfig',
    outputs: [],
  },
] as const

export const synthetixUtilsModuleAddress =
  '0x8986BC8B1cDB92FE2a2E9765a34193dF5754254D' as const

export const synthetixUtilsModuleConfig = {
  address: synthetixUtilsModuleAddress,
  abi: synthetixUtilsModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/VaultModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixVaultModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [
      { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientDelegation',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralAmount' },
  {
    type: 'error',
    inputs: [{ name: 'leverage', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidLeverage',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'leverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'newCollateralAmountD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPosition',
    outputs: [
      { name: 'collateralAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      {
        name: 'collateralizationRatio',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const synthetixVaultModuleAddress =
  '0xb5A39c13b25cb5578BaC3f9C4DaA96e318281fC8' as const

export const synthetixVaultModuleConfig = {
  address: synthetixVaultModuleAddress,
  abi: synthetixVaultModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/oracle_manager/CoreModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixOracleManagerCoreModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const synthetixOracleManagerCoreModuleAddress =
  '0x606ACC428283663F0EFA30c75f39912BdfF49364' as const

export const synthetixOracleManagerCoreModuleConfig = {
  address: synthetixOracleManagerCoreModuleAddress,
  abi: synthetixOracleManagerCoreModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/oracle_manager/InitialProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixOracleManagerInitialProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const synthetixOracleManagerInitialProxyAddress =
  '0xc0958BD10cB079b7A6bfeC7Fb695F75845830E5f' as const

export const synthetixOracleManagerInitialProxyConfig = {
  address: synthetixOracleManagerInitialProxyAddress,
  abi: synthetixOracleManagerInitialProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/oracle_manager/NodeModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixOracleManagerNodeModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'deviation', internalType: 'int256', type: 'int256' }],
    name: 'DeviationToleranceExceeded',
  },
  { type: 'error', inputs: [], name: 'InvalidInputPrice' },
  {
    type: 'error',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
    name: 'InvalidNodeDefinition',
  },
  {
    type: 'error',
    inputs: [{ name: 'price', internalType: 'int256', type: 'int256' }],
    name: 'InvalidPrice',
  },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'NodeNotRegistered',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowInt56ToInt24' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint160' },
  { type: 'error', inputs: [], name: 'OverflowUint56ToInt56' },
  { type: 'error', inputs: [], name: 'StalenessToleranceExceeded' },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'UnprocessableNode',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'operation',
        internalType: 'enum ReducerNode.Operations',
        type: 'uint8',
      },
    ],
    name: 'UnsupportedOperation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'nodeId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'parameters',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'parents',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
        indexed: false,
      },
    ],
    name: 'NodeRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getNode',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'getNodeId',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'process',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeOutput.Data',
        type: 'tuple',
        components: [
          { name: 'price', internalType: 'int256', type: 'int256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
          {
            name: '__slotAvailableForFutureUse1',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: '__slotAvailableForFutureUse2',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'registerNode',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

export const synthetixOracleManagerNodeModuleAddress =
  '0xBa8acc65Dfa24e4547932BE2b248B3666fE59ade' as const

export const synthetixOracleManagerNodeModuleConfig = {
  address: synthetixOracleManagerNodeModuleAddress,
  abi: synthetixOracleManagerNodeModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/oracle_manager/OracleRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixOracleManagerOracleRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'deviation', internalType: 'int256', type: 'int256' }],
    name: 'DeviationToleranceExceeded',
  },
  { type: 'error', inputs: [], name: 'InvalidInputPrice' },
  {
    type: 'error',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
    name: 'InvalidNodeDefinition',
  },
  {
    type: 'error',
    inputs: [{ name: 'price', internalType: 'int256', type: 'int256' }],
    name: 'InvalidPrice',
  },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'NodeNotRegistered',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowInt56ToInt24' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint160' },
  { type: 'error', inputs: [], name: 'OverflowUint56ToInt56' },
  { type: 'error', inputs: [], name: 'StalenessToleranceExceeded' },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'UnprocessableNode',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'operation',
        internalType: 'enum ReducerNode.Operations',
        type: 'uint8',
      },
    ],
    name: 'UnsupportedOperation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'nodeId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'parameters',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'parents',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
        indexed: false,
      },
    ],
    name: 'NodeRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getNode',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'getNodeId',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'process',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeOutput.Data',
        type: 'tuple',
        components: [
          { name: 'price', internalType: 'int256', type: 'int256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
          {
            name: '__slotAvailableForFutureUse1',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: '__slotAvailableForFutureUse2',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'registerNode',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

export const synthetixOracleManagerOracleRouterAddress =
  '0xB1Aa8b59aED40bfa56356bfa10e18E17a11449d1' as const

export const synthetixOracleManagerOracleRouterConfig = {
  address: synthetixOracleManagerOracleRouterAddress,
  abi: synthetixOracleManagerOracleRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// synthetix/oracle_manager/Proxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixOracleManagerProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'deviation', internalType: 'int256', type: 'int256' }],
    name: 'DeviationToleranceExceeded',
  },
  { type: 'error', inputs: [], name: 'InvalidInputPrice' },
  {
    type: 'error',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
    name: 'InvalidNodeDefinition',
  },
  {
    type: 'error',
    inputs: [{ name: 'price', internalType: 'int256', type: 'int256' }],
    name: 'InvalidPrice',
  },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'NodeNotRegistered',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowInt56ToInt24' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint160' },
  { type: 'error', inputs: [], name: 'OverflowUint56ToInt56' },
  { type: 'error', inputs: [], name: 'StalenessToleranceExceeded' },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'UnprocessableNode',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'operation',
        internalType: 'enum ReducerNode.Operations',
        type: 'uint8',
      },
    ],
    name: 'UnsupportedOperation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'nodeId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'parameters',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'parents',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
        indexed: false,
      },
    ],
    name: 'NodeRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getNode',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'getNodeId',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'process',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeOutput.Data',
        type: 'tuple',
        components: [
          { name: 'price', internalType: 'int256', type: 'int256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
          {
            name: '__slotAvailableForFutureUse1',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: '__slotAvailableForFutureUse2',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'registerNode',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

export const synthetixOracleManagerProxyAddress =
  '0xc0958BD10cB079b7A6bfeC7Fb695F75845830E5f' as const

export const synthetixOracleManagerProxyConfig = {
  address: synthetixOracleManagerProxyAddress,
  abi: synthetixOracleManagerProxyABI,
} as const
